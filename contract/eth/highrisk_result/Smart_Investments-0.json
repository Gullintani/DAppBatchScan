{"error": null, "issues": [{"address": 714, "code": "            ReferralGroup memory group = refGroups[i];\n            if (_sum >= group.minSum && _sum <= group.maxSum) return group.percents;\n        }\n    }\n\n    function getRefPercentsByIndex(uint256 _index) public view returns(uint16[] memory) {\n        return refGroups[_index].percents;\n", "debug": "storage_87903029871075914254377627908054574944891091886930582284385770809450030037085: 0x800000000000000000000000000000000000000000000000000000000000001\ncalldata_SmartInvestments_4: 0x0\nstorage_87903029871075914254377627908054574944891091886930582284385770809450030037084: 0x0\nstorage_87903029871075914254377627908054574944891091886930582284385770809450030037083: 0x0\nstorage_3: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_SmartInvestments_0: 0x1726d2c500000000000000000000000000000000000000000000000000000000\ncalldatasize_SmartInvestments: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `getRefPercents(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/temp/Smart_Investments-0.sol", "function": "getRefPercents(uint256)", "lineno": 133, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2610, "code": " _distribute(investor, msg.value);\n\n      ", "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x20000000000\nstorage_7: 0x20000000000\ncallvalue: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldatasize_SmartInvestments: 0x3\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/temp/Smart_Investments-0.sol", "function": "fallback", "lineno": 294, "title": "Exception state", "type": "Informational"}, {"address": 2662, "code": "r memory investor = investors", "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x400000000000000000000000000000000\ncallvalue: 0xaa235ea45225d6dce63d66615aac18002115454a7df4472b057dd6a6fbd46f66\nstorage_75276140696391174450305814049576319106646922510300487059720162673006384432776 +\n7*\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller +\n4: 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb\nstorage_1 +\n75276140696391174450305814049576319106646922510300487059720162673006384432776 +\n7*\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xabb9cf361ad512052dd4a1500aad1cfc5e9a31723135973f797906c4c2c17772\nstorage_75276140696391174450305814049576319106646922510300487059720162673006384432776 +\n7*\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller +\n1: 0x0\nstorage_62514009886607029107290561805838585334079798074568712924583230797734656856475: 0x1\nstorage_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_7: 0x400000000000000000000000000000001\ncalldatasize_SmartInvestments: 0x3\n", "description": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/temp/Smart_Investments-0.sol", "function": "fallback", "lineno": 301, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2675, "code": "er]];\n        return inve", "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x400000000000000000000000000000000\ncallvalue: 0xaa235ea45225d6dce63d66615aac18002115454a7df4472b057dd6a6fbd46f66\nstorage_75276140696391174450305814049576319106646922510300487059720162673006384432776 +\n7*\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller +\n4: 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb\nstorage_5: 0xabb9cf361ad512052dd4a1500aad1cfc5e9a31723135973f797906c4c2c17772\nstorage_75276140696391174450305814049576319106646922510300487059720162673006384432776 +\n7*\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller +\n1: 0x0\nstorage_62514009886607029107290561805838585334079798074568712924583230797734656856475: 0x1\nstorage_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_7: 0x400000000000000000000000000000001\ncalldatasize_SmartInvestments: 0x3\n", "description": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/temp/Smart_Investments-0.sol", "function": "fallback", "lineno": 301, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3402, "code": "RefPercentsB", "debug": "The exception is triggered under the following conditions:\n\ncalldata_SmartInvestments_0: 0x1726d2c500000000000000000000000000000000000000000000000000000000\ncalldatasize_SmartInvestments: 0x4\nstorage_3: 0x0\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/temp/Smart_Investments-0.sol", "function": "getRefPercents(uint256)", "lineno": 138, "title": "Exception state", "type": "Informational"}, {"address": 3460, "code": "    }\n    }\n\n    function getRefPercentsB", "debug": "storage_87903029871075914254377627908054574944891091886930582284385770809450030037085: 0x800000000000000000000000000000000000000000000000000000000000000\nstorage_3: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_SmartInvestments_0: 0x1726d2c500000000000000000000000000000000000000000000000000000000\ncalldatasize_SmartInvestments: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `getRefPercents(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/temp/Smart_Investments-0.sol", "function": "getRefPercents(uint256)", "lineno": 135, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3463, "code": "    }\n    }\n\n    function getRefPercentsB", "debug": "storage_87903029871075914254377627908054574944891091886930582284385770809450030037085: 0x7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_3: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_SmartInvestments_0: 0x1726d2c500000000000000000000000000000000000000000000000000000000\ncalldatasize_SmartInvestments: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `getRefPercents(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/temp/Smart_Investments-0.sol", "function": "getRefPercents(uint256)", "lineno": 135, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3469, "code": "    }\n    }\n\n    function getRefPercentsB", "debug": "storage_87903029871075914254377627908054574944891091886930582284385770809450030037085: 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6\nstorage_3: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_SmartInvestments_0: 0x1726d2c500000000000000000000000000000000000000000000000000000000\ncalldatasize_SmartInvestments: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `getRefPercents(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/temp/Smart_Investments-0.sol", "function": "getRefPercents(uint256)", "lineno": 135, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3494, "code": "    }\n    }\n\n    function getRefPercentsB", "debug": "storage_87903029871075914254377627908054574944891091886930582284385770809450030037085: 0x8421003f084001f4210815cf88407c00000000000000037c1d000e8d178001f\nstorage_3: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_SmartInvestments_0: 0x1726d2c500000000000000000000000000000000000000000000000000000000\ncalldatasize_SmartInvestments: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `getRefPercents(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/temp/Smart_Investments-0.sol", "function": "getRefPercents(uint256)", "lineno": 135, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3496, "code": "    }\n    }\n\n    function getRefPercentsB", "debug": "storage_87903029871075914254377627908054574944891091886930582284385770809450030037085: 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6\nstorage_3: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_SmartInvestments_0: 0x1726d2c500000000000000000000000000000000000000000000000000000000\ncalldatasize_SmartInvestments: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `getRefPercents(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/temp/Smart_Investments-0.sol", "function": "getRefPercents(uint256)", "lineno": 135, "title": "Integer Overflow ", "type": "Warning"}, {"address": 4054, "code": "ire(addressToInvestorId[msg", "debug": "The exception is triggered under the following conditions:\n\ncalldata_SmartInvestments_4: 0x0\nstorage_7: 0x0\ncalldata_SmartInvestments_0: 0x3feb5f2b00000000000000000000000000000000000000000000000000000000\ncalldatasize_SmartInvestments: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/temp/Smart_Investments-0.sol", "function": "_function_0x3feb5f2b", "lineno": 189, "title": "Exception state", "type": "Informational"}, {"address": 4140, "code": "   function ge", "debug": "The exception is triggered under the following conditions:\n\ncalldata_SmartInvestments_4: 0x0\nstorage_7: 0x0\ncalldata_SmartInvestments_0: 0x41c9696400000000000000000000000000000000000000000000000000000000\ncalldatasize_SmartInvestments: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/temp/Smart_Investments-0.sol", "function": "getInvestorInfo(uint256)", "lineno": 212, "title": "Exception state", "type": "Informational"}, {"address": 4218, "code": "yLevel[uint8(0)]);\n    }\n\n    function ge", "debug": "storage_75276140696391174450305814049576319106646922510300487059720162673006384432776 +\n7*calldata_SmartInvestments_4 +\n4: 0x800000000000000000000000000000000000000000000000000000000000000\ncalldata_SmartInvestments_4: 0x0\nstorage_7: 0x1\ncalldata_SmartInvestments_0: 0x41c9696400000000000000000000000000000000000000000000000000000000\ncalldatasize_SmartInvestments: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `getInvestorInfo(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/temp/Smart_Investments-0.sol", "function": "getInvestorInfo(uint256)", "lineno": 209, "title": "Integer Overflow ", "type": "Warning"}, {"address": 4221, "code": "yLevel[uint8(0)]);\n    }\n\n    function ge", "debug": "storage_75276140696391174450305814049576319106646922510300487059720162673006384432776 +\n7*calldata_SmartInvestments_4 +\n4: 0x7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_SmartInvestments_4: 0x0\nstorage_7: 0x1\ncalldata_SmartInvestments_0: 0x41c9696400000000000000000000000000000000000000000000000000000000\ncalldatasize_SmartInvestments: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `getInvestorInfo(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/temp/Smart_Investments-0.sol", "function": "getInvestorInfo(uint256)", "lineno": 209, "title": "Integer Overflow ", "type": "Warning"}, {"address": 4227, "code": "yLevel[uint8(0)]);\n    }\n\n    function ge", "debug": "storage_75276140696391174450305814049576319106646922510300487059720162673006384432776 +\n7*calldata_SmartInvestments_4 +\n4: 0x7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffef\ncalldata_SmartInvestments_4: 0x0\nstorage_7: 0x1\ncalldata_SmartInvestments_0: 0x41c9696400000000000000000000000000000000000000000000000000000000\ncalldatasize_SmartInvestments: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `getInvestorInfo(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/temp/Smart_Investments-0.sol", "function": "getInvestorInfo(uint256)", "lineno": 209, "title": "Integer Overflow ", "type": "Warning"}, {"address": 4252, "code": "yLevel[uint8(0)]);\n    }\n\n    function ge", "debug": "storage_75276140696391174450305814049576319106646922510300487059720162673006384432776 +\n7*calldata_SmartInvestments_4 +\n4: 0x8421003f084001f4210815cf88407c00000000000000037c1d000e8d178001f\ncalldata_SmartInvestments_4: 0x0\nstorage_7: 0x1\ncalldata_SmartInvestments_0: 0x41c9696400000000000000000000000000000000000000000000000000000000\ncalldatasize_SmartInvestments: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `getInvestorInfo(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/temp/Smart_Investments-0.sol", "function": "getInvestorInfo(uint256)", "lineno": 209, "title": "Integer Overflow ", "type": "Warning"}, {"address": 4254, "code": "yLevel[uint8(0)]);\n    }\n\n    function ge", "debug": "storage_75276140696391174450305814049576319106646922510300487059720162673006384432776 +\n7*calldata_SmartInvestments_4 +\n4: 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7\ncalldata_SmartInvestments_4: 0x0\nstorage_7: 0x1\ncalldata_SmartInvestments_0: 0x41c9696400000000000000000000000000000000000000000000000000000000\ncalldatasize_SmartInvestments: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `getInvestorInfo(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/temp/Smart_Investments-0.sol", "function": "getInvestorInfo(uint256)", "lineno": 209, "title": "Integer Overflow ", "type": "Warning"}, {"address": 4431, "code": "(address _address) public view returns(uint256) {\n        return addressToInvestorId[_address];\n    }\n\n    function getInvestorAddress(uint256 _id) public view returns(addre", "debug": "storage_keccac_0: 0x8421003f084001f4210815cf88407c00000000000000037c1d000e8d178001f\ncalldata_SmartInvestments_4: 0x0\nstorage_7: 0x1\ncalldata_SmartInvestments_0: 0x41c9696400000000000000000000000000000000000000000000000000000000\ncalldatasize_SmartInvestments: 0x4\nstorage_75276140696391174450305814049576319106646922510300487059720162673006384432776 +\n7*calldata_SmartInvestments_4 +\n4: 0x0\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `getInvestorInfo(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/temp/Smart_Investments-0.sol", "function": "getInvestorInfo(uint256)", "lineno": 212, "title": "Integer Overflow ", "type": "Warning"}, {"address": 4433, "code": "(address _address) public view returns(uint256) {\n        return addressToInvestorId[_address];\n    }\n\n    function getInvestorAddress(uint256 _id) public view returns(addre", "debug": "storage_keccac_0: 0x7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffee\ncalldata_SmartInvestments_4: 0x0\nstorage_7: 0x1\ncalldata_SmartInvestments_0: 0x41c9696400000000000000000000000000000000000000000000000000000000\ncalldatasize_SmartInvestments: 0x4\nstorage_75276140696391174450305814049576319106646922510300487059720162673006384432776 +\n7*calldata_SmartInvestments_4 +\n4: 0x0\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `getInvestorInfo(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/temp/Smart_Investments-0.sol", "function": "getInvestorInfo(uint256)", "lineno": 212, "title": "Integer Overflow ", "type": "Warning"}, {"address": 4549, "code": "     bool exist ", "debug": "The exception is triggered under the following conditions:\n\ncalldata_SmartInvestments_4: 0x0\nstorage_4: 0x0\ncalldata_SmartInvestments_0: 0x4b5a726d00000000000000000000000000000000000000000000000000000000\ncalldatasize_SmartInvestments: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/temp/Smart_Investments-0.sol", "function": "getProgramInfo(uint256)", "lineno": 147, "title": "Exception state", "type": "Informational"}, {"address": 4770, "code": "rawAmount();\n\n        require(amount > 0);", "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\nstorage_7: 0x0\ncalldata_SmartInvestments_0: 0x534844a200000000000000000000000000000000000000000000000000000000\ncalldatasize_SmartInvestments: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/temp/Smart_Investments-0.sol", "function": "withdrawAmount()", "lineno": 306, "title": "Exception state", "type": "Informational"}, {"address": 4882, "code": "     uint256 amount = withdrawAmount();\n\n        require(amount > 0);", "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x1000\nstorage_75276140696391174450305814049576319106646922510300487059720162673006384432776 +\n7*\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller +\n4: 0x842000000000000080007c000007c1f00000000020eaf39ab268003e2b21d17\nstorage_7: 0x1001\ncalldata_SmartInvestments_0: 0x3ccfd60b00000000000000000000000000000000000000000000000000000000\ncalldatasize_SmartInvestments: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `withdraw()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/temp/Smart_Investments-0.sol", "function": "withdraw()", "lineno": 306, "title": "Integer Overflow ", "type": "Warning"}, {"address": 4884, "code": "     uint256 amount = withdrawAmount();\n\n        require(amount > 0);", "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x4\nstorage_75276140696391174450305814049576319106646922510300487059720162673006384432776 +\n7*\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller +\n4: 0x7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffef\nstorage_7: 0x5\ncalldata_SmartInvestments_0: 0x3ccfd60b00000000000000000000000000000000000000000000000000000000\ncalldatasize_SmartInvestments: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `withdraw()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/temp/Smart_Investments-0.sol", "function": "withdraw()", "lineno": 306, "title": "Integer Overflow ", "type": "Warning"}, {"address": 4954, "code": " investors[addressToInvesto", "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x4000000000000000000000000000000000000000000000000000000000000000\nstorage_75276140696391174450305814049576319106646922510300487059720162673006384432776 +\n7*\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller +\n4: 0x7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffef\ntimestamp: 0x0\nstorage_75276140696391174450305814049576319106646922510300487059720162673006384432776 +\n7*\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller +\n0: 0x1\nstorage_7: 0x4000000000000000000000000000000000000000000000000000000000000001\ncallvalue: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldatasize_SmartInvestments: 0x3\n", "description": "A possible integer underflow exists in the function `fallback`.\nThe subtraction may result in a value < 0.", "filename": "/temp/Smart_Investments-0.sol", "function": "fallback", "lineno": 311, "title": "Integer Underflow", "type": "Warning"}, {"address": 5028, "code": "21;\n    InvestProgram[] public p", "debug": "The exception is triggered under the following conditions:\n\ncalldata_SmartInvestments_4: 0x0\nstorage_3: 0x0\ncalldata_SmartInvestments_0: 0x5e047d5800000000000000000000000000000000000000000000000000000000\ncalldatasize_SmartInvestments: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/temp/Smart_Investments-0.sol", "function": "_function_0x5e047d58", "lineno": 80, "title": "Exception state", "type": "Informational"}, {"address": 5702, "code": "ontract Sma", "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x4000000000000000000000000000000000000000000000000000000000000000\nstorage_75276140696391174450305814049576319106646922510300487059720162673006384432776 +\n7*\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller +\n4: 0x7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffef\nstorage_7: 0x4000000000000000000000000000000000000000000000000000000000000001\ncallvalue: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldatasize_SmartInvestments: 0x3\nstorage_4: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/temp/Smart_Investments-0.sol", "function": "fallback", "lineno": 161, "title": "Exception state", "type": "Informational"}, {"address": 6363, "code": ";\n\n/*\n\n  /$$$$$$  ", "debug": "storage_7: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncallvalue: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldatasize_SmartInvestments: 0x3\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\n", "description": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/temp/Smart_Investments-0.sol", "function": "fallback", "lineno": 1, "title": "Integer Overflow ", "type": "Warning"}, {"address": 8446, "code": "efferal);\n    event Deposit(address _addr, uint256 _value);\n    event ReferrerDistribute(uint256 _referrerId, uint256 _sum);\n    event Withdraw(address _addr, uint256 _sum);\n\n    struct Investor {\n        // public\n        uint256 lastWithdraw;\n        uint256 totalSum;                               // total deposits sum\n        uint256 totalWithdraw;\n        uint256 totalReferralIncome;\n        uint256[] referrersByLevel;                     // referrers ids\n        mapping (uint8 => uint256[]) referralsByLevel;  // all referrals ids\n\n        // private\n        uint256 witharawBuffer;\n    }\n\n    uint256 public globalDeposit;\n    uint256 public globalWithdraw;\n\n    Investor[] public investors;\n    mapping (address => uint256) addressToInvestorId;\n    mapping (uint256 => address) investorIdToAddress;\n\n    modifier onlyForExisting() {\n        require(addressToInvestorId[msg.sender] != 0);\n        _;\n    }\n\n    constructor() public payable {\n        globalDeposit = 0;\n        globalWithdraw = 0;\n        investors.push(Investor(0, 0, 0, 0, new uint256[](refLevelsCount), 0));\n    }\n\n    function() external payable {\n        if (msg.value > 0) {\n            deposit(0);\n        } else {\n            withdraw();\n        }\n    }\n\n    function getInvestorInfo(uint256 _id) public view returns(uint256, uint256, uint256, uint256, uint256[] memory, uint256[] memory) {\n        Investor memory investor = investors[_id];\n        return (investor.lastWithdraw, investor.totalSum, investor.totalWithdraw, investor.totalReferralIncome, investor.referrersByLevel, investors[_id].referralsByLevel[uint8(0)]);\n    }\n\n    function getInvestorId(address _address) public view returns(uint256) {\n        return addressToInvestorId[_address];\n    }\n\n    function getInvestorAddress(uint256 _id) public view returns(address) {\n        return investorIdToAddress[_id];\n    }\n\n    function investorsCount() public view returns(uint256) {\n        return investors.length;\n    }\n\n    /// @notice update referrersByLevel and referralsByLevel of new investor\n    /// @param _newInvestorId the ID of the new investor\n    /// @param _refId the ID of the investor who gets the affiliate fee\n    function _updateReferrals(uint256 _newInvestorId, uint256 _refId) private {\n        if (_newInvestorId == _refId) return;\n        investors[_newInvestorId].referrersByLevel[0] = _refId;\n\n        for (uint i = 1; i < refLevelsCount; i++) {\n            uint256 refId = investors[_refId].referrersByLevel[i - 1];\n            investors[_newInvestorId].referrersByLevel[i] = refId;\n            investors[refId].referralsByLevel[uint8(i)].push(_newInvestorId);\n        }\n\n        investors[_refId].referralsByLevel[0].push(_newInvestorId);\n        emit ReferralRegister(investorIdToAddress[_newInvestorId], investorIdToAddress[_refId]);\n    }\n\n    /// @notice distribute value of tx to referrers of investor\n    /// @param _investor the investor object who gets the affiliate fee\n    /// @param _sum value of ethereum for distribute to referrers of investor\n    function _distributeReferrers(Investor memory _investor, uint256 _sum) private {\n        uint256[] memory referrers = _investor.referrersByLevel;\n\n        for (uint i = 0; i < refLevelsCount; i++)  {\n            uint256 referrerId = referrers[i];\n\n            if (referrers[i] == 0) break;\n            // if (investors[referrerId].totalSum < minSumReferral) continue;\n\n            uint16[] memory percents = getRefPercents(investors[referrerId].totalSum);\n            uint256 value = _sum * percents[i] / 10000;\n            if (investorIdToAddress[referrerId] != 0x0) {\n                investorIdToAddress[referrerId].transfer(value);\n                investors[referrerId].totalReferralIncome = investors[referrerId].totalReferralIncome + value;\n                globalWithdraw = globalWithdraw + value;\n            }\n        }\n    }\n\n    function _distribute(Investor storage _investor, uint256 _sum) private {\n        _distributeReferrers(_investor, _sum);\n        developers.transfer(_sum * developersPercent / 100);\n        marketers.transfer(_sum * marketersPercent / 100);\n    }\n\n    function _registerIfNeeded(uint256 _refId) private returns(uint256) {\n        if (addressToInvestorId[msg.sender] != 0) return 0;\n\n        uint256 id = investors.push(Investor(now, 0, 0, 0, new uint256[](refLevelsCount), 0)) - 1;\n        addressToInvestorId[msg.sender] = id;\n        investorIdToAddress[id] = msg.sender;\n\n        if (_refId != 0)\n            _updateReferrals(id, _refId);\n\n        emit InvestorRegister(msg.sender, id);\n    }\n\n    function deposit(uint256 _refId) public payable returns(uint256) {\n        if (addressToInvestorId[msg.sender] == 0)\n            _registerIfNeeded(_refId);\n\n        Investor storage investor = investors[addressToInvestorId[msg.sender]];\n        uint256 amount = withdrawAmount();\n        investor.lastWithdraw = now;\n        investor.witharawBuffer = amount;\n        investor.totalSum = investor.totalSum + msg.value;\n\n        globalDeposit = globalDeposit + msg.value;\n\n        _distribute(investor, msg.value);\n\n        emit Deposit(msg.sender, msg.value);\n        return investor.totalSum;\n    }\n\n    function withdrawAmount() public view returns(uint256) {\n        Investor memory investor = investors[addressToInvestorId[msg.sender]];\n        return investor.totalSum * getProgramPercent(investor.totalSum) / 8760 * ((now - investor.lastWithdraw) / 3600) / 100 + investor.witharawBuffer;\n    }\n\n    function withdraw() public onlyForExisting returns(uint256) {\n        uint256 amount = withdrawAmount();\n\n        require(amount > 0);\n        require(amount < address(this).balance);\n\n        Investor storage investor = investors[addressToInvestorId[msg.sender]];\n        investor.totalWithdraw = investor.totalWithdraw + amount;\n        investor.lastWithdraw = now;\n        investor.witharawBuffer = 0;\n\n        globalWithdraw = globalWithdraw + amount;\n        msg.sender.transfer(amount);\n\n        emit Withdraw(msg.sender, amount);\n    }\n\n}", "debug": "storage_4 +\n75276140696391174450305814049576319106646922510300487059720162673006384432776 +\n7*storage_7: 0x57f25cd000000000000000000000000000000000000000000000000000000000\nkeccac_4_+\n75276140696391174450305814049576319106646922510300487059720162673006384432776_+\n7*storage_7: 0xa8795cd3fffffffffffffffffffffffffffffffffffffffffffffffffffffffe\ncallvalue: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldatasize_SmartInvestments: 0x3\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\n", "description": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/temp/Smart_Investments-0.sol", "function": "fallback", "lineno": 163, "title": "Integer Overflow ", "type": "Warning"}, {"address": 8481, "code": "efferal);\n    event Deposit(address _addr, uint256 _value);\n    event ReferrerDistribute(uint256 _referrerId, uint256 _sum);\n    event Withdraw(address _addr, uint256 _sum);\n\n    struct Investor {\n        // public\n        uint256 lastWithdraw;\n        uint256 totalSum;                               // total deposits sum\n        uint256 totalWithdraw;\n        uint256 totalReferralIncome;\n        uint256[] referrersByLevel;                     // referrers ids\n        mapping (uint8 => uint256[]) referralsByLevel;  // all referrals ids\n\n        // private\n        uint256 witharawBuffer;\n    }\n\n    uint256 public globalDeposit;\n    uint256 public globalWithdraw;\n\n    Investor[] public investors;\n    mapping (address => uint256) addressToInvestorId;\n    mapping (uint256 => address) investorIdToAddress;\n\n    modifier onlyForExisting() {\n        require(addressToInvestorId[msg.sender] != 0);\n        _;\n    }\n\n    constructor() public payable {\n        globalDeposit = 0;\n        globalWithdraw = 0;\n        investors.push(Investor(0, 0, 0, 0, new uint256[](refLevelsCount), 0));\n    }\n\n    function() external payable {\n        if (msg.value > 0) {\n            deposit(0);\n        } else {\n            withdraw();\n        }\n    }\n\n    function getInvestorInfo(uint256 _id) public view returns(uint256, uint256, uint256, uint256, uint256[] memory, uint256[] memory) {\n        Investor memory investor = investors[_id];\n        return (investor.lastWithdraw, investor.totalSum, investor.totalWithdraw, investor.totalReferralIncome, investor.referrersByLevel, investors[_id].referralsByLevel[uint8(0)]);\n    }\n\n    function getInvestorId(address _address) public view returns(uint256) {\n        return addressToInvestorId[_address];\n    }\n\n    function getInvestorAddress(uint256 _id) public view returns(address) {\n        return investorIdToAddress[_id];\n    }\n\n    function investorsCount() public view returns(uint256) {\n        return investors.length;\n    }\n\n    /// @notice update referrersByLevel and referralsByLevel of new investor\n    /// @param _newInvestorId the ID of the new investor\n    /// @param _refId the ID of the investor who gets the affiliate fee\n    function _updateReferrals(uint256 _newInvestorId, uint256 _refId) private {\n        if (_newInvestorId == _refId) return;\n        investors[_newInvestorId].referrersByLevel[0] = _refId;\n\n        for (uint i = 1; i < refLevelsCount; i++) {\n            uint256 refId = investors[_refId].referrersByLevel[i - 1];\n            investors[_newInvestorId].referrersByLevel[i] = refId;\n            investors[refId].referralsByLevel[uint8(i)].push(_newInvestorId);\n        }\n\n        investors[_refId].referralsByLevel[0].push(_newInvestorId);\n        emit ReferralRegister(investorIdToAddress[_newInvestorId], investorIdToAddress[_refId]);\n    }\n\n    /// @notice distribute value of tx to referrers of investor\n    /// @param _investor the investor object who gets the affiliate fee\n    /// @param _sum value of ethereum for distribute to referrers of investor\n    function _distributeReferrers(Investor memory _investor, uint256 _sum) private {\n        uint256[] memory referrers = _investor.referrersByLevel;\n\n        for (uint i = 0; i < refLevelsCount; i++)  {\n            uint256 referrerId = referrers[i];\n\n            if (referrers[i] == 0) break;\n            // if (investors[referrerId].totalSum < minSumReferral) continue;\n\n            uint16[] memory percents = getRefPercents(investors[referrerId].totalSum);\n            uint256 value = _sum * percents[i] / 10000;\n            if (investorIdToAddress[referrerId] != 0x0) {\n                investorIdToAddress[referrerId].transfer(value);\n                investors[referrerId].totalReferralIncome = investors[referrerId].totalReferralIncome + value;\n                globalWithdraw = globalWithdraw + value;\n            }\n        }\n    }\n\n    function _distribute(Investor storage _investor, uint256 _sum) private {\n        _distributeReferrers(_investor, _sum);\n        developers.transfer(_sum * developersPercent / 100);\n        marketers.transfer(_sum * marketersPercent / 100);\n    }\n\n    function _registerIfNeeded(uint256 _refId) private returns(uint256) {\n        if (addressToInvestorId[msg.sender] != 0) return 0;\n\n        uint256 id = investors.push(Investor(now, 0, 0, 0, new uint256[](refLevelsCount), 0)) - 1;\n        addressToInvestorId[msg.sender] = id;\n        investorIdToAddress[id] = msg.sender;\n\n        if (_refId != 0)\n            _updateReferrals(id, _refId);\n\n        emit InvestorRegister(msg.sender, id);\n    }\n\n    function deposit(uint256 _refId) public payable returns(uint256) {\n        if (addressToInvestorId[msg.sender] == 0)\n            _registerIfNeeded(_refId);\n\n        Investor storage investor = investors[addressToInvestorId[msg.sender]];\n        uint256 amount = withdrawAmount();\n        investor.lastWithdraw = now;\n        investor.witharawBuffer = amount;\n        investor.totalSum = investor.totalSum + msg.value;\n\n        globalDeposit = globalDeposit + msg.value;\n\n        _distribute(investor, msg.value);\n\n        emit Deposit(msg.sender, msg.value);\n        return investor.totalSum;\n    }\n\n    function withdrawAmount() public view returns(uint256) {\n        Investor memory investor = investors[addressToInvestorId[msg.sender]];\n        return investor.totalSum * getProgramPercent(investor.totalSum) / 8760 * ((now - investor.lastWithdraw) / 3600) / 100 + investor.witharawBuffer;\n    }\n\n    function withdraw() public onlyForExisting returns(uint256) {\n        uint256 amount = withdrawAmount();\n\n        require(amount > 0);\n        require(amount < address(this).balance);\n\n        Investor storage investor = investors[addressToInvestorId[msg.sender]];\n        investor.totalWithdraw = investor.totalWithdraw + amount;\n        investor.lastWithdraw = now;\n        investor.witharawBuffer = 0;\n\n        globalWithdraw = globalWithdraw + amount;\n        msg.sender.transfer(amount);\n\n        emit Withdraw(msg.sender, amount);\n    }\n\n}", "debug": "keccac_4_+\n75276140696391174450305814049576319106646922510300487059720162673006384432776_+\n7*storage_7: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncallvalue: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldatasize_SmartInvestments: 0x3\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\n", "description": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/temp/Smart_Investments-0.sol", "function": "fallback", "lineno": 163, "title": "Integer Overflow ", "type": "Warning"}], "success": true}
