{"error": null, "issues": [{"address": 1012, "code": ") || (user.round < roun", "debug": "storage_11: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffc390d903f0000\nstorage_4: 0x1fc00000000000\nstorage_13: 0x14000000000002000002101d7b930c24961198412b0f6a936c292253a164\ntimestamp: 0x1a5e0000000002a30002b83ede6a5c823bd83239ea44d3015b183ac141459200\nstorage_12: 0x0\nstorage_10: 0x0\nstorage_2: 0x0\ncaller: 0xffffffffffffffffffffffffffffffffffffffff\ncalldatasize_Eth5iov__2: 0x3\ncallvalue: 0x2386f26fc10000\n", "description": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/temp/5ETH-0.sol", "function": "fallback", "lineno": 112, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1195, "code": ";\n\ncontract Eth5io", "debug": "storage_8: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_1 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\nretval_1162: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_7: 0x1\nstorage_0 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_11: 0xffffffffffffffffffffffffffffffffffffffffffffffffffdc790d903effff\nstorage_13: 0x11018b3b21806400000890480844cc8e69c60faa245c8c0440025fcbcc2b\ntimestamp: 0x166b890e74aac3d6000b4a36f6e6b3adc0729da6cef002979a63214b2dabf980\nstorage_12: 0x0\nstorage_10: 0x0\nstorage_2: 0x0\ncaller: 0xffffffffffffffffffffffffffffffffffffffff\ncalldatasize_Eth5iov__2: 0x3\ncallvalue: 0x2386f26fc10000\n", "description": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/temp/5ETH-0.sol", "function": "fallback", "lineno": 1, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1702, "code": ".referrer);\n\n        // s", "debug": "storage_2 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000\nstorage_1 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\nstorage_7: 0x0\nstorage_0 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_4: 0x2386f26fc10000\nstorage_13: 0xa00e6b42e380a0004812091db79585c1523fcedb410000000802000de323\ntimestamp: 0xd3030268aeee12f05f03c704ad879fd65def1f360e3180000a8ea3124ef3fe00\nstorage_12: 0x0\nstorage_10: 0x0\nstorage_2: 0x0\ncaller: 0xffffffffffffffffffffffffffffffffffffffff\ncalldatasize_Eth5iov__2: 0x3\ncallvalue: 0x2386f26fc10000\n", "description": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/temp/5ETH-0.sol", "function": "fallback", "lineno": 136, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1721, "code": "eposit cash-back o", "debug": "storage_3 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_1 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\nstorage_7: 0x0\nstorage_0 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_11: 0xffffffffffffffffffffffffffffffffffffffffffffffffffdc790d903effff\nstorage_13: 0x11018b3b21806400000890480844cc8e69c60faa245c8c0440025fcbcc2b\ntimestamp: 0x166b890e74aac3d6000b4a36f6e6b3adc0729da6cef002979a63214b2dabf980\nstorage_12: 0x0\nstorage_10: 0x0\nstorage_2: 0x0\ncaller: 0xffffffffffffffffffffffffffffffffffffffff\ncalldatasize_Eth5iov__2: 0x3\ncallvalue: 0x2386f26fc10000\n", "description": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/temp/5ETH-0.sol", "function": "fallback", "lineno": 138, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1737, "code": "   if ((user.deposit", "debug": "storage_14: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000\nstorage_1 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\nstorage_106974352148254247443002424860746200082415828814647159066518186632126350659435: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nretval_1162: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_7: 0x1\nstorage_0 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_4: 0x2386f26fc10000\nstorage_13: 0xa00e6b42e380a0004812091db79585c1523fcedb410000000802000de323\ntimestamp: 0xd3030268aeee12f05f03c704ad879fd65def1f360e3180000a8ea3124ef3fe00\nstorage_12: 0x0\nstorage_10: 0x0\nstorage_2: 0x0\ncaller: 0xffffffffffffffffffffffffffffffffffffffff\ncalldatasize_Eth5iov__2: 0x3\nstorage_106974352148254247443002424860746200082415828814647159066518186632126350659436: 0x1\ncallvalue: 0x2386f26fc10000\n", "description": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/temp/5ETH-0.sol", "function": "fallback", "lineno": 139, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1995, "code": "            if (msg.sender", "debug": "The exception is triggered under the following conditions:\n\nstorage_1 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\nstorage_6 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xfc00\nstorage_3 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd\nstorage_7: 0x0\nstorage_0 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_4: 0x2386f26fc10000\nstorage_13: 0xa554a0094c6d81d6110004c1efeac04000000000940000001214000de35d\ntimestamp: 0xd9f710fc42425eabb7698645adcbfc7460000000c31e000017d55e124f407a00\nstorage_12: 0x0\nstorage_10: 0x0\nstorage_2: 0x0\ncaller: 0xffffffffffffffffffffffffffffffffffffffff\ncalldatasize_Eth5iov__2: 0x3\ncallvalue: 0x2386f26fc10000\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/temp/5ETH-0.sol", "function": "fallback", "lineno": 141, "title": "Exception state", "type": "Informational"}, {"address": 3154, "code": "   admin.transfer(msg.v", "debug": "The exception is triggered under the following conditions:\n\ncallvalue: 0x80000000000000000000000000000000000000000000000000b1a2bc3ec50000\nstorage_1 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\nstorage_6 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xfc00\nstorage_3 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_7: 0x0\nstorage_0 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_4: 0x80000000000000000000000000000000000000000000000000b1a2bc3ec50000\nstorage_13: 0x448f04d6108008805394048202b61846b0d63142f23fe131c0c3a1ad84b4\ntimestamp: 0x5a628ce036c0cb352e2fa3f166931101322261f1c25f376317a1e9a64274ff00\nstorage_12: 0x0\nstorage_10: 0x0\nstorage_2: 0x0\ncaller: 0xffffffffffffffffffffffffffffffffffffffff\ncalldatasize_Eth5iov__2: 0x3\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/temp/5ETH-0.sol", "function": "fallback", "lineno": 170, "title": "Exception state", "type": "Informational"}, {"address": 4123, "code": "stor) public investors;\n    bool public resTr", "debug": "The exception is triggered under the following conditions:\n\nstorage_6 +\nkeccac_1461501637330902918203684832716283019655932542975_&\ncalldata_Eth5iov__2_4: 0xfc00\ncalldata_Eth5iov__2_0: 0x6f7bc9be00000000000000000000000000000000000000000000000000000000\ncalldatasize_Eth5iov__2: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/temp/5ETH-0.sol", "function": "_function_0x6f7bc9be", "lineno": 24, "title": "Exception state", "type": "Informational"}, {"address": 7310, "debug": "timestamp: 0x0\nstorage_12: 0x1\nstorage_10: 0x0\nstorage_2: 0x0\ncaller: 0xffffffffffffffffffffffffffffffffffffffff\ncalldatasize_Eth5iov__2: 0x3\ncallvalue: 0x2386f26fc10000\n", "description": "A possible integer underflow exists in the function `fallback`.\nThe subtraction may result in a value < 0.", "filename": "/temp/5ETH-0.sol", "function": "fallback", "lineno": 280, "title": "Integer Underflow", "type": "Warning"}, {"address": 8094, "code": "mload(add(", "debug": "storage_7: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nretval_7969: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_8: 0x0\nstorage_10: 0xff00\nstorage_2: 0x0\ncaller: 0x0\ncalldata_Eth5iov__2_0: 0x4036585200000000000000000000000000000000000000000000000000000000\ncalldatasize_Eth5iov__2: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `roundStart()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/temp/5ETH-0.sol", "function": "roundStart()", "lineno": 277, "title": "Integer Overflow ", "type": "Warning"}, {"address": 10110, "code": "ntract Eth5iov__2 {\n    address public advertising;\n    address public admin;\n    address private owner;\n\n    uint constant public statusFreeEth = 10 finney;\n    uint constant public statusBasic = 50 finney;\n    uint constant public statusVIP = 5 ether;\n    uint constant public statusSVIP = 25 ether;\n\n    uint constant public dailyPercent = 188;\n    uint constant public dailyFreeMembers = 200;\n    uint constant public denominator = 10000;\n\n    uint public numerator = 100;\n    uint public dayDepositLimit = 555 ether;\n    uint public freeFund;\n    uint public freeFundUses;\n\n    uint public round = 0;\n    address[] public addresses;\n    mapping(address => Investor) public investors;\n    bool public resTrigger = true;\n    uint constant period = 86400;\n\n    uint dayDeposit;\n    uint roundStartDate;\n    uint daysFromRoundStart;\n    uint deposit;\n    uint creationDate; \n    enum Status { TEST, BASIC, VIP, SVIP }\n\n    struct Investor {\n        uint id;\n        uint round;\n        uint deposit;\n        uint deposits;\n        uint investDate;\n        uint lastPaymentDate;\n        address referrer;\n        Status status;\n        bool refPayed;\n    }\n\n    event TestDrive(address addr, uint date);\n    event Invest(address addr, uint amount, address referrer);\n    event WelcomeVIPinvestor(address addr);\n    event WelcomeSuperVIPinvestor(address addr);\n    event Payout(address addr, uint amount, string eventType, address from);\n    event roundStartStarted(uint round, uint date);\n\n    modifier onlyOwner {\n        require(msg.sender == owner, \"Sender not authorised.\");\n        _;\n    }\n\n    constructor() public {\n        owner = msg.sender;\n        admin = 0xb34a732Eb42A02ca5b72e79594fFfC10F55C33bd; \n        advertising = 0x63EA308eF23F3E098f8C1CE2D24A7b6141C55497; \n        freeFund = 2808800000000000000;\n        creationDate = now;\n        roundStart();\n    }\n\n    function addInvestorsFrom_v1(address[] addr, uint[] amount, bool[] isSuper) onlyOwner public {\n\n        // transfer VIP/SVIP status\n        for (uint i = 0; i < addr.length; i++) {\n            uint id = addresses.length;\n            if (investors[addr[i]].deposit==0) {\n                deposit += amount[i];\n            }\n            addresses.push(addr[i]);\n            Status s = isSuper[i] ? Status.SVIP : Status.VIP;\n            investors[addr[i]] = Investor(id, round, amount[i], 1, now, now, 0, s, false);\n        }\n    }\n\n    function waiver() private {\n        delete owner; //\n    }\n\n    function() payable public {\n\n        if (msg.sender == owner) {  \n            return;\n        }\n\n        require(resTrigger == false, \"Contract is paused. Please wait for the next round.\");\n\n        if (0 == msg.value) {\n            payout();\n            return;\n        }\n\n        require(msg.value >= statusBasic || msg.value == statusFreeEth, \"Too small amount, minimum 0.05 ether\");\n\n        if (daysFromRoundStart < daysFrom(roundStartDate)) {\n            dayDeposit = 0;\n            freeFundUses = 0;\n            daysFromRoundStart = daysFrom(roundStartDate);\n        }\n\n        require(msg.value + dayDeposit <= dayDepositLimit, \"Daily deposit limit reached! See you soon\");\n        dayDeposit += msg.value;\n\n        Investor storage user = investors[msg.sender];\n\n        if ((user.id == 0) || (user.round < round)) {\n\n            msg.sender.transfer(0 wei); \n\n            addresses.push(msg.sender);\n            user.id = addresses.length;\n            user.deposit = 0;\n            user.deposits = 0;\n            user.lastPaymentDate = now;\n            user.investDate = now;\n            user.round = round;\n\n            // referrer\n            address referrer = bytesToAddress(msg.data);\n            if (investors[referrer].id > 0 && referrer != msg.sender\n               && investors[referrer].round == round) {\n                user.referrer = referrer;\n            }\n        }\n\n        // save investor\n        user.deposit += msg.value;\n        user.deposits += 1;\n        deposit += msg.value;\n        emit Invest(msg.sender, msg.value, user.referrer);\n\n        // sequential deposit cash-back on 30+\n        if ((user.deposits > 1) && (user.status != Status.TEST) && (daysFrom(user.investDate) > 30)) {\n            uint cashBack = msg.value / denominator * numerator * 10; \n            if (msg.sender.send(cashBack)) {\n                emit Payout(user.referrer, cashBack, \"Cash-back after 30 days\", msg.sender);\n            }\n        }\n\n        Status newStatus;\n        if (msg.value >= statusSVIP) {\n            emit WelcomeSuperVIPinvestor(msg.sender);\n            newStatus = Status.SVIP;\n        } else if (msg.value >= statusVIP) {\n            emit WelcomeVIPinvestor(msg.sender);\n            newStatus = Status.VIP;\n        } else if (msg.value >= statusBasic) {\n            newStatus = Status.BASIC;\n        } else if (msg.value == statusFreeEth) {\n            if (user.deposits == 1) { \n                require(dailyFreeMembers > freeFundUses, \"Max free fund uses today, See you soon!\");\n                freeFundUses += 1;\n                msg.sender.transfer(msg.value);\n                emit Payout(msg.sender,statusFreeEth,\"Free eth cash-back\",0);\n            }\n            newStatus = Status.TEST;\n        }\n        if (newStatus > user.status) {\n            user.status = newStatus;\n        }\n\n        // proccess fees and referrers\n        if (newStatus != Status.TEST) {\n            admin.transfer(msg.value / denominator * numerator * 5);  // administration fee\n            advertising.transfer(msg.value / denominator * numerator * 10); // advertising fee\n            freeFund += msg.value / denominator * numerator;          // test-drive fee fund\n        }\n        user.lastPaymentDate = now;\n    }\n\n    function payout() private {\n\n        Investor storage user = investors[msg.sender];\n\n        require(user.id > 0, \"Investor not found.\");\n        require(user.round == round, \"Your round is over.\");\n        require(daysFrom(user.lastPaymentDate) >= 1, \"Wait at least 24 hours.\");\n\n        uint amount = getInvestorDividendsAmount(msg.sender);\n\n        if (address(this).balance < amount) {\n            resTrigger = true;\n            return;\n        }\n\n        if ((user.referrer > 0x0) && !user.refPayed && (user.status != Status.TEST)) {\n            user.refPayed = true;\n            Investor storage ref = investors[user.referrer];\n            if (ref.id > 0 && ref.round == round) {\n\n                uint bonusAmount = user.deposit / denominator * numerator * 5;\n                uint refBonusAmount = user.deposit / denominator * numerator * 5 * uint(ref.status);\n\n                if (user.referrer.send(refBonusAmount)) {\n                    emit Payout(user.referrer, refBonusAmount, \"Cash back refferal\", msg.sender);\n                }\n\n                if (user.deposits == 1) { // cashback only for the first deposit\n                    if (msg.sender.send(bonusAmount)) {\n                        emit Payout(msg.sender, bonusAmount, \"ref-cash-back\", 0);\n                    }\n                }\n\n            }\n        }\n\n        if (user.status == Status.TEST) {\n            uint daysFromInvest = daysFrom(user.investDate);\n            require(daysFromInvest <= 55, \"Your test drive is over!\");\n\n            if (sendFromfreeFund(amount, msg.sender)) {\n                emit Payout(msg.sender, statusFreeEth, \"test-drive-self-payout\", 0);\n            }\n        } else {\n            msg.sender.transfer(amount);\n            emit Payout(msg.sender, amount, \"self-payout\", 0);\n        }\n        user.lastPaymentDate = now;\n    }\n\n    function sendFromfreeFund(uint amount, address user) private returns (bool) {\n        require(freeFund > amount, \"Test-drive fund empty! See you later.\");\n        if (user.send(amount)) {\n            freeFund -= amount;\n            return true;\n        }\n        return false;\n    }\n\n    // views\n    function getInvestorCount() public view returns (uint) {\n        return addresses.length - 1;\n    }\n\n    function getInvestorDividendsAmount(address addr) public view returns (uint) {\n        return investors[addr].deposit / denominator / 100 * dailyPercent  //NOTE: numerator!\n                * daysFrom(investors[addr].lastPaymentDate) * numerator;\n    }\n\n    // configuration\n    function setNumerator(uint newNumerator) onlyOwner public {\n        numerator = newNumerator;\n    }\n\n    function setDayDepositLimit(uint newDayDepositLimit) onlyOwner public {\n        dayDepositLimit = newDayDepositLimit;\n    }\n\n    function roundStart() onlyOwner public {\n        if (resTrigger == true) {\n            delete addresses;\n            addresses.length = 1;\n            deposit = 0;\n            dayDeposit = 0;\n            roundStartDate = now;\n            daysFromRoundStart = 0;\n            owner.transfer(address(this).balance);\n            emit roundStartStarted(round, now);\n            resTrigger = false;\n            round += 1;\n        }\n    }\n\n    // util\n    function daysFrom(uint date) private view returns (uint) {\n        return (now - date) / period;\n    }\n\n    function bytesToAddress(bytes bys) private pure returns (address addr) {\n        assembly {\n            addr := mload(add(bys, 20))\n        }\n    }\n}", "debug": "storage_8: 0x9d50368088b20a07c07fb81f800800000000e78e2dfa35e3be07e039bbfccbdd\nstorage_10: 0xff00\nstorage_2: 0x0\ncaller: 0x0\ncalldata_Eth5iov__2_0: 0x4036585200000000000000000000000000000000000000000000000000000000\ncalldatasize_Eth5iov__2: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `roundStart()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/temp/5ETH-0.sol", "function": "roundStart()", "lineno": 3, "title": "Integer Overflow ", "type": "Warning"}], "success": true}
