{"error": null, "issues": [{"address": 769, "code": "Mantissas[i]);\n        }\n\n        return result;\n    }\n}", "debug": "calldata_PriceOracle_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_PriceOracle_0: 0x4352fa9f00000000000000000000000000000000000000000000000000000000\ncalldatasize_PriceOracle: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `_function_0x4352fa9f`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/temp/Compound-11.sol", "function": "_function_0x4352fa9f", "lineno": 926, "title": "Integer Overflow ", "type": "Warning"}, {"address": 936, "code": "Mantissas[i]);\n        }\n\n        return result;\n    }\n}", "debug": "mem_160 +\n32*calldata_PriceOracle_4 + calldata_PriceOracle_4 +\n32 +\n32*calldata_PriceOracle_4 + calldata_PriceOracle_32 + 4: 0x8421003f084001f4210815cf88407c00000000000000037c1d000e8d178001f\nstorage_5: 0x0\ncaller: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_PriceOracle_0: 0x4352fa9f00000000000000000000000000000000000000000000000000000000\ncalldatasize_PriceOracle: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `_function_0x4352fa9f`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/temp/Compound-11.sol", "function": "_function_0x4352fa9f", "lineno": 926, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2545, "debug": "The exception is triggered under the following conditions:\n\nstorage_5: 0x0\ncaller: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_PriceOracle_0: 0x4352fa9f00000000000000000000000000000000000000000000000000000000\ncalldatasize_PriceOracle: 0x4\nmem_160 +\n32*calldata_PriceOracle_4 + calldata_PriceOracle_4 +\n32 +\n32*calldata_PriceOracle_4 + calldata_PriceOracle_32 + 4: 0x0\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/temp/Compound-11.sol", "function": "_function_0x4352fa9f", "lineno": 931, "title": "Exception state", "type": "Informational"}, {"address": 2667, "debug": "The exception is triggered under the following conditions:\n\ncalldata_PriceOracle_4 + calldata_PriceOracle_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nmem_128 +\n32 +\n32*calldata_PriceOracle_4 + calldata_PriceOracle_4: 0x0\nstorage_5: 0x0\ncaller: 0x0\ncalldata_PriceOracle_0: 0x4352fa9f00000000000000000000000000000000000000000000000000000000\ncalldatasize_PriceOracle: 0x4\nmem_160 +\n32*calldata_PriceOracle_4 + calldata_PriceOracle_4 +\n32 +\n32*calldata_PriceOracle_4 + calldata_PriceOracle_32 + 4: 0x0\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/temp/Compound-11.sol", "function": "_function_0x4352fa9f", "lineno": 931, "title": "Exception state", "type": "Informational"}, {"address": 3365, "code": "set price (scaled by ", "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/temp/Compound-11.sol", "function": "assetPrices(address)", "lineno": 708, "title": "Message call to external contract", "type": "Warning"}], "success": true}
