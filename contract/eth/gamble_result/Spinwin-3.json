{"error": null, "issues": [{"address": 1097, "code": "lockSecurityCount');\n\t\tif (blockNumberDifference < SettingInterface(se", "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/temp/Spinwin-3.sol", "function": "generateRandomNumber(address,uint256,uint256,uint256)", "lineno": 153, "title": "Message call to external contract", "type": "Warning"}, {"address": 1097, "code": "lockSecurityCount');\n\t\tif (blockNumberDifference < SettingInterface(se", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 1509\nCall at address: 1301\n", "filename": "/temp/Spinwin-3.sol", "function": "generateRandomNumber(address,uint256,uint256,uint256)", "lineno": 153, "title": "Multiple Calls", "type": "Information"}, {"address": 1301, "code": "ckSecurityCount').sub(blockSecurityCount)) {\n\t\t\tuint256 targetBlock", "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/temp/Spinwin-3.sol", "function": "generateRandomNumber(address,uint256,uint256,uint256)", "lineno": 154, "title": "Message call to external contract", "type": "Warning"}, {"address": 1301, "code": "ckSecurityCount').sub(blockSecurityCount)) {\n\t\t\tuint256 targetBlock", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 1509\n", "filename": "/temp/Spinwin-3.sol", "function": "generateRandomNumber(address,uint256,uint256,uint256)", "lineno": 154, "title": "Multiple Calls", "type": "Information"}, {"address": 1509, "code": "SecurityCount);\n\t\t} else {\n\t\t\ttargetBlockNumber = betBlockNumber.add(m", "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/temp/Spinwin-3.sol", "function": "generateRandomNumber(address,uint256,uint256,uint256)", "lineno": 155, "title": "Message call to external contract", "type": "Warning"}, {"address": 2124, "code": "kenRatio(weiLost);\n\n\t\t/*\n\t\t * Let base = betValue * ratio\n\t\t * We ", "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/temp/Spinwin-3.sol", "function": "calculateTokenReward(address,uint256,uint256,uint256)", "lineno": 115, "title": "Message call to external contract", "type": "Warning"}, {"address": 2401, "code": "/**\n\t * @dev Calculates t", "debug": "calldata_SpinWinLibrary_32 + 4: 0x2000000000000000000000000071\ncalldata_SpinWinLibrary_0: 0x378f447800000000000000000000000000000000000000000000000000000000\ncalldatasize_SpinWinLibrary: 0x4\n", "description": "A possible integer underflow exists in the function `calculateWinningReward(uint256,uint256,uint256)`.\nThe subtraction may result in a value < 0.", "filename": "/temp/Spinwin-3.sol", "function": "calculateWinningReward(uint256,uint256,uint256)", "lineno": 105, "title": "Integer Underflow", "type": "Warning"}, {"address": 2628, "code": "lue = (tokenToWeiExchangeRateHonor.mul(tokenAmount)).div(CURRENCY_DIVISOR).d", "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/temp/Spinwin-3.sol", "function": "calculateExchangeTokenValue(address,uint256)", "lineno": 278, "title": "Message call to external contract", "type": "Warning"}, {"address": 2628, "code": "lue = (tokenToWeiExchangeRateHonor.mul(tokenAmount)).div(CURRENCY_DIVISOR).d", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 2908\nCall at address: 2908\n", "filename": "/temp/Spinwin-3.sol", "function": "calculateExchangeTokenValue(address,uint256)", "lineno": 278, "title": "Multiple Calls", "type": "Information"}, {"address": 2908, "code": " tokenAmount;\n\t\t} else {\n\t\t\tsendWei = contractExchangeBalance;\n\t\t\ttokenRe", "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/temp/Spinwin-3.sol", "function": "calculateExchangeTokenValue(address,uint256)", "lineno": 283, "title": "Message call to external contract", "type": "Warning"}, {"address": 3531, "code": "/*\n\t\t * Calculate 1 SPIN to Wei Rate\n\t\t * Inverse of weiToSpinRate", "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/temp/Spinwin-3.sol", "function": "calculateClearBetBlocksReward(address,address)", "lineno": 178, "title": "Message call to external contract", "type": "Warning"}, {"address": 5154, "code": "oll;\n\t\t(currentLotteryTarget, currentLotteryBankroll) = LotteryInterface(", "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/temp/Spinwin-3.sol", "function": "calculateLotteryContribution(address,address,uint256)", "lineno": 256, "title": "Message call to external contract", "type": "Warning"}, {"address": 5770, "code": " a - b;\n\t}\n\n\tf", "debug": "The exception is triggered under the following conditions:\n\ncalldata_SpinWinLibrary_32 + 4: 0x0\ncalldata_SpinWinLibrary_0: 0x378f447800000000000000000000000000000000000000000000000000000000\ncalldatasize_SpinWinLibrary: 0x4\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/temp/Spinwin-3.sol", "function": "calculateWinningReward(uint256,uint256,uint256)", "lineno": 26, "title": "Exception state", "type": "Informational"}, {"address": 5788, "code": "turn ", "debug": "retval_2124: 0xdffd0c24980646fad7d6bdf545e43adc5d95dd5bdbb7eaf3d06de7b70cfeeb5a\ncalldata_SpinWinLibrary_32 + 4: 0xe0580faa4810c9e1adcd4beaeb8e15acb4ca2288444e14162f1bdf8e11012232\nreturndatasize: 0x20\nextcodesize: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_SpinWinLibrary_0: 0x23a565c500000000000000000000000000000000000000000000000000000000\ncalldatasize_SpinWinLibrary: 0x4\n", "description": "A possible integer overflow exists in the function `calculateTokenReward(address,uint256,uint256,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/temp/Spinwin-3.sol", "function": "calculateTokenReward(address,uint256,uint256,uint256)", "lineno": 32, "title": "Integer Overflow ", "type": "Warning"}, {"address": 5801, "code": "\n}\n\n/**\n * @ti", "debug": "The exception is triggered under the following conditions:\n\nretval_2124: 0xb92233887f94ce68140cc2c02800a60651697b667ac1d167f4e414c3e6d04809\ncalldata_SpinWinLibrary_32 + 4: 0xa2b3765bfb0dd68d1871840d5d01f3d9cad68382fbd3cf4be26fad5e91369592\nreturndatasize: 0x20\nextcodesize: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_SpinWinLibrary_0: 0x23a565c500000000000000000000000000000000000000000000000000000000\ncalldatasize_SpinWinLibrary: 0x4\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/temp/Spinwin-3.sol", "function": "calculateTokenReward(address,uint256,uint256,uint256)", "lineno": 33, "title": "Exception state", "type": "Informational"}, {"address": 5825, "code": "(a ==", "debug": "The exception is triggered under the following conditions:\n\ncalldata_SpinWinLibrary_0: 0x378f447800000000000000000000000000000000000000000000000000000000\ncalldatasize_SpinWinLibrary: 0x4\ncalldata_SpinWinLibrary_32 + 4: 0x1\ncalldata_SpinWinLibrary_4: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/temp/Spinwin-3.sol", "function": "calculateWinningReward(uint256,uint256,uint256)", "lineno": 20, "title": "Exception state", "type": "Informational"}, {"address": 5886, "code": " == b);\n\t\treturn c", "debug": "The exception is triggered under the following conditions:\n\ncalldata_SpinWinLibrary_32 + 4: 0x77bfef3e49842080040fffa1f\nretval_2628: 0x8400000000002000000000000000000000000000000000000000\nreturndatasize: 0x20\nextcodesize: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_SpinWinLibrary_0: 0x45a3b9c100000000000000000000000000000000000000000000000000000000\ncalldatasize_SpinWinLibrary: 0x4\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/temp/Spinwin-3.sol", "function": "calculateExchangeTokenValue(address,uint256)", "lineno": 13, "title": "Exception state", "type": "Informational"}], "success": true}
