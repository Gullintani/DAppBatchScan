{"error": null, "issues": [{"address": 580, "code": ";\n\ncontract Slot {", "debug": "callvalue: 0x100000000000000000000000000000000000008cf800000000\nstorage_14: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncaller: 0x0\nstorage_3: 0xffffffffffffffffffffffffffffffffffffffff00\ncalldatasize_Slot: 0x3\n", "description": "A possible integer overflow exists in the function `fallback`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/temp/DSlot-0.sol", "function": "fallback", "lineno": 1, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2172, "code": "ic rollHead;\n    address public rollTai", "debug": "The exception is triggered under the following conditions:\n\ncalldata_Slot_32 + 4: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\ncalldata_Slot_4: 0x0\ncalldata_Slot_0: 0x1db870a800000000000000000000000000000000000000000000000000000000\ncalldatasize_Slot: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/temp/DSlot-0.sol", "function": "_function_0x1db870a8", "lineno": 59, "title": "Exception state", "type": "Informational"}, {"address": 3062, "code": "ddr, rollReq);\n\n     ", "debug": "The exception is triggered under the following conditions:\n\nstorage_12: 0xffffffffffffffffffffffffffffffffffffffff00\ncalldata_Slot_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_Slot_0: 0x5f72f45000000000000000000000000000000000000000000000000000000000\ncalldatasize_Slot: 0x4\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\nUDiv(storage_12,_256): 0x0\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/temp/DSlot-0.sol", "function": "check(uint256)", "lineno": 152, "title": "Exception state", "type": "Informational"}, {"address": 4134, "code": "        owner = msg.sender;\n  ", "debug": "The exception is triggered under the following conditions:\n\ncalldata_Slot_4: 0x0\nstorage_14: 0x0\ncalldata_Slot_0: 0xc3b49d0400000000000000000000000000000000000000000000000000000000\ncalldatasize_Slot: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/temp/DSlot-0.sol", "function": "_function_0xc3b49d04", "lineno": 65, "title": "Exception state", "type": "Informational"}, {"address": 4403, "code": "        rolls[msg", "debug": "The exception is triggered under the following conditions:\n\ncalldata_Slot_32 + 4: 0x0\ncalldata_Slot_0: 0xcd230dcb00000000000000000000000000000000000000000000000000000000\ncalldatasize_Slot: 0x4\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/temp/DSlot-0.sol", "function": "roll(uint8,uint8)", "lineno": 122, "title": "Exception state", "type": "Informational"}, {"address": 8556, "code": "es, rollReq.blocknum, pendingBetAmount +", "debug": "storage_2 +\nkeccac_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\nUDiv(storage_12,_256): 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84\nblock_number: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff85\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\nUDiv(storage_12,_256): 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_12: 0xffffffffffffffffffffffffffffffffffffffff00\ncalldata_Slot_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_Slot_0: 0x5f72f45000000000000000000000000000000000000000000000000000000000\ncalldatasize_Slot: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `check(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/temp/DSlot-0.sol", "function": "check(uint256)", "lineno": 171, "title": "Integer Overflow ", "type": "Warning"}, {"address": 8695, "code": "lance > totalWin + 2300) {\n    ", "debug": "storage_2 +\nkeccac_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\nUDiv(storage_12,_256): 0x7f5479b7d1b270dbff0dffbfffc7f1fda0000000000000000000000000000002\nstorage_0 +\nkeccac_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\nUDiv(storage_12,_256): 0xcbf7fffdef7bb0040118c105555555555555555555555555555555555555567b\nblock_number: 0x7f9081f0634894dbfa0cefbfffc7f1fda0000000000000000000000000000083\nstorage_1 +\nkeccac_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\nUDiv(storage_12,_256): 0x300\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\nUDiv(storage_12,_256): 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_12: 0xffffffffffffffffffffffffffffffffffffffff00\ncalldata_Slot_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_Slot_0: 0x5f72f45000000000000000000000000000000000000000000000000000000000\ncalldatasize_Slot: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `check(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/temp/DSlot-0.sol", "function": "check(uint256)", "lineno": 180, "title": "Integer Overflow ", "type": "Warning"}, {"address": 8696, "code": "lance > totalWin + 2300) {\n           ", "debug": "storage_2 +\nkeccac_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\nUDiv(storage_12,_256): 0xafffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff20\nstorage_0 +\nkeccac_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\nUDiv(storage_12,_256): 0xdb6db6db6db6db6db6db6db6db6db6db6db6db6db6db6db6db6db6db6db6db7c\nblock_number: 0xb4b600000004000000000007fffffffffffffffffffffffffffffffffffffffb\nstorage_1 +\nkeccac_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\nUDiv(storage_12,_256): 0x3f00\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\nUDiv(storage_12,_256): 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_12: 0xffffffffffffffffffffffffffffffffffffffff00\ncalldata_Slot_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_Slot_0: 0x5f72f45000000000000000000000000000000000000000000000000000000000\ncalldatasize_Slot: 0x4\ncallvalue: 0x0\n", "description": "A possible integer underflow exists in the function `check(uint256)`.\nThe subtraction may result in a value < 0.", "filename": "/temp/DSlot-0.sol", "function": "check(uint256)", "lineno": 180, "title": "Integer Underflow", "type": "Warning"}, {"address": 8726, "code": "else {\n                partners", "debug": "storage_2 +\nkeccac_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\nUDiv(storage_12,_256): 0x7f5479b7d1b270dbff0dffbfffc7f1fda0000000000000000000000000000002\nstorage_0 +\nkeccac_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\nUDiv(storage_12,_256): 0xcbf7fffdef7bb0040118c105555555555555555555555555555555555555567b\nblock_number: 0x7f9081f0634894dbfa0cefbfffc7f1fda0000000000000000000000000000083\nstorage_1 +\nkeccac_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\nUDiv(storage_12,_256): 0x300\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\nUDiv(storage_12,_256): 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_12: 0xffffffffffffffffffffffffffffffffffffffff00\ncalldata_Slot_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_Slot_0: 0x5f72f45000000000000000000000000000000000000000000000000000000000\ncalldatasize_Slot: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `check(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/temp/DSlot-0.sol", "function": "check(uint256)", "lineno": 182, "title": "Integer Overflow ", "type": "Warning"}, {"address": 8734, "code": "Win);\n            } else {\n                partners", "debug": "storage_2 +\nkeccac_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\nUDiv(storage_12,_256): 0x0\nstorage_0 +\nkeccac_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\nUDiv(storage_12,_256): 0x7ac29eb0a7ac29eb6a4ada92b6a4ada92b6a4adb5256d495b6a4ada92bcbfa03\nblock_number: 0xfb\nstorage_6: 0x40000000000000000000000080000000010000000041400000\nstorage_1 +\nkeccac_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\nUDiv(storage_12,_256): 0xab00\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\nUDiv(storage_12,_256): 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_12: 0xffffffffffffffffffffffffffffffffffffffff00\ncalldata_Slot_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_Slot_0: 0x5f72f45000000000000000000000000000000000000000000000000000000000\ncalldatasize_Slot: 0x4\ncallvalue: 0x0\n", "description": "A possible integer underflow exists in the function `check(uint256)`.\nThe subtraction may result in a value < 0.", "filename": "/temp/DSlot-0.sol", "function": "check(uint256)", "lineno": 181, "title": "Integer Underflow", "type": "Warning"}, {"address": 8755, "code": "  }\n\n    functi", "debug": "storage_2 +\nkeccac_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\nUDiv(storage_12,_256): 0x5c9322877fdffddd337f7bf573e227b7bfb768a609b42296d46fffffffffff2e\nstorage_0 +\nkeccac_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\nUDiv(storage_12,_256): 0x8888888888888888888888888888888888888888888888888888888888888896\nblock_number: 0xad46858067923fdba481b70ac9f210e5bfbe0c8d00b05f15d81fffffffffff80\nstorage_1 +\nkeccac_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\nUDiv(storage_12,_256): 0xa500\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\nUDiv(storage_12,_256): 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_12: 0xffffffffffffffffffffffffffffffffffffffff00\ncalldata_Slot_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_Slot_0: 0x5f72f45000000000000000000000000000000000000000000000000000000000\ncalldatasize_Slot: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `check(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/temp/DSlot-0.sol", "function": "check(uint256)", "lineno": 186, "title": "Integer Overflow ", "type": "Warning"}, {"address": 8833, "code": "r, uint bet, uint8 line", "debug": "", "description": "In the function `check(uint256)` the following predictable state variables are used to determine Ether recipient:\n- block.number\n- block.number\n", "filename": "/temp/DSlot-0.sol", "function": "check(uint256)", "lineno": 188, "title": "Dependence on predictable environment variable", "type": "Warning"}, {"address": 8833, "code": "r, uint bet, uint8 line", "debug": "", "description": "A possible transaction order independence vulnerability exists in function check(uint256). The value or direction of the call statement is determined from a tainted storage location", "filename": "/temp/DSlot-0.sol", "function": "check(uint256)", "lineno": 188, "title": "Transaction order dependence", "type": "Warning"}, {"address": 8931, "code": ";\n\ncontract Slot {", "debug": "storage_2 +\nkeccac_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\nUDiv(storage_12,_256): 0x51b5ecfe00000000000000000000000000000000000000000000000000000005\nstorage_0 +\nkeccac_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\nUDiv(storage_12,_256): 0x3f00f80ee191deacb8958fc3ee7a210e40d434780af134dd662b86168ec1e21d\nstorage_14: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nblock_number: 0xb0984ce104020040000000000000000000000000000000000000000000000005\nbalance_at_1461501637330902918203684832716283019655932542975 & 0: 0x5e20f1f9f55f92f083dd1805ac3863e49c2ef7f17409056791c7cefef5c007da\nstorage_1 +\nkeccac_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\nUDiv(storage_12,_256): 0x2200\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\nUDiv(storage_12,_256): 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_12: 0xffffffffffffffffffffffffffffffffffffffff00\ncalldata_Slot_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_Slot_0: 0x5f72f45000000000000000000000000000000000000000000000000000000000\ncalldatasize_Slot: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `check(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/temp/DSlot-0.sol", "function": "check(uint256)", "lineno": 1, "title": "Integer Overflow ", "type": "Warning"}, {"address": 9504, "code": "ntract Slot {\n    uint constant BET_EXPIRATION_BLOCKS = 250;\n    uint constant MIN_BET = 0.01 ether;\n    uint constant MAX_BET = 300000 ether;\n    uint constant JACKPOT_PERCENT = 10;\n    uint constant MINIPOT_PERCENT = 10;\n\n    uint[][] REELS = [\n                      [1,2,1,3,1,4,5,3,5,6],\n                      [1,2,1,3,1,4,1,3,1,6],\n                      [4,5,3,5,4,2,4,3,5,6]\n                      ];\n\n    uint[] SYMBOL_MASK = [0, 1, 2, 4, 8, 16, 32];\n\n    uint[][] PAYTABLE = [\n                         [0x010100, 2],\n                         [0x010120, 4],\n                         [0x010110, 4],\n                         [0x040402, 8],\n                         [0x040404, 8],\n                         [0x080802, 12],\n                         [0x080808, 12],\n                         [0x202002, 16],\n                         [0x020220, 16],\n                         [0x202020, 100],\n                         [0x020202, 9999]\n                         ];\n\n    address owner;\n    address pendingOwner;\n    uint acceptPrice;\n\n    uint public pendingBetAmount;\n    uint public jackpotPool;\n    uint public minipotPool;\n    uint public rollTimes;\n    uint public minipotTimes;\n\n    struct Roll {\n        uint bet;\n        uint8 lines;\n        uint8 rollCount;\n        uint blocknum;\n        address next;\n    }\n\n    struct PartnerShare {\n        address from;\n        uint share;\n    }\n\n    event RollBegin(address indexed from, uint bet, uint8 lines, uint count);\n    event RollEnd(address indexed from, uint bet, uint8 lines, uint32 wheel, uint win, uint minipot);\n\n    mapping(address => Roll[]) public rolls;\n    address public rollHead;\n    address public rollTail;\n\n    PartnerShare[] public partners;\n\n    constructor () public {\n        owner = msg.sender;\n    }\n\n    function setOwner(address newOwner, uint price) public {\n        require (msg.sender == owner, \"Only owner can set new owner.\");\n        require (newOwner != owner, \"No need to set again.\");\n        pendingOwner = newOwner;\n        acceptPrice = price;\n    }\n\n    function acceptOwner() payable public {\n        require (msg.sender == pendingOwner, \"You are not pending owner.\");\n        require (msg.value >= acceptPrice, \"Amount not enough.\");\n        owner.transfer(acceptPrice);\n        owner = pendingOwner;\n    }\n\n    // enable direct transfer ether to contract\n    function() public payable {\n        require (msg.value > 200 finney, 'Min investment required.');\n        if (owner != msg.sender) {\n            partners.push(PartnerShare(msg.sender, msg.value / 1 finney));\n        }\n    }\n\n    function kill() external {\n        require (msg.sender == owner, \"Only owner can kill.\");\n        require (pendingBetAmount == 0, \"All spins need processed befor self-destruct.\");\n        distribute();\n        selfdestruct(owner);\n    }\n\n    function rollBlockNumber(address addr) public view returns (uint) {\n        if (rolls[addr].length > 0) {\n            return rolls[addr][0].blocknum;\n        } else {\n            return 0;\n        }\n    }\n\n    function getPartnersCount() public view returns (uint) {\n        return partners.length;\n    }\n\n    function jackpot() public view returns (uint) {\n        return jackpotPool / 2;\n    }\n\n    function minipot() public view returns (uint) {\n        return minipotPool / 2;\n    }\n\n    function roll(uint8 lines, uint8 count) public payable {\n        require (rolls[msg.sender].length == 0, \"Can't roll mutiple times.\");\n\n        uint betValue = msg.value / count;\n        require (betValue >= MIN_BET && betValue <= MAX_BET, \"Bet amount should be within range.\");\n        rolls[msg.sender].push(Roll(betValue, lines, count, block.number, address(0)));\n\n        // append to roll linked list\n        if (rollHead == address(0)) {\n            rollHead = msg.sender;\n        } else {\n            rolls[rollTail][0].next = msg.sender;\n        }\n        rollTail = msg.sender;\n\n        pendingBetAmount += msg.value;\n        jackpotPool += msg.value * JACKPOT_PERCENT / 100;\n        minipotPool += msg.value * MINIPOT_PERCENT / 100;\n\n        emit RollBegin(msg.sender, betValue, lines, count);\n    }\n\n    function check(uint maxCount) public {\n        require (maxCount > 0, 'No reason for check nothing');\n\n        uint i = 0;\n        address currentAddr = rollHead;\n\n        while (i < maxCount && currentAddr != address(0)) {\n            Roll storage rollReq = rolls[currentAddr][0];\n\n            if (rollReq.blocknum >= block.number) {\n                return;\n            }\n\n            checkRoll(currentAddr, rollReq);\n\n            rollHead = rollReq.next;\n            if (currentAddr == rollTail) {\n                rollTail = address(0);\n            }\n\n            delete rolls[currentAddr];\n\n            currentAddr = rollHead;\n            i++;\n        }\n    }\n\n    function checkRoll(address addr, Roll storage rollReq) private {\n        uint totalWin = 0;\n\n        if (block.number <= rollReq.blocknum + BET_EXPIRATION_BLOCKS) {\n            for (uint x = 0; x < rollReq.rollCount; x++) {\n                totalWin += doRoll(addr, rollReq.bet, rollReq.lines, rollReq.blocknum, pendingBetAmount + rollTimes + x);\n            }\n        } else {\n            totalWin = rollReq.bet * rollReq.rollCount - 2300;\n        }\n\n        pendingBetAmount -= rollReq.bet * rollReq.rollCount;\n\n        if (totalWin > 0) {\n            if (address(this).balance > totalWin + 2300) {\n                addr.transfer(totalWin);\n            } else {\n                partners.push(PartnerShare(addr, totalWin / 1 finney));\n            }\n        }\n    }\n\n    function doRoll(address addr, uint bet, uint8 lines, uint blocknum, uint seed) private returns (uint) {\n        uint[3] memory stops;\n        uint winRate;\n        uint entropy;\n        (stops, winRate, entropy) = calcRoll(addr, blocknum, seed);\n\n        uint wheel = stops[0]<<16 | stops[1]<<8 | stops[2];\n        uint win = bet * winRate;\n\n        // Jackpot\n        if (winRate == 9999) {\n            win = jackpotPool / 2;\n            jackpotPool -= win;\n        }\n\n\n        rollTimes++;\n\n        uint minipotWin = 0;\n        // Check minipot\n        if (0xffff / (entropy >> 32 & 0xffff) > (100 * (minipotTimes + 1)) - rollTimes) {\n            minipotTimes++;\n            minipotWin = minipotPool / 2;\n            minipotPool -= minipotWin;\n        }\n\n        emit RollEnd(addr, bet, lines, uint32(wheel), win, minipotWin);\n\n        return win + minipotWin;\n    }\n\n    function calcRoll(address addr, uint blocknum, uint seed) public view returns (uint[3] memory stops, uint winValue, uint entropy) {\n        require (block.number > blocknum, \"Can't check in the same block or before.\");\n        require (block.number <= blocknum + BET_EXPIRATION_BLOCKS, \"Can't check for too old block.\");\n        entropy = uint(keccak256(abi.encodePacked(addr, blockhash(blocknum), seed)));\n        stops = [REELS[0][entropy % REELS[0].length],\n                 REELS[1][(entropy >> 8) % REELS[1].length],\n                 REELS[2][(entropy >> 16) % REELS[2].length]];\n        winValue = calcPayout(stops[0], stops[1], stops[2]);\n    }\n\n    function calcPayout(uint p1, uint p2, uint p3) public view returns (uint) {\n        uint line = SYMBOL_MASK[p1] << 16 | SYMBOL_MASK[p2] << 8 | SYMBOL_MASK[p3];\n        uint pay = 0;\n\n        for (uint i = 0; i < PAYTABLE.length; i++) {\n            if (PAYTABLE[i][0] == line & PAYTABLE[i][0]) {\n                pay = PAYTABLE[i][1];\n            }\n        }\n\n        return pay;\n    }\n\n    function getBonus() public view returns (uint) {\n        return address(this).balance - pendingBetAmount - jackpotPool - minipotPool;\n    }\n\n    function distribute() public returns (uint result) {\n        bool isPartner = (owner == msg.sender);\n        uint totalShare = 0;\n\n        for (uint i = 0; i < partners.length; i++) {\n            if (partners[i].from == msg.sender) {\n                isPartner = true;\n            }\n\n            totalShare += partners[i].share;\n        }\n\n        require(isPartner, 'Only partner can distrubute bonus.');\n\n        uint bonus = getBonus();\n\n        if (totalShare > 0) {\n            uint price = ((bonus / 10) * 6) / totalShare;\n\n            if (price > 0) {\n                for (uint j = 0; j < partners.length; j++) {\n                    uint share = partners[j].share * price;\n                    partners[j].from.transfer(share);\n                    if (partners[j].from == msg.sender) {\n                        result += share;\n                    }\n                }\n            }\n\n            if (price > 2 * 1 finney) {\n                delete partners;\n            }\n        }\n\n        uint ownerShare = (bonus / 10) * 4;\n        owner.transfer(ownerShare);\n        if (owner == msg.sender) {\n            result += ownerShare;\n        }\n    }\n}", "debug": "storage_2 +\nkeccac_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\nUDiv(storage_12,_256): 0xdb57ff55bd7fed80001fffffffffffffffffffffffffffffffffffffffffff80\nstorage_0 +\nkeccac_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\nUDiv(storage_12,_256): 0xc5d1745d1745d1745d1745d1745d1745d1745d1745d1745d1745d1745d17463a\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\nUDiv(storage_12,_256): 0x5445541d473b55538d72e6e5d50144ee6155cb9c68ac2a6292aaaa5752757416\nblock_number: 0xe3963f5b9d7fef00801a5d16a030cffffffffffffffffffffffffffffffffffb\nstorage_13: 0xffffffffffffffffffffffffffffffffffffffff00\nstorage_1 +\nkeccac_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\nUDiv(storage_12,_256): 0x1600\nstorage_12: 0xffffffffffffffffffffffffffffffffffffffff00\ncalldata_Slot_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_Slot_0: 0x5f72f45000000000000000000000000000000000000000000000000000000000\ncalldatasize_Slot: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `check(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/temp/DSlot-0.sol", "function": "check(uint256)", "lineno": 3, "title": "Integer Overflow ", "type": "Warning"}, {"address": 9516, "code": "ntract Slot {\n    uint constant BET_EXPIRATION_BLOCKS = 250;\n    uint constant MIN_BET = 0.01 ether;\n    uint constant MAX_BET = 300000 ether;\n    uint constant JACKPOT_PERCENT = 10;\n    uint constant MINIPOT_PERCENT = 10;\n\n    uint[][] REELS = [\n                      [1,2,1,3,1,4,5,3,5,6],\n                      [1,2,1,3,1,4,1,3,1,6],\n                      [4,5,3,5,4,2,4,3,5,6]\n                      ];\n\n    uint[] SYMBOL_MASK = [0, 1, 2, 4, 8, 16, 32];\n\n    uint[][] PAYTABLE = [\n                         [0x010100, 2],\n                         [0x010120, 4],\n                         [0x010110, 4],\n                         [0x040402, 8],\n                         [0x040404, 8],\n                         [0x080802, 12],\n                         [0x080808, 12],\n                         [0x202002, 16],\n                         [0x020220, 16],\n                         [0x202020, 100],\n                         [0x020202, 9999]\n                         ];\n\n    address owner;\n    address pendingOwner;\n    uint acceptPrice;\n\n    uint public pendingBetAmount;\n    uint public jackpotPool;\n    uint public minipotPool;\n    uint public rollTimes;\n    uint public minipotTimes;\n\n    struct Roll {\n        uint bet;\n        uint8 lines;\n        uint8 rollCount;\n        uint blocknum;\n        address next;\n    }\n\n    struct PartnerShare {\n        address from;\n        uint share;\n    }\n\n    event RollBegin(address indexed from, uint bet, uint8 lines, uint count);\n    event RollEnd(address indexed from, uint bet, uint8 lines, uint32 wheel, uint win, uint minipot);\n\n    mapping(address => Roll[]) public rolls;\n    address public rollHead;\n    address public rollTail;\n\n    PartnerShare[] public partners;\n\n    constructor () public {\n        owner = msg.sender;\n    }\n\n    function setOwner(address newOwner, uint price) public {\n        require (msg.sender == owner, \"Only owner can set new owner.\");\n        require (newOwner != owner, \"No need to set again.\");\n        pendingOwner = newOwner;\n        acceptPrice = price;\n    }\n\n    function acceptOwner() payable public {\n        require (msg.sender == pendingOwner, \"You are not pending owner.\");\n        require (msg.value >= acceptPrice, \"Amount not enough.\");\n        owner.transfer(acceptPrice);\n        owner = pendingOwner;\n    }\n\n    // enable direct transfer ether to contract\n    function() public payable {\n        require (msg.value > 200 finney, 'Min investment required.');\n        if (owner != msg.sender) {\n            partners.push(PartnerShare(msg.sender, msg.value / 1 finney));\n        }\n    }\n\n    function kill() external {\n        require (msg.sender == owner, \"Only owner can kill.\");\n        require (pendingBetAmount == 0, \"All spins need processed befor self-destruct.\");\n        distribute();\n        selfdestruct(owner);\n    }\n\n    function rollBlockNumber(address addr) public view returns (uint) {\n        if (rolls[addr].length > 0) {\n            return rolls[addr][0].blocknum;\n        } else {\n            return 0;\n        }\n    }\n\n    function getPartnersCount() public view returns (uint) {\n        return partners.length;\n    }\n\n    function jackpot() public view returns (uint) {\n        return jackpotPool / 2;\n    }\n\n    function minipot() public view returns (uint) {\n        return minipotPool / 2;\n    }\n\n    function roll(uint8 lines, uint8 count) public payable {\n        require (rolls[msg.sender].length == 0, \"Can't roll mutiple times.\");\n\n        uint betValue = msg.value / count;\n        require (betValue >= MIN_BET && betValue <= MAX_BET, \"Bet amount should be within range.\");\n        rolls[msg.sender].push(Roll(betValue, lines, count, block.number, address(0)));\n\n        // append to roll linked list\n        if (rollHead == address(0)) {\n            rollHead = msg.sender;\n        } else {\n            rolls[rollTail][0].next = msg.sender;\n        }\n        rollTail = msg.sender;\n\n        pendingBetAmount += msg.value;\n        jackpotPool += msg.value * JACKPOT_PERCENT / 100;\n        minipotPool += msg.value * MINIPOT_PERCENT / 100;\n\n        emit RollBegin(msg.sender, betValue, lines, count);\n    }\n\n    function check(uint maxCount) public {\n        require (maxCount > 0, 'No reason for check nothing');\n\n        uint i = 0;\n        address currentAddr = rollHead;\n\n        while (i < maxCount && currentAddr != address(0)) {\n            Roll storage rollReq = rolls[currentAddr][0];\n\n            if (rollReq.blocknum >= block.number) {\n                return;\n            }\n\n            checkRoll(currentAddr, rollReq);\n\n            rollHead = rollReq.next;\n            if (currentAddr == rollTail) {\n                rollTail = address(0);\n            }\n\n            delete rolls[currentAddr];\n\n            currentAddr = rollHead;\n            i++;\n        }\n    }\n\n    function checkRoll(address addr, Roll storage rollReq) private {\n        uint totalWin = 0;\n\n        if (block.number <= rollReq.blocknum + BET_EXPIRATION_BLOCKS) {\n            for (uint x = 0; x < rollReq.rollCount; x++) {\n                totalWin += doRoll(addr, rollReq.bet, rollReq.lines, rollReq.blocknum, pendingBetAmount + rollTimes + x);\n            }\n        } else {\n            totalWin = rollReq.bet * rollReq.rollCount - 2300;\n        }\n\n        pendingBetAmount -= rollReq.bet * rollReq.rollCount;\n\n        if (totalWin > 0) {\n            if (address(this).balance > totalWin + 2300) {\n                addr.transfer(totalWin);\n            } else {\n                partners.push(PartnerShare(addr, totalWin / 1 finney));\n            }\n        }\n    }\n\n    function doRoll(address addr, uint bet, uint8 lines, uint blocknum, uint seed) private returns (uint) {\n        uint[3] memory stops;\n        uint winRate;\n        uint entropy;\n        (stops, winRate, entropy) = calcRoll(addr, blocknum, seed);\n\n        uint wheel = stops[0]<<16 | stops[1]<<8 | stops[2];\n        uint win = bet * winRate;\n\n        // Jackpot\n        if (winRate == 9999) {\n            win = jackpotPool / 2;\n            jackpotPool -= win;\n        }\n\n\n        rollTimes++;\n\n        uint minipotWin = 0;\n        // Check minipot\n        if (0xffff / (entropy >> 32 & 0xffff) > (100 * (minipotTimes + 1)) - rollTimes) {\n            minipotTimes++;\n            minipotWin = minipotPool / 2;\n            minipotPool -= minipotWin;\n        }\n\n        emit RollEnd(addr, bet, lines, uint32(wheel), win, minipotWin);\n\n        return win + minipotWin;\n    }\n\n    function calcRoll(address addr, uint blocknum, uint seed) public view returns (uint[3] memory stops, uint winValue, uint entropy) {\n        require (block.number > blocknum, \"Can't check in the same block or before.\");\n        require (block.number <= blocknum + BET_EXPIRATION_BLOCKS, \"Can't check for too old block.\");\n        entropy = uint(keccak256(abi.encodePacked(addr, blockhash(blocknum), seed)));\n        stops = [REELS[0][entropy % REELS[0].length],\n                 REELS[1][(entropy >> 8) % REELS[1].length],\n                 REELS[2][(entropy >> 16) % REELS[2].length]];\n        winValue = calcPayout(stops[0], stops[1], stops[2]);\n    }\n\n    function calcPayout(uint p1, uint p2, uint p3) public view returns (uint) {\n        uint line = SYMBOL_MASK[p1] << 16 | SYMBOL_MASK[p2] << 8 | SYMBOL_MASK[p3];\n        uint pay = 0;\n\n        for (uint i = 0; i < PAYTABLE.length; i++) {\n            if (PAYTABLE[i][0] == line & PAYTABLE[i][0]) {\n                pay = PAYTABLE[i][1];\n            }\n        }\n\n        return pay;\n    }\n\n    function getBonus() public view returns (uint) {\n        return address(this).balance - pendingBetAmount - jackpotPool - minipotPool;\n    }\n\n    function distribute() public returns (uint result) {\n        bool isPartner = (owner == msg.sender);\n        uint totalShare = 0;\n\n        for (uint i = 0; i < partners.length; i++) {\n            if (partners[i].from == msg.sender) {\n                isPartner = true;\n            }\n\n            totalShare += partners[i].share;\n        }\n\n        require(isPartner, 'Only partner can distrubute bonus.');\n\n        uint bonus = getBonus();\n\n        if (totalShare > 0) {\n            uint price = ((bonus / 10) * 6) / totalShare;\n\n            if (price > 0) {\n                for (uint j = 0; j < partners.length; j++) {\n                    uint share = partners[j].share * price;\n                    partners[j].from.transfer(share);\n                    if (partners[j].from == msg.sender) {\n                        result += share;\n                    }\n                }\n            }\n\n            if (price > 2 * 1 finney) {\n                delete partners;\n            }\n        }\n\n        uint ownerShare = (bonus / 10) * 4;\n        owner.transfer(ownerShare);\n        if (owner == msg.sender) {\n            result += ownerShare;\n        }\n    }\n}", "debug": "keccac_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\nUDiv(storage_12,_256): 0xe4880007effffffffffffffffffffffffffffffffffffffffffffffffffffff8\nstorage_2 +\nkeccac_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\nUDiv(storage_12,_256): 0x78dbb1b1ffffffffffffffffffffffffffffffffffffffffffffffffffffff82\nstorage_0 +\nkeccac_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\nUDiv(storage_12,_256): 0x3759f22983759f22983759f22983759f22983759f22983759f22983759f22993\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\nUDiv(storage_12,_256): 0x20780000e5000000000000000000000000000000000000000000000000000000\nblock_number: 0x98ebb382082a07ffffffffffffffffffffffffffffffffffffffffffffffffbf\nstorage_13: 0xffffffffffffffffffffffffffffffffffffffff00\nstorage_1 +\nkeccac_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\nUDiv(storage_12,_256): 0x9400\nstorage_12: 0xffffffffffffffffffffffffffffffffffffffff00\ncalldata_Slot_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_Slot_0: 0x5f72f45000000000000000000000000000000000000000000000000000000000\ncalldatasize_Slot: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `check(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/temp/DSlot-0.sol", "function": "check(uint256)", "lineno": 3, "title": "Integer Overflow ", "type": "Warning"}], "success": true}
