{"error": null, "issues": [{"address": 1302, "code": "public payable\n    {\n        require(msg.value >= promotePrice || msg.sender == owner);\n        fightActive[fightCount] = true;\n        uint ownerFee;\n        ownerFee = msg.value;\n        accounts[owner] = SafeMath.add(accounts[owner], ownerFee);\n\n        promoter[fightCount] = msg.sender;\n\n        fightEndTime[fightCount] = block.number + fightLength;\n\n        fighter1Name[fightCount] = _fighter1Name;\n        fighter2Name[fightCount] = _fighter2Name;\n\n        fighter1Image[fightCount] = _fighter1Image;\n        fighter2Image[fightCount] = _fighter2Image;\n\n        fightCount += 1;\n\n\n    }\n\n    function endFight(uint fightID) public \n    {\n        require(block.number > fightEndTime[fightID] || msg.sender == owner);\n   ", "debug": "calldata_fightclub_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_fightclub_0: 0x59ab699500000000000000000000000000000000000000000000000000000000\ncalldatasize_fightclub: 0x4\n", "description": "A possible integer overflow exists in the function `promoteFight(string,string,string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/temp/FightClub-0.sol", "function": "promoteFight(string,string,string,string)", "lineno": 113, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2225, "code": "\n\n    }\n\n\n}\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    re", "debug": "calldata_fightclub_32 + 4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_fightclub_0: 0x6329150400000000000000000000000000000000000000000000000000000000\ncalldatasize_fightclub: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `setImages(uint256,string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/temp/FightClub-0.sol", "function": "setImages(uint256,string,string)", "lineno": 253, "title": "Integer Overflow ", "type": "Warning"}, {"address": 4155, "code": "Add;\n    mapping (uint => address[]) public ", "debug": "The exception is triggered under the following conditions:\n\ncalldata_fightclub_32 + 4: 0x0\nstorage_keccac_calldata_fightclub_4: 0x0\ncalldata_fightclub_0: 0xc8c9a1700000000000000000000000000000000000000000000000000000000\ncalldatasize_fightclub: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/temp/FightClub-0.sol", "function": "_function_0x0c8c9a17", "lineno": 42, "title": "Exception state", "type": "Informational"}, {"address": 4629, "code": ", fighter1Image[fightID], fight", "debug": "SOLVER OUTPUT:\ncalldata_fightclub_0: 0x3ccfd60b00000000000000000000000000000000000000000000000000000000\ncalldatasize_fightclub: 0x4\ncallvalue: 0x0\n", "description": "In the function `withdraw()` a non-zero amount of Ether is sent to msg.sender.\nIt seems that this function can be called without restrictions.", "filename": "/temp/FightClub-0.sol", "function": "withdraw()", "lineno": 221, "title": "Ether send", "type": "Warning"}, {"address": 5371, "code": "2Name;\n\n        fighter1Im", "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\nUDiv(storage_23,_256): 0x96572163e9957c646936dd0f93557849da35ff9b509393047059910709b020b1\nstorage_20: 0x8084014d6c7d3600e9863317d653050cc4d7b625850250002228e1180d542005\ncallvalue: 0x4dc42d28f4b06d565da259b53345ee29d3b9fd11d8ab51f67f1debe3cbbee93d\nblock_number: 0x82e7ff7a0efd16288987c90017cafaaed4d939d9f6fd5fffcfa49cdc35da9ff9\nstorage_23: 0x0\ncaller: 0x0\nstorage_16: 0x4dc42d28f4b06d565da259b53345ee29d3b9fd11d8ab51f67f1debe3cbbee93e\ncalldata_fightclub_0: 0x59ab699500000000000000000000000000000000000000000000000000000000\ncalldatasize_fightclub: 0x4\n", "description": "A possible integer overflow exists in the function `promoteFight(string,string,string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/temp/FightClub-0.sol", "function": "promoteFight(string,string,string,string)", "lineno": 126, "title": "Integer Overflow ", "type": "Warning"}, {"address": 11249, "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\nUDiv(storage_23,_256): 0xa8795cd3fffffffffffffffffffffffffffffffffffffffffffffffffffffffe\ncallvalue: 0x57f25cd000000000000000000000000000000000000000000000000000000000\nstorage_23: 0x0\ncaller: 0x0\nstorage_16: 0x57f25cd000000000000000000000000000000000000000000000000000000001\ncalldata_fightclub_0: 0x59ab699500000000000000000000000000000000000000000000000000000000\ncalldatasize_fightclub: 0x4\n", "description": "A possible integer overflow exists in the function `promoteFight(string,string,string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/temp/FightClub-0.sol", "function": "promoteFight(string,string,string,string)", "lineno": 289, "title": "Integer Overflow ", "type": "Warning"}, {"address": 11262, "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\nUDiv(storage_23,_256): 0x82ecbd2423341666402032d124142a2de24e0663128a850c006a6560198e3401\ncallvalue: 0xe9deffb766f7de7744b816e3b517cbc80626b3153a8af64c0c7f657fbcafb7de\nstorage_23: 0x0\ncaller: 0x0\nstorage_16: 0xe9deffb766f7de7744b816e3b517cbc80626b3153a8af64c0c7f657fbcafb7df\ncalldata_fightclub_0: 0x59ab699500000000000000000000000000000000000000000000000000000000\ncalldatasize_fightclub: 0x4\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/temp/FightClub-0.sol", "function": "promoteFight(string,string,string,string)", "lineno": 289, "title": "Exception state", "type": "Informational"}, {"address": 11444, "code": "vote(\n        uint rankid\n    );\n\n    mapping (uint => address[]) public voter1Add;\n    mapping (uint => address[]) public voter2Add;\n\n\n    //mapping (uint => string) categories;\n    mapping (uint => string) public fighter1Name;  \n    mapping (uint => string) public fighter2Name;  \n    mapping (uint => string) public fighter1Image;  \n    mapping (uint => string) public fighter2Image; \n    mapping (uint => uint) public fightEndTime; \n    mapping (uint => bool) public fightActive;\n\n    mapping(uint => uint) public voteCount1;\n    mapping(uint => uint) public voteCount2;\n\n    mapping(uint => address) public promoter;      //map promoter address to fight\n    mapping(uint => string) public promoterName;   //map promoter name to fight\n\n    mapping(address => uint) public accounts;      //player and promoter accounts for withdrawal\n    mapping(address => string) public playerName;      //players can enter an optional nickname\n    mapping(uint => uint) public fightPool;        //Reward Pool for each fight\n \n\n    uint public votePrice = 0.001 ether;\n    uint public promotePrice = 0.05 ether;\n    \n    uint public ownerFeeRate = 15;\n    uint public promoterFeeRate = 15;\n    uint public playerFeeRate = 70;\n\n    uint public fightLength = 17700; //3 days\n\n    uint public fightCount = 0;\n    \n    uint public ownerAccount = 0;\n\n    address owner;\n    \n    constructor() public {\n        owner = msg.sender;\n    }\n\n    function vote(uint fightID, uint fighter) public payable\n    {\n\n        require(msg.value >= votePrice);\n        require(fighter == 1 || fighter == 2);\n        require(fightActive[fightID]);\n        uint ownerFee;\n        uint authorFee;\n        uint fightPoolFee;\n\n        ownerFee = SafeMath.div(SafeMath.mul(msg.value,ownerFeeRate),100);\n        authorFee = SafeMath.div(SafeMath.mul(msg.value,promoterFeeRate),100);\n        fightPoolFee = SafeMath.div(SafeMath.mul(msg.value,playerFeeRate),100);\n\n        accounts[owner] = SafeMath.add(accounts[owner], ownerFee);\n        accounts[promoter[fightID]] = SafeMath.add(accounts[promoter[fightID]], authorFee);\n        fightPool[fightID] = SafeMath.add(fightPool[fightID], fightPoolFee);\n\n        if (fighter == 1) {\n            //vote1[fightID].push(1);\n            //voter1[fightID][voteCount1] = 1;//msg.sender;\n            voter1Add[fightID].push(msg.sender);\n        } else {\n            //vote2[fightID].push(1);\n            //voter2[fightID][voter2[fightID].length] = msg.sender;\n            voter2Add[fightID].push(msg.sender);\n        }\n    }\n\n    function promoteFight(string _fighter1Name, string _fighter2Name, string _fighter1Image, string _fighter2Image) public payable\n    {\n        require(msg.value >= promotePrice || msg.sender == owner);\n        fightActive[fightCount] = true;\n        uint ownerFee;\n        ownerFee = msg.value;\n        accounts[owner] = SafeMath.add(accounts[owner], ownerFee);\n\n        promoter[fightCount] = msg.sender;\n\n        fightEndTime[fightCount] = block.number + fightLength;\n\n        fighter1Name[fightCount] = _fighter1Name;\n        fighter2Name[fightCount] = _fighter2Name;\n\n        fighter1Image[fightCount] = _fighter1Image;\n        fighter2Image[fightCount] = _fighter2Image;\n\n        fightCount += 1;\n\n\n    }\n\n    function endFight(uint fightID) public \n    {\n        require(block.number > fightEndTime[fightID] || msg.sender == owner);\n        require(fightActive[fightID]);\n        uint voterAmount;\n        uint payoutRemaining;\n\n        fightActive[fightID] = false;\n\n\n        //determine winner and distribute funds\n        if (voter1Add[fightID].length > voter2Add[fightID].length)\n        {\n            payoutRemaining = fightPool[fightID];\n            voterAmount = SafeMath.div(fightPool[fightID],voter1Add[fightID].length);\n            for (uint i1 = 0; i1 < voter1Add[fightID].length; i1++)\n                {\n                    if (payoutRemaining >= voterAmount)\n                    {\n                        accounts[voter1Add[fightID][i1]] = SafeMath.add(accounts[voter1Add[fightID][i1]], voterAmount);\n                        payoutRemaining = SafeMath.sub(payoutRemaining,voterAmount);\n                    } else {\n                        accounts[voter1Add[fightID][i1]] = SafeMath.add(accounts[voter1Add[fightID][i1]], payoutRemaining);\n                    }\n                    \n                }\n            \n        }\n\n        if (voter1Add[fightID].length < voter2Add[fightID].length)\n        {\n            payoutRemaining = fightPool[fightID];\n            voterAmount = SafeMath.div(fightPool[fightID],voter2Add[fightID].length);\n            for (uint i2 = 0; i2 < voter2Add[fightID].length; i2++)\n                {\n                    if (payoutRemaining >= voterAmount)\n                    {\n                        accounts[voter2Add[fightID][i2]] = SafeMath.add(accounts[voter2Add[fightID][i2]], voterAmount);\n                        payoutRemaining = SafeMath.sub(payoutRemaining,voterAmount);\n                    } else {\n                        accounts[voter2Add[fightID][i2]] = SafeMath.add(accounts[voter2Add[fightID][i2]], payoutRemaining);\n                    }\n                    \n                }\n        }\n\n        if (voter1Add[fightID].length == voter2Add[fightID].length)\n        {\n            payoutRemaining = fightPool[fightID];\n            voterAmount = SafeMath.div(fightPool[fightID],voter1Add[fightID].length + voter2Add[fightID].length);\n            for (uint i3 = 0; i3 < voter1Add[fightID].length; i3++)\n                {\n                    if (payoutRemaining >= voterAmount)\n                    {\n                        accounts[voter1Add[fightID][i3]] = SafeMath.add(accounts[voter1Add[fightID][i3]], voterAmount);\n                        accounts[voter2Add[fightID][i3]] = SafeMath.add(accounts[voter2Add[fightID][i3]], voterAmount);\n                        payoutRemaining = SafeMath.sub(payoutRemaining,voterAmount + voterAmount);\n                    }\n                    \n                }\n\n        }\n\n        \n\n    }\n\n\n    function ownerWithdraw() \n    {\n        require(msg.sender == owner);\n        uint tempAmount = ownerAccount;\n        ownerAccount = 0;\n        owner.transfer(tempAmount);\n    }\n\n    function withdraw() \n    {\n        uint tempAmount = accounts[msg.sender];\n        accounts[msg.sender] = 0;\n        msg.sender.transfer(tempAmount);\n    }\n\n    function getFightData(uint fightID) public view returns(string, string, string, string, uint, uint, uint)\n    {\n        return(fighter1Name[fightID], fighter2Name[fightID], fighter1Image[fightID], fighter2Image[fightID], voter1Add[fightID].length, voter2Add[fightID].length, fightEndTime[fightID]);\n    }\n\n    function setPrices(uint _votePrice, uint _promotePrice) public \n    {\n        require(msg.sender == owner);\n        votePrice = _votePrice;\n        promotePrice = _promotePrice;\n\n    }\n\n     function setFightLength(uint _fightLength) public \n    {\n        require(msg.sender == owner);\n        fightLength = _fightLength;\n\n    }\n\n    function setRates(uint _ownerRate, uint _promoterRate, uint _playerRate) public \n    {\n        require(msg.sender == owner);\n        require(_ownerRate + _promoterRate + _playerRate == 100);\n        ownerFeeRate = _ownerRate;\n        promoterFeeRate = _promoterRate;\n        playerFeeRate = _playerRate;\n\n    }\n\n    function setImages(uint _fightID, string _fighter1Image, string _fighter2Image) public \n    {\n        require(msg.sender == promoter[_fightID]);\n        fighter1Image[fightCount] = _fighter1Image;\n        fighter2Image[fightCount] = _fighter2Image;\n\n    }\n\n\n}\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;", "debug": "calldata_fightclub_4 + calldata_fightclub_32 + 4: 0x8000000000000000000000000000000000000000000000000000000000000000\nstorage_keccac_calldata_fightclub_4: 0x0\ncaller: 0x0\ncalldata_fightclub_0: 0x6329150400000000000000000000000000000000000000000000000000000000\ncalldatasize_fightclub: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `setImages(uint256,string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/temp/FightClub-0.sol", "function": "setImages(uint256,string,string)", "lineno": 38, "title": "Integer Overflow ", "type": "Warning"}], "success": true}
