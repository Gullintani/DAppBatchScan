{"error": null, "issues": [{"address": 1138, "code": "ire(areas[_areaId].isOpen);\n    require(areas[_areaId].TeamMemberlimitCount >= _zombieId.length);\n\n    bytes32 teamHash = block.blockhash(block.number-1);\n\n    for(uint16 i = 0; i<_zombieId.length; i++){\n      //\u78ba\u4fdd\u6bad\u5c4d\u90fd\u5728\u5bb6\uff0c\u4e26\u4e14\u53ef\u4ee5\u51fa\u6230\n      require(now > zombies[_zombieId[i]].readyTime);\n      require(!zombies[_zombieId[i]].notAtHome);\n\n      teamHash = keccak256(teamHash,now,_areaId,zombiemain.seeZombieDna(_zombieId[i]));\n\n      zombies[_zombieId[i]].notAtHome = true;\n      zombies[_zombieId[i]].readyTime = uint32(now + areas[_areaId].duration);\n    }\n\n    //\u8077\u696d\u90fd\u5fc5\u9808\u7b26\u5408\u689d\u4ef6\n    for(uint16 a = 0; a<areas[_areaId].roletype.length; a++){\n      if(areas[_areaId].roletype[a] == 99) continue;\n      if(zombiemain.seeZombieRole(_zombieId[a]) != areas[_areaId].roletype[a]) revert();\n    }    \n\n    areas[_areaId].TotalTeamCount ++;\n\n    require(teams[teamHash].areaID == 0);\n    teams[teamHash] = Team(false,_areaId,_zombieId,uint32(now+areas[_areaId].duration),msg.sender,teamHash,block.number + 1);\n    \n    StartInvasion(teamHash, _areaId, _zombieId, msg.sender);\n  }\n\n  function awardInvation(bytes32 _teamId) public {\n    require(teams[_teamId].Owner == msg.sender);\n    require(now >= teams[_teamId].awardTime);\n    require(!teams[_teamId].isCharge);\n    uint totalUndeadsTime;\n    uint totalStar;\n    uint dieNumber;\n\n ", "debug": "calldata_zombieToken_32 + 4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_zombieToken_0: 0xc6335b2600000000000000000000000000000000000000000000000000000000\ncalldatasize_zombieToken: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `_function_0xc6335b26`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/temp/CryptoDeads-2.sol", "function": "_function_0xc6335b26", "lineno": 153, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1465, "debug": "The exception is triggered under the following conditions:\n\ncalldata_zombieToken_4: 0x0\nstorage_3: 0x0\nstorage_0: 0x0\ncaller: 0x0\ncalldata_zombieToken_0: 0x4442bf0200000000000000000000000000000000000000000000000000000000\ncalldatasize_zombieToken: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/temp/CryptoDeads-2.sol", "function": "closeArea(uint256)", "lineno": 234, "title": "Exception state", "type": "Informational"}, {"address": 1798, "code": "r = totalStar*9500/(areas[teams[_teamId].a", "debug": "storage_2 +\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\ncalldata_zombieToken_4: 0x800000000000000000000000000000000000000000000000000000000000000\nstorage_3 +\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\ncalldata_zombieToken_4: 0x0\nstorage_0 +\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\ncalldata_zombieToken_4: 0x0\ntimestamp: 0x0\ncaller: 0x0\ncalldata_zombieToken_0: 0x4a85512f00000000000000000000000000000000000000000000000000000000\ncalldatasize_zombieToken: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `awardInvation(bytes32)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/temp/CryptoDeads-2.sol", "function": "awardInvation(bytes32)", "lineno": 199, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1801, "code": "r = totalStar*9500/(areas[teams[_teamId].a", "debug": "storage_2 +\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\ncalldata_zombieToken_4: 0x7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_3 +\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\ncalldata_zombieToken_4: 0x0\nstorage_0 +\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\ncalldata_zombieToken_4: 0x0\ntimestamp: 0x0\ncaller: 0x0\ncalldata_zombieToken_0: 0x4a85512f00000000000000000000000000000000000000000000000000000000\ncalldatasize_zombieToken: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `awardInvation(bytes32)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/temp/CryptoDeads-2.sol", "function": "awardInvation(bytes32)", "lineno": 199, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1807, "code": "r = totalStar*9500/(areas[teams[_teamId].a", "debug": "storage_2 +\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\ncalldata_zombieToken_4: 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb\nstorage_3 +\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\ncalldata_zombieToken_4: 0x0\nstorage_0 +\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\ncalldata_zombieToken_4: 0x0\ntimestamp: 0x0\ncaller: 0x0\ncalldata_zombieToken_0: 0x4a85512f00000000000000000000000000000000000000000000000000000000\ncalldatasize_zombieToken: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `awardInvation(bytes32)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/temp/CryptoDeads-2.sol", "function": "awardInvation(bytes32)", "lineno": 199, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1832, "code": "r = totalStar*9500/(areas[teams[_teamId].a", "debug": "storage_2 +\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\ncalldata_zombieToken_4: 0x842101f0d087c1f0000057bdef8842100000005c800b80f08420a050720e01f\nstorage_3 +\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\ncalldata_zombieToken_4: 0x0\nstorage_0 +\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\ncalldata_zombieToken_4: 0x0\ntimestamp: 0x0\ncaller: 0x0\ncalldata_zombieToken_0: 0x4a85512f00000000000000000000000000000000000000000000000000000000\ncalldatasize_zombieToken: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `awardInvation(bytes32)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/temp/CryptoDeads-2.sol", "function": "awardInvation(bytes32)", "lineno": 199, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1834, "code": "r = totalStar*9500/(areas[teams[_teamId].a", "debug": "storage_2 +\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\ncalldata_zombieToken_4: 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb\nstorage_3 +\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\ncalldata_zombieToken_4: 0x0\nstorage_0 +\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\ncalldata_zombieToken_4: 0x0\ntimestamp: 0x0\ncaller: 0x0\ncalldata_zombieToken_0: 0x4a85512f00000000000000000000000000000000000000000000000000000000\ncalldatasize_zombieToken: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `awardInvation(bytes32)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/temp/CryptoDeads-2.sol", "function": "awardInvation(bytes32)", "lineno": 199, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2138, "code": "starLimit)+9400+totalUndeadsTim", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/temp/CryptoDeads-2.sol", "function": "awardInvation(bytes32)", "lineno": 201, "title": "Message call to external contract", "type": "Informational"}, {"address": 2138, "code": "starLimit)+9400+totalUndeadsTim", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 2138\n", "filename": "/temp/CryptoDeads-2.sol", "function": "awardInvation(bytes32)", "lineno": 201, "title": "Multiple Calls", "type": "Information"}, {"address": 2258, "code": " uint(keccak256(teams[_teamI", "debug": "The exception is triggered under the following conditions:\n\nstorage_2 +\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\ncalldata_zombieToken_4: 0x1\nstorage_3 +\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\ncalldata_zombieToken_4: 0x0\nstorage_1 +\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\ncalldata_zombieToken_4: 0x0\nstorage_3: 0x0\nreturndatasize: 0x20\nretval_2138: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nextcodesize: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_0 +\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\ncalldata_zombieToken_4: 0x0\ntimestamp: 0x0\ncaller: 0x0\ncalldata_zombieToken_0: 0x4a85512f00000000000000000000000000000000000000000000000000000000\ncalldatasize_zombieToken: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/temp/CryptoDeads-2.sol", "function": "awardInvation(bytes32)", "lineno": 204, "title": "Exception state", "type": "Informational"}, {"address": 2453, "code": "i<zb.length; i++){\n        zombies[zb[ii]].readyTime =", "debug": "The exception is triggered under the following conditions:\n\nstorage_3 +\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\ncalldata_zombieToken_4: 0xffffffff00\nstorage_1 +\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\ncalldata_zombieToken_4: 0x0\nstorage_3: 0x1\nstorage_0 +\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\ncalldata_zombieToken_4: 0x0\ntimestamp: 0xffffffff\ncaller: 0xffffffff\ncalldata_zombieToken_0: 0x4a85512f00000000000000000000000000000000000000000000000000000000\ncalldatasize_zombieToken: 0x4\nstorage_0 +\n87903029871075914254377627908054574944891091886930582284385770809450030037083 +\n8*\nstorage_1 +\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\ncalldata_zombieToken_4: 0x0\nstorage_2 +\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\ncalldata_zombieToken_4: 0x0\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/temp/CryptoDeads-2.sol", "function": "awardInvation(bytes32)", "lineno": 206, "title": "Exception state", "type": "Informational"}, {"address": 3546, "code": " starLimit,uint8 TeamMemberlimitCount,uint8[] roletype,uint _totallimitTeamCoun", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/temp/CryptoDeads-2.sol", "function": "awardInvation(bytes32)", "lineno": 226, "title": "Message call to external contract", "type": "Informational"}, {"address": 3920, "code": "totallimitTeamCount, 0, name, ZOBRevenue, isOp", "debug": "KECCAC_mem_128 +\n32 +\n32*\nstorage_2 +\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\ncalldata_zombieToken_4): 0x0\nstorage_0 +\n87903029871075914254377627908054574944891091886930582284385770809450030037083 +\n8*\nstorage_1 +\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\ncalldata_zombieToken_4: 0x4000000000000000000000000000000000000000000000000000000000000000\nstorage_3 +\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\ncalldata_zombieToken_4: 0x0\nstorage_1 +\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\ncalldata_zombieToken_4: 0x0\nstorage_4 +\n87903029871075914254377627908054574944891091886930582284385770809450030037083 +\n8*\nstorage_1 +\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\ncalldata_zombieToken_4: 0x0\nstorage_3: 0x1\nstorage_0 +\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\ncalldata_zombieToken_4: 0x0\ntimestamp: 0x0\ncaller: 0x0\ncalldata_zombieToken_0: 0x4a85512f00000000000000000000000000000000000000000000000000000000\ncalldatasize_zombieToken: 0x4\nstorage_2 +\nkeccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\ncalldata_zombieToken_4: 0x0\ncallvalue: 0x0\n", "description": "A possible integer underflow exists in the function `awardInvation(bytes32)`.\nThe subtraction may result in a value < 0.", "filename": "/temp/CryptoDeads-2.sol", "function": "awardInvation(bytes32)", "lineno": 227, "title": "Integer Underflow", "type": "Warning"}, {"address": 4232, "code": ";\npragma solidity ", "debug": "storage_3: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_0: 0x0\ncaller: 0x0\ncalldata_zombieToken_0: 0x7d94091200000000000000000000000000000000000000000000000000000000\ncalldatasize_zombieToken: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `addArea(uint256,uint8,uint8[],uint256,string,uint256,bool,uint32)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/temp/CryptoDeads-2.sol", "function": "addArea(uint256,uint8,uint8[],uint256,string,uint256,bool,uint32)", "lineno": 1, "title": "Integer Overflow ", "type": "Warning"}, {"address": 4327, "debug": "mem_192 +\n32*calldata_zombieToken_4 + calldata_zombieToken_32 + 36 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_zombieToken_4 + calldata_zombieToken_32 + 100)) +\n64: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\nstorage_0: 0x0\ncaller: 0x0\ncalldata_zombieToken_0: 0x7d94091200000000000000000000000000000000000000000000000000000000\ncalldatasize_zombieToken: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `addArea(uint256,uint8,uint8[],uint256,string,uint256,bool,uint32)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/temp/CryptoDeads-2.sol", "function": "addArea(uint256,uint8,uint8[],uint256,string,uint256,bool,uint32)", "lineno": 234, "title": "Integer Overflow ", "type": "Warning"}, {"address": 4376, "debug": "mem_192 +\n32*calldata_zombieToken_4 + calldata_zombieToken_32 + 36 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_zombieToken_4 + calldata_zombieToken_32 + 100)) +\n160: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\nmem_192 +\n32*calldata_zombieToken_4 + calldata_zombieToken_32 + 36 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_zombieToken_4 + calldata_zombieToken_32 + 100)) +\n64: 0x4daa38f4eef88000000000000000000000000000000000000000000000000060\nmem_mem_192 +\n32*calldata_zombieToken_4 + calldata_zombieToken_32 + 36 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_zombieToken_4 + calldata_zombieToken_32 + 100)) +\n64: 0x734c017d8883bfffffffffffffffffffffffffffffffffffffffffffffffffc\nkeccac_2_+\n87903029871075914254377627908054574944891091886930582284385770809450030037083_+\n8*storage_3: 0xfa8a2e8a40b0e4e18cc478108d22856bf02f7c1f87c307391a980da80b105206\nstorage_2 +\n87903029871075914254377627908054574944891091886930582284385770809450030037083 +\n8*storage_3: 0xf14db0c909eda4709b841ff3bfdffdfbc2a3a9200cc725812d0253812713c281\nstorage_0: 0x0\ncaller: 0x0\ncalldata_zombieToken_0: 0x7d94091200000000000000000000000000000000000000000000000000000000\ncalldatasize_zombieToken: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `addArea(uint256,uint8,uint8[],uint256,string,uint256,bool,uint32)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/temp/CryptoDeads-2.sol", "function": "addArea(uint256,uint8,uint8[],uint256,string,uint256,bool,uint32)", "lineno": 234, "title": "Integer Overflow ", "type": "Warning"}, {"address": 4535, "code": "eaId,uint[] _zombie", "debug": "The exception is triggered under the following conditions:\n\ncalldata_zombieToken_4: 0x0\nstorage_3: 0x0\ncalldata_zombieToken_0: 0x9b2c612500000000000000000000000000000000000000000000000000000000\ncalldatasize_zombieToken: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/temp/CryptoDeads-2.sol", "function": "_function_0x9b2c6125", "lineno": 142, "title": "Exception state", "type": "Informational"}, {"address": 4999, "code": "reaId].TotallimitTeamCount >= areas[_areaId].To", "debug": "calldata_zombieToken_4 + calldata_zombieToken_32 + 4: 0x800000000000000000000000000000000000000000000000000000000000000\ncalldata_zombieToken_0: 0xc6335b2600000000000000000000000000000000000000000000000000000000\ncalldatasize_zombieToken: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `_function_0xc6335b26`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/temp/CryptoDeads-2.sol", "function": "_function_0xc6335b26", "lineno": 152, "title": "Integer Overflow ", "type": "Warning"}, {"address": 5073, "code": "reaId].TotallimitTeamCount >= areas[_areaId].To", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/temp/CryptoDeads-2.sol", "function": "_function_0xc6335b26", "lineno": 152, "title": "Message call to external contract", "type": "Informational"}, {"address": 5156, "code": "(block.number-", "debug": "The exception is triggered under the following conditions:\n\ncalldata_zombieToken_4 + calldata_zombieToken_32 + 4: 0x2\ncalldata_zombieToken_4: 0x0\nstorage_3: 0x0\nmem_128 +\n32 +\n32*calldata_zombieToken_4 + calldata_zombieToken_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nreturndatasize: 0x20\nretval_5073: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nextcodesize: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_zombieToken_0: 0xc6335b2600000000000000000000000000000000000000000000000000000000\ncalldatasize_zombieToken: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/temp/CryptoDeads-2.sol", "function": "_function_0xc6335b26", "lineno": 156, "title": "Exception state", "type": "Informational"}, {"address": 7568, "code": " zombieToken(0x2Bb48FE71ba5f73Ab1c2B9775cfe638400110d34);\n    zombieMain zombiemain = zombieMain(0x58fd762F76D57C6fC2a480F6d26c1D03175AD64F);\n\n    struct Zombie {\n      uint32 readyTime;//\u5269\u9918\u53ef\u51fa\u6230\u6642\u9593\n      bool notAtHome;  //\u662f\u5426\u96e2\u5bb6\n      uint16 undeadsTime;//\u4e0d\u6b7b\u6b21\u6578\n    }\n\n    struct Area {\n      uint starLimit; \n      uint8 TeamMemberlimitCount; // 5\n      uint8[] roletype;     //  4,4,99,99,99\n      uint TotallimitTeamCount;\n      uint TotalTeamCount;\n      string name;\n      uint ZOBRevenue;\n      bool isOpen;\n      uint32 duration;\n    }\n\n    struct Team {\n      bool isCharge;\n      uint areaID;\n      uint[] Zombies;\n      uint32 awardTime;\n      address Owner;\n      bytes32 teamHash;\n      uint blocknumber;\n    }\n    \n    Area[] public areas;\n\n    mapping (uint=>Zombie) public zombies;\n    mapping (bytes32=>Team) public teams;\n\n    event StartInvasion(bytes32 indexed teamhash, uint _areaId,uint[] _zombieId,address player);\n    event AwardInvation(bytes32 indexed teamhash, bool InvationResult, uint ZOBRevenue, address player);\n\n    modifier onlyOwnerOf(uint[] _zombieId) {\n      require(zombiemain.checkAllOwner(_zombieId, msg.sender));\n      _;\n    }\n\n\n  function startInvasion(uint _areaId, uint[] _zombieId) public onlyOwnerOf(_zombieId){\n    require(areas[_areaId].TotallimitTeamCount >= areas[_areaId].TotalTeamCount + 1);\n    require(areas[_areaId].isOpen);\n    require(areas[_areaId].TeamMemberlimitCount >= _zombieId.length);\n\n    bytes32 teamHash = block.blockhash(block.number-1);\n\n    for(uint16 i = 0; i<_zombieId.length; i++){\n      //\u78ba\u4fdd\u6bad\u5c4d\u90fd\u5728\u5bb6\uff0c\u4e26\u4e14\u53ef\u4ee5\u51fa\u6230\n      require(now > zombies[_zombieId[i]].readyTime);\n      require(!zombies[_zombieId[i]].notAtHome);\n\n      teamHash = keccak256(teamHash,now,_areaId,zombiemain.seeZombieDna(_zombieId[i]));\n\n      zombies[_zombieId[i]].notAtHome = true;\n      zombies[_zombieId[i]].readyTime = uint32(now + areas[_areaId].duration);\n    }\n\n    //\u8077\u696d\u90fd\u5fc5\u9808\u7b26\u5408\u689d\u4ef6\n    for(uint16 a = 0; a<areas[_areaId].roletype.length; a++){\n      if(areas[_areaId].roletype[a] == 99) continue;\n      if(zombiemain.seeZombieRole(_zombieId[a]) != areas[_areaId].roletype[a]) revert();\n    }    \n\n    areas[_areaId].TotalTeamCount ++;\n\n    require(teams[teamHash].areaID == 0);\n    teams[teamHash] = Team(false,_areaId,_zombieId,uint32(now+areas[_areaId].duration),msg.sender,teamHash,block.number + 1);\n    \n    StartInvasion(teamHash, _areaId, _zombieId, msg.sender);\n  }\n\n  function awardInvation(bytes32 _teamId) public {\n    require(teams[_teamId].Owner == msg.sender);\n    require(now >= teams[_teamId].awardTime);\n    require(!teams[_teamId].isCharge);\n    uint totalUndeadsTime;\n    uint totalStar;\n    uint dieNumber;\n\n    uint[] memory zb =  teams[_teamId].Zombies;\n\n    for(i=0;i<zb.length;i++){\n        totalUndeadsTime += zombies[zb[i]].undeadsTime;\n        totalStar += zombiemain.seeZombieStar(zb[i]);\n    }\n\n    if(totalStar<areas[teams[_teamId].areaID].starLimit){\n        dieNumber = totalStar*9500/(areas[teams[_teamId].areaID].starLimit)+totalUndeadsTime*10;\n    }else{\n        dieNumber = totalStar*100/(areas[teams[_teamId].areaID].starLimit)+9400+totalUndeadsTime;\n    }\n\n    if(dieNumber <= uint(keccak256(teams[_teamId].teamHash, now, block.blockhash(block.number-1),block.blockhash(teams[_teamId].blocknumber))) % 10000) {\n      //Lose\n      for(uint16 i = 0; i<zb.length; i++){\n        zombies[zb[ii]].readyTime = uint32(now + 7 days);\n        zombies[zb[ii]].undeadsTime = 0;\n        zombies[zb[ii]].notAtHome = false;\n      }\n      AwardInvation(_teamId, false, 0, msg.sender);\n    } else {\n      //Win\n      for(uint16 ii = 0; ii<zb.length; ii++){\n        zombies[zb[ii]].undeadsTime ++;\n        zombies[zb[ii]].notAtHome = false;\n      }\n      zombietoken.mint(teams[_teamId].Owner, areas[teams[_teamId].areaID].ZOBRevenue);\n      AwardInvation(_teamId, true, areas[teams[_teamId].areaID].ZOBRevenue, msg.sender);\n    }\n\n    teams[_teamId].isCharge = true;\n    areas[teams[_teamId].areaID].TotalTeamCount --;\n  }\n\n  function addArea(uint starLimit,uint8 TeamMemberlimitCount,uint8[] roletype,uint _totallimitTeamCount,string name,uint ZOBRevenue,bool isOpen,uint32 duration) public onlyOwner{\n      areas.push(Area(starLimit, TeamMemberlimitCount, roletype, _totallimitTeamCount, 0, name, ZOBRevenue, isOpen, duration));\n  }\n  \n  function closeArea(uint areaId) public onlyOwner{\n      areas[areaId].isOpen = false;\n  }\n\n}", "debug": "storage_2 +\n87903029871075914254377627908054574944891091886930582284385770809450030037083 +\n8*storage_3: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8\nstorage_0: 0x0\ncaller: 0x0\ncalldata_zombieToken_0: 0x7d94091200000000000000000000000000000000000000000000000000000000\ncalldatasize_zombieToken: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `addArea(uint256,uint8,uint8[],uint256,string,uint256,bool,uint32)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/temp/CryptoDeads-2.sol", "function": "addArea(uint256,uint8,uint8[],uint256,string,uint256,bool,uint32)", "lineno": 106, "title": "Integer Overflow ", "type": "Warning"}, {"address": 7574, "code": " zombieToken(0x2Bb48FE71ba5f73Ab1c2B9775cfe638400110d34);\n    zombieMain zombiemain = zombieMain(0x58fd762F76D57C6fC2a480F6d26c1D03175AD64F);\n\n    struct Zombie {\n      uint32 readyTime;//\u5269\u9918\u53ef\u51fa\u6230\u6642\u9593\n      bool notAtHome;  //\u662f\u5426\u96e2\u5bb6\n      uint16 undeadsTime;//\u4e0d\u6b7b\u6b21\u6578\n    }\n\n    struct Area {\n      uint starLimit; \n      uint8 TeamMemberlimitCount; // 5\n      uint8[] roletype;     //  4,4,99,99,99\n      uint TotallimitTeamCount;\n      uint TotalTeamCount;\n      string name;\n      uint ZOBRevenue;\n      bool isOpen;\n      uint32 duration;\n    }\n\n    struct Team {\n      bool isCharge;\n      uint areaID;\n      uint[] Zombies;\n      uint32 awardTime;\n      address Owner;\n      bytes32 teamHash;\n      uint blocknumber;\n    }\n    \n    Area[] public areas;\n\n    mapping (uint=>Zombie) public zombies;\n    mapping (bytes32=>Team) public teams;\n\n    event StartInvasion(bytes32 indexed teamhash, uint _areaId,uint[] _zombieId,address player);\n    event AwardInvation(bytes32 indexed teamhash, bool InvationResult, uint ZOBRevenue, address player);\n\n    modifier onlyOwnerOf(uint[] _zombieId) {\n      require(zombiemain.checkAllOwner(_zombieId, msg.sender));\n      _;\n    }\n\n\n  function startInvasion(uint _areaId, uint[] _zombieId) public onlyOwnerOf(_zombieId){\n    require(areas[_areaId].TotallimitTeamCount >= areas[_areaId].TotalTeamCount + 1);\n    require(areas[_areaId].isOpen);\n    require(areas[_areaId].TeamMemberlimitCount >= _zombieId.length);\n\n    bytes32 teamHash = block.blockhash(block.number-1);\n\n    for(uint16 i = 0; i<_zombieId.length; i++){\n      //\u78ba\u4fdd\u6bad\u5c4d\u90fd\u5728\u5bb6\uff0c\u4e26\u4e14\u53ef\u4ee5\u51fa\u6230\n      require(now > zombies[_zombieId[i]].readyTime);\n      require(!zombies[_zombieId[i]].notAtHome);\n\n      teamHash = keccak256(teamHash,now,_areaId,zombiemain.seeZombieDna(_zombieId[i]));\n\n      zombies[_zombieId[i]].notAtHome = true;\n      zombies[_zombieId[i]].readyTime = uint32(now + areas[_areaId].duration);\n    }\n\n    //\u8077\u696d\u90fd\u5fc5\u9808\u7b26\u5408\u689d\u4ef6\n    for(uint16 a = 0; a<areas[_areaId].roletype.length; a++){\n      if(areas[_areaId].roletype[a] == 99) continue;\n      if(zombiemain.seeZombieRole(_zombieId[a]) != areas[_areaId].roletype[a]) revert();\n    }    \n\n    areas[_areaId].TotalTeamCount ++;\n\n    require(teams[teamHash].areaID == 0);\n    teams[teamHash] = Team(false,_areaId,_zombieId,uint32(now+areas[_areaId].duration),msg.sender,teamHash,block.number + 1);\n    \n    StartInvasion(teamHash, _areaId, _zombieId, msg.sender);\n  }\n\n  function awardInvation(bytes32 _teamId) public {\n    require(teams[_teamId].Owner == msg.sender);\n    require(now >= teams[_teamId].awardTime);\n    require(!teams[_teamId].isCharge);\n    uint totalUndeadsTime;\n    uint totalStar;\n    uint dieNumber;\n\n    uint[] memory zb =  teams[_teamId].Zombies;\n\n    for(i=0;i<zb.length;i++){\n        totalUndeadsTime += zombies[zb[i]].undeadsTime;\n        totalStar += zombiemain.seeZombieStar(zb[i]);\n    }\n\n    if(totalStar<areas[teams[_teamId].areaID].starLimit){\n        dieNumber = totalStar*9500/(areas[teams[_teamId].areaID].starLimit)+totalUndeadsTime*10;\n    }else{\n        dieNumber = totalStar*100/(areas[teams[_teamId].areaID].starLimit)+9400+totalUndeadsTime;\n    }\n\n    if(dieNumber <= uint(keccak256(teams[_teamId].teamHash, now, block.blockhash(block.number-1),block.blockhash(teams[_teamId].blocknumber))) % 10000) {\n      //Lose\n      for(uint16 i = 0; i<zb.length; i++){\n        zombies[zb[ii]].readyTime = uint32(now + 7 days);\n        zombies[zb[ii]].undeadsTime = 0;\n        zombies[zb[ii]].notAtHome = false;\n      }\n      AwardInvation(_teamId, false, 0, msg.sender);\n    } else {\n      //Win\n      for(uint16 ii = 0; ii<zb.length; ii++){\n        zombies[zb[ii]].undeadsTime ++;\n        zombies[zb[ii]].notAtHome = false;\n      }\n      zombietoken.mint(teams[_teamId].Owner, areas[teams[_teamId].areaID].ZOBRevenue);\n      AwardInvation(_teamId, true, areas[teams[_teamId].areaID].ZOBRevenue, msg.sender);\n    }\n\n    teams[_teamId].isCharge = true;\n    areas[teams[_teamId].areaID].TotalTeamCount --;\n  }\n\n  function addArea(uint starLimit,uint8 TeamMemberlimitCount,uint8[] roletype,uint _totallimitTeamCount,string name,uint ZOBRevenue,bool isOpen,uint32 duration) public onlyOwner{\n      areas.push(Area(starLimit, TeamMemberlimitCount, roletype, _totallimitTeamCount, 0, name, ZOBRevenue, isOpen, duration));\n  }\n  \n  function closeArea(uint areaId) public onlyOwner{\n      areas[areaId].isOpen = false;\n  }\n\n}", "debug": "keccac_2_+\n87903029871075914254377627908054574944891091886930582284385770809450030037083_+\n8*storage_3: 0xfcec31aa4da8f4a1b3306206d6eb9f5d308473ba656dbdf8048c062e75fda721\nstorage_2 +\n87903029871075914254377627908054574944891091886930582284385770809450030037083 +\n8*storage_3: 0x915d7948a0909e7775ed0c9f190c0bc403320899b037bc79147aca0f8022c221\nstorage_0: 0x0\ncaller: 0x0\ncalldata_zombieToken_0: 0x7d94091200000000000000000000000000000000000000000000000000000000\ncalldatasize_zombieToken: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `addArea(uint256,uint8,uint8[],uint256,string,uint256,bool,uint32)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/temp/CryptoDeads-2.sol", "function": "addArea(uint256,uint8,uint8[],uint256,string,uint256,bool,uint32)", "lineno": 106, "title": "Integer Overflow ", "type": "Warning"}, {"address": 7585, "code": " zombieToken(0x2Bb48FE71ba5f73Ab1c2B9775cfe638400110d34);\n    zombieMain zombiemain = zombieMain(0x58fd762F76D57C6fC2a480F6d26c1D03175AD64F);\n\n    struct Zombie {\n      uint32 readyTime;//\u5269\u9918\u53ef\u51fa\u6230\u6642\u9593\n      bool notAtHome;  //\u662f\u5426\u96e2\u5bb6\n      uint16 undeadsTime;//\u4e0d\u6b7b\u6b21\u6578\n    }\n\n    struct Area {\n      uint starLimit; \n      uint8 TeamMemberlimitCount; // 5\n      uint8[] roletype;     //  4,4,99,99,99\n      uint TotallimitTeamCount;\n      uint TotalTeamCount;\n      string name;\n      uint ZOBRevenue;\n      bool isOpen;\n      uint32 duration;\n    }\n\n    struct Team {\n      bool isCharge;\n      uint areaID;\n      uint[] Zombies;\n      uint32 awardTime;\n      address Owner;\n      bytes32 teamHash;\n      uint blocknumber;\n    }\n    \n    Area[] public areas;\n\n    mapping (uint=>Zombie) public zombies;\n    mapping (bytes32=>Team) public teams;\n\n    event StartInvasion(bytes32 indexed teamhash, uint _areaId,uint[] _zombieId,address player);\n    event AwardInvation(bytes32 indexed teamhash, bool InvationResult, uint ZOBRevenue, address player);\n\n    modifier onlyOwnerOf(uint[] _zombieId) {\n      require(zombiemain.checkAllOwner(_zombieId, msg.sender));\n      _;\n    }\n\n\n  function startInvasion(uint _areaId, uint[] _zombieId) public onlyOwnerOf(_zombieId){\n    require(areas[_areaId].TotallimitTeamCount >= areas[_areaId].TotalTeamCount + 1);\n    require(areas[_areaId].isOpen);\n    require(areas[_areaId].TeamMemberlimitCount >= _zombieId.length);\n\n    bytes32 teamHash = block.blockhash(block.number-1);\n\n    for(uint16 i = 0; i<_zombieId.length; i++){\n      //\u78ba\u4fdd\u6bad\u5c4d\u90fd\u5728\u5bb6\uff0c\u4e26\u4e14\u53ef\u4ee5\u51fa\u6230\n      require(now > zombies[_zombieId[i]].readyTime);\n      require(!zombies[_zombieId[i]].notAtHome);\n\n      teamHash = keccak256(teamHash,now,_areaId,zombiemain.seeZombieDna(_zombieId[i]));\n\n      zombies[_zombieId[i]].notAtHome = true;\n      zombies[_zombieId[i]].readyTime = uint32(now + areas[_areaId].duration);\n    }\n\n    //\u8077\u696d\u90fd\u5fc5\u9808\u7b26\u5408\u689d\u4ef6\n    for(uint16 a = 0; a<areas[_areaId].roletype.length; a++){\n      if(areas[_areaId].roletype[a] == 99) continue;\n      if(zombiemain.seeZombieRole(_zombieId[a]) != areas[_areaId].roletype[a]) revert();\n    }    \n\n    areas[_areaId].TotalTeamCount ++;\n\n    require(teams[teamHash].areaID == 0);\n    teams[teamHash] = Team(false,_areaId,_zombieId,uint32(now+areas[_areaId].duration),msg.sender,teamHash,block.number + 1);\n    \n    StartInvasion(teamHash, _areaId, _zombieId, msg.sender);\n  }\n\n  function awardInvation(bytes32 _teamId) public {\n    require(teams[_teamId].Owner == msg.sender);\n    require(now >= teams[_teamId].awardTime);\n    require(!teams[_teamId].isCharge);\n    uint totalUndeadsTime;\n    uint totalStar;\n    uint dieNumber;\n\n    uint[] memory zb =  teams[_teamId].Zombies;\n\n    for(i=0;i<zb.length;i++){\n        totalUndeadsTime += zombies[zb[i]].undeadsTime;\n        totalStar += zombiemain.seeZombieStar(zb[i]);\n    }\n\n    if(totalStar<areas[teams[_teamId].areaID].starLimit){\n        dieNumber = totalStar*9500/(areas[teams[_teamId].areaID].starLimit)+totalUndeadsTime*10;\n    }else{\n        dieNumber = totalStar*100/(areas[teams[_teamId].areaID].starLimit)+9400+totalUndeadsTime;\n    }\n\n    if(dieNumber <= uint(keccak256(teams[_teamId].teamHash, now, block.blockhash(block.number-1),block.blockhash(teams[_teamId].blocknumber))) % 10000) {\n      //Lose\n      for(uint16 i = 0; i<zb.length; i++){\n        zombies[zb[ii]].readyTime = uint32(now + 7 days);\n        zombies[zb[ii]].undeadsTime = 0;\n        zombies[zb[ii]].notAtHome = false;\n      }\n      AwardInvation(_teamId, false, 0, msg.sender);\n    } else {\n      //Win\n      for(uint16 ii = 0; ii<zb.length; ii++){\n        zombies[zb[ii]].undeadsTime ++;\n        zombies[zb[ii]].notAtHome = false;\n      }\n      zombietoken.mint(teams[_teamId].Owner, areas[teams[_teamId].areaID].ZOBRevenue);\n      AwardInvation(_teamId, true, areas[teams[_teamId].areaID].ZOBRevenue, msg.sender);\n    }\n\n    teams[_teamId].isCharge = true;\n    areas[teams[_teamId].areaID].TotalTeamCount --;\n  }\n\n  function addArea(uint starLimit,uint8 TeamMemberlimitCount,uint8[] roletype,uint _totallimitTeamCount,string name,uint ZOBRevenue,bool isOpen,uint32 duration) public onlyOwner{\n      areas.push(Area(starLimit, TeamMemberlimitCount, roletype, _totallimitTeamCount, 0, name, ZOBRevenue, isOpen, duration));\n  }\n  \n  function closeArea(uint areaId) public onlyOwner{\n      areas[areaId].isOpen = false;\n  }\n\n}", "debug": "mem_mem_192 +\n32*calldata_zombieToken_4 + calldata_zombieToken_32 + 36 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_zombieToken_4 + calldata_zombieToken_32 + 100)) +\n64: 0x8421003f084001f4210815cf88407c00000000000000037c1d000e8d178001f\nstorage_0: 0x0\ncaller: 0x0\ncalldata_zombieToken_0: 0x7d94091200000000000000000000000000000000000000000000000000000000\ncalldatasize_zombieToken: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `addArea(uint256,uint8,uint8[],uint256,string,uint256,bool,uint32)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/temp/CryptoDeads-2.sol", "function": "addArea(uint256,uint8,uint8[],uint256,string,uint256,bool,uint32)", "lineno": 106, "title": "Integer Overflow ", "type": "Warning"}, {"address": 7587, "code": " zombieToken(0x2Bb48FE71ba5f73Ab1c2B9775cfe638400110d34);\n    zombieMain zombiemain = zombieMain(0x58fd762F76D57C6fC2a480F6d26c1D03175AD64F);\n\n    struct Zombie {\n      uint32 readyTime;//\u5269\u9918\u53ef\u51fa\u6230\u6642\u9593\n      bool notAtHome;  //\u662f\u5426\u96e2\u5bb6\n      uint16 undeadsTime;//\u4e0d\u6b7b\u6b21\u6578\n    }\n\n    struct Area {\n      uint starLimit; \n      uint8 TeamMemberlimitCount; // 5\n      uint8[] roletype;     //  4,4,99,99,99\n      uint TotallimitTeamCount;\n      uint TotalTeamCount;\n      string name;\n      uint ZOBRevenue;\n      bool isOpen;\n      uint32 duration;\n    }\n\n    struct Team {\n      bool isCharge;\n      uint areaID;\n      uint[] Zombies;\n      uint32 awardTime;\n      address Owner;\n      bytes32 teamHash;\n      uint blocknumber;\n    }\n    \n    Area[] public areas;\n\n    mapping (uint=>Zombie) public zombies;\n    mapping (bytes32=>Team) public teams;\n\n    event StartInvasion(bytes32 indexed teamhash, uint _areaId,uint[] _zombieId,address player);\n    event AwardInvation(bytes32 indexed teamhash, bool InvationResult, uint ZOBRevenue, address player);\n\n    modifier onlyOwnerOf(uint[] _zombieId) {\n      require(zombiemain.checkAllOwner(_zombieId, msg.sender));\n      _;\n    }\n\n\n  function startInvasion(uint _areaId, uint[] _zombieId) public onlyOwnerOf(_zombieId){\n    require(areas[_areaId].TotallimitTeamCount >= areas[_areaId].TotalTeamCount + 1);\n    require(areas[_areaId].isOpen);\n    require(areas[_areaId].TeamMemberlimitCount >= _zombieId.length);\n\n    bytes32 teamHash = block.blockhash(block.number-1);\n\n    for(uint16 i = 0; i<_zombieId.length; i++){\n      //\u78ba\u4fdd\u6bad\u5c4d\u90fd\u5728\u5bb6\uff0c\u4e26\u4e14\u53ef\u4ee5\u51fa\u6230\n      require(now > zombies[_zombieId[i]].readyTime);\n      require(!zombies[_zombieId[i]].notAtHome);\n\n      teamHash = keccak256(teamHash,now,_areaId,zombiemain.seeZombieDna(_zombieId[i]));\n\n      zombies[_zombieId[i]].notAtHome = true;\n      zombies[_zombieId[i]].readyTime = uint32(now + areas[_areaId].duration);\n    }\n\n    //\u8077\u696d\u90fd\u5fc5\u9808\u7b26\u5408\u689d\u4ef6\n    for(uint16 a = 0; a<areas[_areaId].roletype.length; a++){\n      if(areas[_areaId].roletype[a] == 99) continue;\n      if(zombiemain.seeZombieRole(_zombieId[a]) != areas[_areaId].roletype[a]) revert();\n    }    \n\n    areas[_areaId].TotalTeamCount ++;\n\n    require(teams[teamHash].areaID == 0);\n    teams[teamHash] = Team(false,_areaId,_zombieId,uint32(now+areas[_areaId].duration),msg.sender,teamHash,block.number + 1);\n    \n    StartInvasion(teamHash, _areaId, _zombieId, msg.sender);\n  }\n\n  function awardInvation(bytes32 _teamId) public {\n    require(teams[_teamId].Owner == msg.sender);\n    require(now >= teams[_teamId].awardTime);\n    require(!teams[_teamId].isCharge);\n    uint totalUndeadsTime;\n    uint totalStar;\n    uint dieNumber;\n\n    uint[] memory zb =  teams[_teamId].Zombies;\n\n    for(i=0;i<zb.length;i++){\n        totalUndeadsTime += zombies[zb[i]].undeadsTime;\n        totalStar += zombiemain.seeZombieStar(zb[i]);\n    }\n\n    if(totalStar<areas[teams[_teamId].areaID].starLimit){\n        dieNumber = totalStar*9500/(areas[teams[_teamId].areaID].starLimit)+totalUndeadsTime*10;\n    }else{\n        dieNumber = totalStar*100/(areas[teams[_teamId].areaID].starLimit)+9400+totalUndeadsTime;\n    }\n\n    if(dieNumber <= uint(keccak256(teams[_teamId].teamHash, now, block.blockhash(block.number-1),block.blockhash(teams[_teamId].blocknumber))) % 10000) {\n      //Lose\n      for(uint16 i = 0; i<zb.length; i++){\n        zombies[zb[ii]].readyTime = uint32(now + 7 days);\n        zombies[zb[ii]].undeadsTime = 0;\n        zombies[zb[ii]].notAtHome = false;\n      }\n      AwardInvation(_teamId, false, 0, msg.sender);\n    } else {\n      //Win\n      for(uint16 ii = 0; ii<zb.length; ii++){\n        zombies[zb[ii]].undeadsTime ++;\n        zombies[zb[ii]].notAtHome = false;\n      }\n      zombietoken.mint(teams[_teamId].Owner, areas[teams[_teamId].areaID].ZOBRevenue);\n      AwardInvation(_teamId, true, areas[teams[_teamId].areaID].ZOBRevenue, msg.sender);\n    }\n\n    teams[_teamId].isCharge = true;\n    areas[teams[_teamId].areaID].TotalTeamCount --;\n  }\n\n  function addArea(uint starLimit,uint8 TeamMemberlimitCount,uint8[] roletype,uint _totallimitTeamCount,string name,uint ZOBRevenue,bool isOpen,uint32 duration) public onlyOwner{\n      areas.push(Area(starLimit, TeamMemberlimitCount, roletype, _totallimitTeamCount, 0, name, ZOBRevenue, isOpen, duration));\n  }\n  \n  function closeArea(uint areaId) public onlyOwner{\n      areas[areaId].isOpen = false;\n  }\n\n}", "debug": "mem_192 +\n32*calldata_zombieToken_4 + calldata_zombieToken_32 + 36 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_zombieToken_4 + calldata_zombieToken_32 + 100)) +\n64: 0x7fffffffffffffffffffffffffffffffffffffdaffffffffbfff7fffffffffe0\nmem_mem_192 +\n32*calldata_zombieToken_4 + calldata_zombieToken_32 + 36 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_zombieToken_4 + calldata_zombieToken_32 + 100)) +\n64: 0x7f6fc32c410701432cb30000000000000000000dfffffff3fc0000000000000\nstorage_0: 0x0\ncaller: 0x0\ncalldata_zombieToken_0: 0x7d94091200000000000000000000000000000000000000000000000000000000\ncalldatasize_zombieToken: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `addArea(uint256,uint8,uint8[],uint256,string,uint256,bool,uint32)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/temp/CryptoDeads-2.sol", "function": "addArea(uint256,uint8,uint8[],uint256,string,uint256,bool,uint32)", "lineno": 106, "title": "Integer Overflow ", "type": "Warning"}, {"address": 7755, "code": " zombieToken(0x2Bb48FE71ba5f73Ab1c2B9775cfe638400110d34);\n    zombieMain zombiemain = zombieMain(0x58fd762F76D57C6fC2a480F6d26c1D03175AD64F);\n\n    struct Zombie {\n      uint32 readyTime;//\u5269\u9918\u53ef\u51fa\u6230\u6642\u9593\n      bool notAtHome;  //\u662f\u5426\u96e2\u5bb6\n      uint16 undeadsTime;//\u4e0d\u6b7b\u6b21\u6578\n    }\n\n    struct Area {\n      uint starLimit; \n      uint8 TeamMemberlimitCount; // 5\n      uint8[] roletype;     //  4,4,99,99,99\n      uint TotallimitTeamCount;\n      uint TotalTeamCount;\n      string name;\n      uint ZOBRevenue;\n      bool isOpen;\n      uint32 duration;\n    }\n\n    struct Team {\n      bool isCharge;\n      uint areaID;\n      uint[] Zombies;\n      uint32 awardTime;\n      address Owner;\n      bytes32 teamHash;\n      uint blocknumber;\n    }\n    \n    Area[] public areas;\n\n    mapping (uint=>Zombie) public zombies;\n    mapping (bytes32=>Team) public teams;\n\n    event StartInvasion(bytes32 indexed teamhash, uint _areaId,uint[] _zombieId,address player);\n    event AwardInvation(bytes32 indexed teamhash, bool InvationResult, uint ZOBRevenue, address player);\n\n    modifier onlyOwnerOf(uint[] _zombieId) {\n      require(zombiemain.checkAllOwner(_zombieId, msg.sender));\n      _;\n    }\n\n\n  function startInvasion(uint _areaId, uint[] _zombieId) public onlyOwnerOf(_zombieId){\n    require(areas[_areaId].TotallimitTeamCount >= areas[_areaId].TotalTeamCount + 1);\n    require(areas[_areaId].isOpen);\n    require(areas[_areaId].TeamMemberlimitCount >= _zombieId.length);\n\n    bytes32 teamHash = block.blockhash(block.number-1);\n\n    for(uint16 i = 0; i<_zombieId.length; i++){\n      //\u78ba\u4fdd\u6bad\u5c4d\u90fd\u5728\u5bb6\uff0c\u4e26\u4e14\u53ef\u4ee5\u51fa\u6230\n      require(now > zombies[_zombieId[i]].readyTime);\n      require(!zombies[_zombieId[i]].notAtHome);\n\n      teamHash = keccak256(teamHash,now,_areaId,zombiemain.seeZombieDna(_zombieId[i]));\n\n      zombies[_zombieId[i]].notAtHome = true;\n      zombies[_zombieId[i]].readyTime = uint32(now + areas[_areaId].duration);\n    }\n\n    //\u8077\u696d\u90fd\u5fc5\u9808\u7b26\u5408\u689d\u4ef6\n    for(uint16 a = 0; a<areas[_areaId].roletype.length; a++){\n      if(areas[_areaId].roletype[a] == 99) continue;\n      if(zombiemain.seeZombieRole(_zombieId[a]) != areas[_areaId].roletype[a]) revert();\n    }    \n\n    areas[_areaId].TotalTeamCount ++;\n\n    require(teams[teamHash].areaID == 0);\n    teams[teamHash] = Team(false,_areaId,_zombieId,uint32(now+areas[_areaId].duration),msg.sender,teamHash,block.number + 1);\n    \n    StartInvasion(teamHash, _areaId, _zombieId, msg.sender);\n  }\n\n  function awardInvation(bytes32 _teamId) public {\n    require(teams[_teamId].Owner == msg.sender);\n    require(now >= teams[_teamId].awardTime);\n    require(!teams[_teamId].isCharge);\n    uint totalUndeadsTime;\n    uint totalStar;\n    uint dieNumber;\n\n    uint[] memory zb =  teams[_teamId].Zombies;\n\n    for(i=0;i<zb.length;i++){\n        totalUndeadsTime += zombies[zb[i]].undeadsTime;\n        totalStar += zombiemain.seeZombieStar(zb[i]);\n    }\n\n    if(totalStar<areas[teams[_teamId].areaID].starLimit){\n        dieNumber = totalStar*9500/(areas[teams[_teamId].areaID].starLimit)+totalUndeadsTime*10;\n    }else{\n        dieNumber = totalStar*100/(areas[teams[_teamId].areaID].starLimit)+9400+totalUndeadsTime;\n    }\n\n    if(dieNumber <= uint(keccak256(teams[_teamId].teamHash, now, block.blockhash(block.number-1),block.blockhash(teams[_teamId].blocknumber))) % 10000) {\n      //Lose\n      for(uint16 i = 0; i<zb.length; i++){\n        zombies[zb[ii]].readyTime = uint32(now + 7 days);\n        zombies[zb[ii]].undeadsTime = 0;\n        zombies[zb[ii]].notAtHome = false;\n      }\n      AwardInvation(_teamId, false, 0, msg.sender);\n    } else {\n      //Win\n      for(uint16 ii = 0; ii<zb.length; ii++){\n        zombies[zb[ii]].undeadsTime ++;\n        zombies[zb[ii]].notAtHome = false;\n      }\n      zombietoken.mint(teams[_teamId].Owner, areas[teams[_teamId].areaID].ZOBRevenue);\n      AwardInvation(_teamId, true, areas[teams[_teamId].areaID].ZOBRevenue, msg.sender);\n    }\n\n    teams[_teamId].isCharge = true;\n    areas[teams[_teamId].areaID].TotalTeamCount --;\n  }\n\n  function addArea(uint starLimit,uint8 TeamMemberlimitCount,uint8[] roletype,uint _totallimitTeamCount,string name,uint ZOBRevenue,bool isOpen,uint32 duration) public onlyOwner{\n      areas.push(Area(starLimit, TeamMemberlimitCount, roletype, _totallimitTeamCount, 0, name, ZOBRevenue, isOpen, duration));\n  }\n  \n  function closeArea(uint areaId) public onlyOwner{\n      areas[areaId].isOpen = false;\n  }\n\n}", "debug": "keccac_5_+\n87903029871075914254377627908054574944891091886930582284385770809450030037083_+\n8*storage_3: 0xfff91ba23249a12ccb4fd99f89f6007635bd0b0ebbf7df95693ffa80d87bcf26\nstorage_5 +\n87903029871075914254377627908054574944891091886930582284385770809450030037083 +\n8*storage_3: 0xef36cce9b4f74f7c7a04f7fa61ac29b1cf70c43e81e71464ffffe9b5ffffffe1\nkeccac_2_+\n87903029871075914254377627908054574944891091886930582284385770809450030037083_+\n8*storage_3: 0xfcab8532c9c47c68cd3aad115ccce90c002e036c938ae40500820232e1820a18\nstorage_2 +\n87903029871075914254377627908054574944891091886930582284385770809450030037083 +\n8*storage_3: 0x935af9c9b40df530835521c89999a8213c0964ee78d7ffffffffffffffffffe1\nstorage_0: 0x0\ncaller: 0x0\ncalldata_zombieToken_0: 0x7d94091200000000000000000000000000000000000000000000000000000000\ncalldatasize_zombieToken: 0x4\nmem_mem_192 +\n32*calldata_zombieToken_4 + calldata_zombieToken_32 + 36 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_zombieToken_4 + calldata_zombieToken_32 + 100)) +\n64: 0x0\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `addArea(uint256,uint8,uint8[],uint256,string,uint256,bool,uint32)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/temp/CryptoDeads-2.sol", "function": "addArea(uint256,uint8,uint8[],uint256,string,uint256,bool,uint32)", "lineno": 106, "title": "Integer Overflow ", "type": "Warning"}, {"address": 7784, "code": " zombieToken(0x2Bb48FE71ba5f73Ab1c2B9775cfe638400110d34);\n    zombieMain zombiemain = zombieMain(0x58fd762F76D57C6fC2a480F6d26c1D03175AD64F);\n\n    struct Zombie {\n      uint32 readyTime;//\u5269\u9918\u53ef\u51fa\u6230\u6642\u9593\n      bool notAtHome;  //\u662f\u5426\u96e2\u5bb6\n      uint16 undeadsTime;//\u4e0d\u6b7b\u6b21\u6578\n    }\n\n    struct Area {\n      uint starLimit; \n      uint8 TeamMemberlimitCount; // 5\n      uint8[] roletype;     //  4,4,99,99,99\n      uint TotallimitTeamCount;\n      uint TotalTeamCount;\n      string name;\n      uint ZOBRevenue;\n      bool isOpen;\n      uint32 duration;\n    }\n\n    struct Team {\n      bool isCharge;\n      uint areaID;\n      uint[] Zombies;\n      uint32 awardTime;\n      address Owner;\n      bytes32 teamHash;\n      uint blocknumber;\n    }\n    \n    Area[] public areas;\n\n    mapping (uint=>Zombie) public zombies;\n    mapping (bytes32=>Team) public teams;\n\n    event StartInvasion(bytes32 indexed teamhash, uint _areaId,uint[] _zombieId,address player);\n    event AwardInvation(bytes32 indexed teamhash, bool InvationResult, uint ZOBRevenue, address player);\n\n    modifier onlyOwnerOf(uint[] _zombieId) {\n      require(zombiemain.checkAllOwner(_zombieId, msg.sender));\n      _;\n    }\n\n\n  function startInvasion(uint _areaId, uint[] _zombieId) public onlyOwnerOf(_zombieId){\n    require(areas[_areaId].TotallimitTeamCount >= areas[_areaId].TotalTeamCount + 1);\n    require(areas[_areaId].isOpen);\n    require(areas[_areaId].TeamMemberlimitCount >= _zombieId.length);\n\n    bytes32 teamHash = block.blockhash(block.number-1);\n\n    for(uint16 i = 0; i<_zombieId.length; i++){\n      //\u78ba\u4fdd\u6bad\u5c4d\u90fd\u5728\u5bb6\uff0c\u4e26\u4e14\u53ef\u4ee5\u51fa\u6230\n      require(now > zombies[_zombieId[i]].readyTime);\n      require(!zombies[_zombieId[i]].notAtHome);\n\n      teamHash = keccak256(teamHash,now,_areaId,zombiemain.seeZombieDna(_zombieId[i]));\n\n      zombies[_zombieId[i]].notAtHome = true;\n      zombies[_zombieId[i]].readyTime = uint32(now + areas[_areaId].duration);\n    }\n\n    //\u8077\u696d\u90fd\u5fc5\u9808\u7b26\u5408\u689d\u4ef6\n    for(uint16 a = 0; a<areas[_areaId].roletype.length; a++){\n      if(areas[_areaId].roletype[a] == 99) continue;\n      if(zombiemain.seeZombieRole(_zombieId[a]) != areas[_areaId].roletype[a]) revert();\n    }    \n\n    areas[_areaId].TotalTeamCount ++;\n\n    require(teams[teamHash].areaID == 0);\n    teams[teamHash] = Team(false,_areaId,_zombieId,uint32(now+areas[_areaId].duration),msg.sender,teamHash,block.number + 1);\n    \n    StartInvasion(teamHash, _areaId, _zombieId, msg.sender);\n  }\n\n  function awardInvation(bytes32 _teamId) public {\n    require(teams[_teamId].Owner == msg.sender);\n    require(now >= teams[_teamId].awardTime);\n    require(!teams[_teamId].isCharge);\n    uint totalUndeadsTime;\n    uint totalStar;\n    uint dieNumber;\n\n    uint[] memory zb =  teams[_teamId].Zombies;\n\n    for(i=0;i<zb.length;i++){\n        totalUndeadsTime += zombies[zb[i]].undeadsTime;\n        totalStar += zombiemain.seeZombieStar(zb[i]);\n    }\n\n    if(totalStar<areas[teams[_teamId].areaID].starLimit){\n        dieNumber = totalStar*9500/(areas[teams[_teamId].areaID].starLimit)+totalUndeadsTime*10;\n    }else{\n        dieNumber = totalStar*100/(areas[teams[_teamId].areaID].starLimit)+9400+totalUndeadsTime;\n    }\n\n    if(dieNumber <= uint(keccak256(teams[_teamId].teamHash, now, block.blockhash(block.number-1),block.blockhash(teams[_teamId].blocknumber))) % 10000) {\n      //Lose\n      for(uint16 i = 0; i<zb.length; i++){\n        zombies[zb[ii]].readyTime = uint32(now + 7 days);\n        zombies[zb[ii]].undeadsTime = 0;\n        zombies[zb[ii]].notAtHome = false;\n      }\n      AwardInvation(_teamId, false, 0, msg.sender);\n    } else {\n      //Win\n      for(uint16 ii = 0; ii<zb.length; ii++){\n        zombies[zb[ii]].undeadsTime ++;\n        zombies[zb[ii]].notAtHome = false;\n      }\n      zombietoken.mint(teams[_teamId].Owner, areas[teams[_teamId].areaID].ZOBRevenue);\n      AwardInvation(_teamId, true, areas[teams[_teamId].areaID].ZOBRevenue, msg.sender);\n    }\n\n    teams[_teamId].isCharge = true;\n    areas[teams[_teamId].areaID].TotalTeamCount --;\n  }\n\n  function addArea(uint starLimit,uint8 TeamMemberlimitCount,uint8[] roletype,uint _totallimitTeamCount,string name,uint ZOBRevenue,bool isOpen,uint32 duration) public onlyOwner{\n      areas.push(Area(starLimit, TeamMemberlimitCount, roletype, _totallimitTeamCount, 0, name, ZOBRevenue, isOpen, duration));\n  }\n  \n  function closeArea(uint areaId) public onlyOwner{\n      areas[areaId].isOpen = false;\n  }\n\n}", "debug": "mem_mem_192 +\n32*calldata_zombieToken_4 + calldata_zombieToken_32 + 36 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_zombieToken_4 + calldata_zombieToken_32 + 100)) +\n160: 0x8000000000000000000000000000000000000000000000000000000000000000\nmem_192 +\n32*calldata_zombieToken_4 + calldata_zombieToken_32 + 36 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_zombieToken_4 + calldata_zombieToken_32 + 100)) +\n64: 0x6110000000004c6021e8554fffffffffffffffffffffffffffffffffffffffe0\nmem_mem_192 +\n32*calldata_zombieToken_4 + calldata_zombieToken_32 + 36 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_zombieToken_4 + calldata_zombieToken_32 + 100)) +\n64: 0x60000000000001f1f1a1e3209c0000000000000000000000000000000000000\nkeccac_2_+\n87903029871075914254377627908054574944891091886930582284385770809450030037083_+\n8*storage_3: 0x3ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_2 +\n87903029871075914254377627908054574944891091886930582284385770809450030037083 +\n8*storage_3: 0x1\nstorage_0: 0x0\ncaller: 0x0\ncalldata_zombieToken_0: 0x7d94091200000000000000000000000000000000000000000000000000000000\ncalldatasize_zombieToken: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `addArea(uint256,uint8,uint8[],uint256,string,uint256,bool,uint32)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/temp/CryptoDeads-2.sol", "function": "addArea(uint256,uint8,uint8[],uint256,string,uint256,bool,uint32)", "lineno": 106, "title": "Integer Overflow ", "type": "Warning"}, {"address": 7798, "code": " zombieToken(0x2Bb48FE71ba5f73Ab1c2B9775cfe638400110d34);\n    zombieMain zombiemain = zombieMain(0x58fd762F76D57C6fC2a480F6d26c1D03175AD64F);\n\n    struct Zombie {\n      uint32 readyTime;//\u5269\u9918\u53ef\u51fa\u6230\u6642\u9593\n      bool notAtHome;  //\u662f\u5426\u96e2\u5bb6\n      uint16 undeadsTime;//\u4e0d\u6b7b\u6b21\u6578\n    }\n\n    struct Area {\n      uint starLimit; \n      uint8 TeamMemberlimitCount; // 5\n      uint8[] roletype;     //  4,4,99,99,99\n      uint TotallimitTeamCount;\n      uint TotalTeamCount;\n      string name;\n      uint ZOBRevenue;\n      bool isOpen;\n      uint32 duration;\n    }\n\n    struct Team {\n      bool isCharge;\n      uint areaID;\n      uint[] Zombies;\n      uint32 awardTime;\n      address Owner;\n      bytes32 teamHash;\n      uint blocknumber;\n    }\n    \n    Area[] public areas;\n\n    mapping (uint=>Zombie) public zombies;\n    mapping (bytes32=>Team) public teams;\n\n    event StartInvasion(bytes32 indexed teamhash, uint _areaId,uint[] _zombieId,address player);\n    event AwardInvation(bytes32 indexed teamhash, bool InvationResult, uint ZOBRevenue, address player);\n\n    modifier onlyOwnerOf(uint[] _zombieId) {\n      require(zombiemain.checkAllOwner(_zombieId, msg.sender));\n      _;\n    }\n\n\n  function startInvasion(uint _areaId, uint[] _zombieId) public onlyOwnerOf(_zombieId){\n    require(areas[_areaId].TotallimitTeamCount >= areas[_areaId].TotalTeamCount + 1);\n    require(areas[_areaId].isOpen);\n    require(areas[_areaId].TeamMemberlimitCount >= _zombieId.length);\n\n    bytes32 teamHash = block.blockhash(block.number-1);\n\n    for(uint16 i = 0; i<_zombieId.length; i++){\n      //\u78ba\u4fdd\u6bad\u5c4d\u90fd\u5728\u5bb6\uff0c\u4e26\u4e14\u53ef\u4ee5\u51fa\u6230\n      require(now > zombies[_zombieId[i]].readyTime);\n      require(!zombies[_zombieId[i]].notAtHome);\n\n      teamHash = keccak256(teamHash,now,_areaId,zombiemain.seeZombieDna(_zombieId[i]));\n\n      zombies[_zombieId[i]].notAtHome = true;\n      zombies[_zombieId[i]].readyTime = uint32(now + areas[_areaId].duration);\n    }\n\n    //\u8077\u696d\u90fd\u5fc5\u9808\u7b26\u5408\u689d\u4ef6\n    for(uint16 a = 0; a<areas[_areaId].roletype.length; a++){\n      if(areas[_areaId].roletype[a] == 99) continue;\n      if(zombiemain.seeZombieRole(_zombieId[a]) != areas[_areaId].roletype[a]) revert();\n    }    \n\n    areas[_areaId].TotalTeamCount ++;\n\n    require(teams[teamHash].areaID == 0);\n    teams[teamHash] = Team(false,_areaId,_zombieId,uint32(now+areas[_areaId].duration),msg.sender,teamHash,block.number + 1);\n    \n    StartInvasion(teamHash, _areaId, _zombieId, msg.sender);\n  }\n\n  function awardInvation(bytes32 _teamId) public {\n    require(teams[_teamId].Owner == msg.sender);\n    require(now >= teams[_teamId].awardTime);\n    require(!teams[_teamId].isCharge);\n    uint totalUndeadsTime;\n    uint totalStar;\n    uint dieNumber;\n\n    uint[] memory zb =  teams[_teamId].Zombies;\n\n    for(i=0;i<zb.length;i++){\n        totalUndeadsTime += zombies[zb[i]].undeadsTime;\n        totalStar += zombiemain.seeZombieStar(zb[i]);\n    }\n\n    if(totalStar<areas[teams[_teamId].areaID].starLimit){\n        dieNumber = totalStar*9500/(areas[teams[_teamId].areaID].starLimit)+totalUndeadsTime*10;\n    }else{\n        dieNumber = totalStar*100/(areas[teams[_teamId].areaID].starLimit)+9400+totalUndeadsTime;\n    }\n\n    if(dieNumber <= uint(keccak256(teams[_teamId].teamHash, now, block.blockhash(block.number-1),block.blockhash(teams[_teamId].blocknumber))) % 10000) {\n      //Lose\n      for(uint16 i = 0; i<zb.length; i++){\n        zombies[zb[ii]].readyTime = uint32(now + 7 days);\n        zombies[zb[ii]].undeadsTime = 0;\n        zombies[zb[ii]].notAtHome = false;\n      }\n      AwardInvation(_teamId, false, 0, msg.sender);\n    } else {\n      //Win\n      for(uint16 ii = 0; ii<zb.length; ii++){\n        zombies[zb[ii]].undeadsTime ++;\n        zombies[zb[ii]].notAtHome = false;\n      }\n      zombietoken.mint(teams[_teamId].Owner, areas[teams[_teamId].areaID].ZOBRevenue);\n      AwardInvation(_teamId, true, areas[teams[_teamId].areaID].ZOBRevenue, msg.sender);\n    }\n\n    teams[_teamId].isCharge = true;\n    areas[teams[_teamId].areaID].TotalTeamCount --;\n  }\n\n  function addArea(uint starLimit,uint8 TeamMemberlimitCount,uint8[] roletype,uint _totallimitTeamCount,string name,uint ZOBRevenue,bool isOpen,uint32 duration) public onlyOwner{\n      areas.push(Area(starLimit, TeamMemberlimitCount, roletype, _totallimitTeamCount, 0, name, ZOBRevenue, isOpen, duration));\n  }\n  \n  function closeArea(uint areaId) public onlyOwner{\n      areas[areaId].isOpen = false;\n  }\n\n}", "debug": "mem_mem_192 +\n32*calldata_zombieToken_4 + calldata_zombieToken_32 + 36 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_zombieToken_4 + calldata_zombieToken_32 + 100)) +\n160: 0x7922e0dfb09d2eb5c255bf6ffaefc00000000000000000000000000000000011\nmem_192 +\n32*calldata_zombieToken_4 + calldata_zombieToken_32 + 36 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_zombieToken_4 + calldata_zombieToken_32 + 100)) +\n64: 0xe76e7bcb6f7fddfcddfef4ff5f7f5c7eddfd3ff7e2738477fffffc7eeeefffe0\nmem_192 +\n32*calldata_zombieToken_4 + calldata_zombieToken_32 + 36 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_zombieToken_4 + calldata_zombieToken_32 + 100)) +\n160: 0xb3907711d14569555402210fffffffffffffffffffffffffffffffffffffffeb\nmem_mem_192 +\n32*calldata_zombieToken_4 + calldata_zombieToken_32 + 36 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_zombieToken_4 + calldata_zombieToken_32 + 100)) +\n64: 0x187da0ee36ba0eff7ebeff7e2c2011bc60f14002003979c3fffffdb00887ff0\nkeccac_2_+\n87903029871075914254377627908054574944891091886930582284385770809450030037083_+\n8*storage_3: 0xf9f8bfd3221616e49ea4049395fffcefeffefafa779962b45fe6777e67b241e2\nstorage_2 +\n87903029871075914254377627908054574944891091886930582284385770809450030037083 +\n8*storage_3: 0xcb05d9abc240c9a8d4e87beb3fff9bf9ffffd3f69244638c3a57d348fddfffe1\nstorage_0: 0x0\ncaller: 0x0\ncalldata_zombieToken_0: 0x7d94091200000000000000000000000000000000000000000000000000000000\ncalldatasize_zombieToken: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `addArea(uint256,uint8,uint8[],uint256,string,uint256,bool,uint32)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/temp/CryptoDeads-2.sol", "function": "addArea(uint256,uint8,uint8[],uint256,string,uint256,bool,uint32)", "lineno": 106, "title": "Integer Overflow ", "type": "Warning"}], "success": true}
