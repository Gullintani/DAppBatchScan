{"error": null, "issues": [{"address": 3180, "code": "0; // dealsCompl", "debug": "The exception is triggered under the following conditions:\n\ncalldata_SaleClockAuction_4: 0x0\nstorage_4: 0x0\ncalldata_SaleClockAuction_0: 0x1b8ef0bb00000000000000000000000000000000000000000000000000000000\ncalldatasize_SaleClockAuction: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/temp/DopeRaider-0.sol", "function": "getRemainingCapacity(uint256)", "lineno": 275, "title": "Exception state", "type": "Informational"}, {"address": 8431, "code": "Id];\n        }\n\n        Tr", "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_SaleClockAuction_32_+_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_SaleClockAuction_32 + 4: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_SaleClockAuction_4: 0x0\ncaller: 0x0\nstorage_keccac_calldata_SaleClockAuction_32_+_36: 0x0\ncalldata_SaleClockAuction_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_SaleClockAuction: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `transferFrom(address,address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/temp/DopeRaider-0.sol", "function": "transferFrom(address,address,uint256)", "lineno": 201, "title": "Integer Overflow ", "type": "Warning"}, {"address": 8647, "code": "function _createNarco(\n     ", "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_SaleClockAuction_4: 0x0\ncalldata_SaleClockAuction_32 + 4: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_SaleClockAuction_4: 0xffffffffffffffffffffffffffffffffffffffff\ncaller: 0xffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_calldata_SaleClockAuction_32_+_36: 0xffffffffffffffffffffffffffffffffffffffff00\ncalldata_SaleClockAuction_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_SaleClockAuction: 0x4\ncallvalue: 0x0\n", "description": "A possible integer underflow exists in the function `transferFrom(address,address,uint256)`.\nThe subtraction may result in a value < 0.", "filename": "/temp/DopeRaider-0.sol", "function": "transferFrom(address,address,uint256)", "lineno": 208, "title": "Integer Underflow", "type": "Warning"}, {"address": 8911, "code": "ictContractAddress = _address;\n    }\n\n\n    mo", "debug": "", "description": "This contract executes a message call to an address provided as a function argument. Generally, it is not recommended to call user-supplied addresses using Solidity's call() construct. Note that attackers might leverage reentrancy attacks to exploit race conditions or manipulate this contract's state.", "filename": "/temp/DopeRaider-0.sol", "function": "setDistrictAddress(address)", "lineno": 103, "title": "Message call to external contract", "type": "Warning"}, {"address": 9042, "code": "yDopeRaiderContract() {\n        r", "debug": "", "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.", "filename": "/temp/DopeRaider-0.sol", "function": "setDistrictAddress(address)", "lineno": 107, "title": "State change after external call", "type": "Warning"}, {"address": 9107, "code": "g.sender == districtContractAddres", "debug": "", "description": "The contract account state is changed after an external call. Consider that the called contract could re-enter the function before this state change takes place. This can lead to business logic vulnerabilities.", "filename": "/temp/DopeRaider-0.sol", "function": "setDistrictAddress(address)", "lineno": 108, "title": "State change after external call", "type": "Warning"}], "success": true}
