{"error": null, "issues": [{"address": 901, "code": "os;\n                attrs[index + 3] = fs.production;\n                attrs[index + 4] = fs.attack;\n                attrs[index + 5] = fs.defense;\n                attrs[index + 6] = fs.plunder;\n                attrs[index + 7] = fs.productionMultiplier;\n                attrs[index + 8] = fs.attackMultiplier;\n                attrs[index + 9] = fs.defenseMultiplier;\n                attrs[index + 10] = fs.plunderMultiplier;\n                attrs[index + 11] = fs.level;\n                attrs[index + 12] = fs.isPercent; \n                attrs[index + 13] = tokenId;  \n            }   \n        }\n    }\n}", "debug": "calldata_RaceToken_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_RaceToken_0: 0xd047d4900000000000000000000000000000000000000000000000000000000\ncalldatasize_RaceToken: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `getFashionsAttrs(uint256[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/temp/Crypto_Racing-3.sol", "function": "getFashionsAttrs(uint256[])", "lineno": 589, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1180, "code": "\n        }\n    }\n\n\n    /// @dev Race token info returned based on Token ID transfered (64 at most)\n    function getFashionsAttrs(uint256[] _tokens) external view returns(uint256[] attrs) {\n        uint256 length = _tokens.length;\n        attrs = new uint256[](length * 14);\n        uint256 tokenId;\n        uint256 index;\n        for (uint256 i = 0; i < length; ++i) {\n            tokenId = _tokens[i];\n            if (fashionIdToOwner[tokenId] != address(0)) {\n                index = i * 14;\n                Fashion storage fs = fashionArray[tokenId];\n                attrs[index]     =", "debug": "mem_128 +\n32 +\n32*\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_RaceToken_4: 0x800000000000000000000000000000000000000000000000000000000000000\ncalldata_RaceToken_4: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_RaceToken_0: 0x15de460700000000000000000000000000000000000000000000000000000000\ncalldatasize_RaceToken: 0x4\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_RaceToken_4: 0x0\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `getOwnFashions(address)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/temp/Crypto_Racing-3.sol", "function": "getOwnFashions(address)", "lineno": 571, "title": "Integer Overflow ", "type": "Warning"}, {"address": 4048, "code": "_from, _tokenId, _", "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_calldata_RaceToken_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_RaceToken_4: 0x1\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\nUDiv(storage_keccac_calldata_RaceToken_4,_256): 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xff00\nstorage_1: 0x1\nstorage_0: 0x0\ncalldata_RaceToken_0: 0x378f83f00000000000000000000000000000000000000000000000000000000\ncalldatasize_RaceToken: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/temp/Crypto_Racing-3.sol", "function": "destroyFashion(uint256,uint16)", "lineno": 501, "title": "Exception state", "type": "Informational"}, {"address": 4316, "code": " require(_to != address(", "debug": "keccac_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\nUDiv(storage_keccac_calldata_RaceToken_4,_256): 0x8000000000000000000000000000000000000000000000000000000000000000\nstorage_keccac_calldata_RaceToken_4: 0x67f3dfbe7fed6efefdfeffdb37be3f777feeff7af7bff7175bffdd3adeff5fff\nstorage_2: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_RaceToken_4: 0x1\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\nUDiv(storage_keccac_calldata_RaceToken_4,_256): 0x8000000000000000000000000000000000000000000000000000000000000000\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xff00\nstorage_1: 0x1\nstorage_0: 0x0\ncalldata_RaceToken_0: 0x378f83f00000000000000000000000000000000000000000000000000000000\ncalldatasize_RaceToken: 0x4\nstorage_keccac_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\nUDiv(storage_keccac_calldata_RaceToken_4,_256) +\nstorage_keccac_calldata_RaceToken_4: 0x1\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `destroyFashion(uint256,uint16)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/temp/Crypto_Racing-3.sol", "function": "destroyFashion(uint256,uint16)", "lineno": 514, "title": "Integer Overflow ", "type": "Warning"}, {"address": 5328, "code": "    attrs[i", "debug": "calldata_RaceToken_4 + calldata_RaceToken_4: 0x7124aa6000000000000000000000000000000000000000000000000000000001\ncalldata_RaceToken_0: 0xd047d4900000000000000000000000000000000000000000000000000000000\ncalldatasize_RaceToken: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `getFashionsAttrs(uint256[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/temp/Crypto_Racing-3.sol", "function": "getFashionsAttrs(uint256[])", "lineno": 593, "title": "Integer Overflow ", "type": "Warning"}, {"address": 5538, "code": "    attrs[index + 11]", "debug": "The exception is triggered under the following conditions:\n\ncalldata_RaceToken_4 + calldata_RaceToken_4: 0x924923492492492005b6dbb6e00000000000000000000000000000000000000\ncalldata_RaceToken_0 + 36 + calldata_RaceToken_4: 0x0\nstorage_1: 0x0\nstorage_keccac_calldata_RaceToken_0_+_36_+_calldata_RaceToken_4: 0xffffffffffffffffffffffffffffffffffffffff00\ncalldata_RaceToken_0: 0xd047d4900000000000000000000000000000000000000000000000000000000\ncalldatasize_RaceToken: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/temp/Crypto_Racing-3.sol", "function": "getFashionsAttrs(uint256[])", "lineno": 598, "title": "Exception state", "type": "Informational"}, {"address": 5587, "code": "          at", "debug": "The exception is triggered under the following conditions:\n\ncalldata_RaceToken_4 + calldata_RaceToken_4: 0x6db6db6db6db6db6db6db6db6db6db6db6db6db6db6db6db6db6db6db6db6db7\ncalldata_RaceToken_32 + 36 + calldata_RaceToken_4: 0x0\nstorage_1: 0x1\nstorage_keccac_calldata_RaceToken_32_+_36_+_calldata_RaceToken_4: 0xffffffffffffffffffffffffffffffffffffffff00\nstorage_keccac_calldata_RaceToken_0_+_36_+_calldata_RaceToken_4: 0x0\ncalldata_RaceToken_0: 0xd047d4900000000000000000000000000000000000000000000000000000000\ncalldatasize_RaceToken: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/temp/Crypto_Racing-3.sol", "function": "getFashionsAttrs(uint256[])", "lineno": 599, "title": "Exception state", "type": "Informational"}, {"address": 5695, "code": ";  \n            ", "debug": "The exception is triggered under the following conditions:\n\ncalldata_RaceToken_4 + calldata_RaceToken_4: 0x6db6db6db6db6db6db6db6db6db6db6db6db6db6db6db6db6db6db6db6db6db7\ncalldata_RaceToken_0 + 36 + calldata_RaceToken_4: 0x0\nstorage_1: 0x1\nstorage_keccac_calldata_RaceToken_0_+_36_+_calldata_RaceToken_4: 0xffffffffffffffffffffffffffffffffffffffff00\ncalldata_RaceToken_0: 0xd047d4900000000000000000000000000000000000000000000000000000000\ncalldatasize_RaceToken: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/temp/Crypto_Racing-3.sol", "function": "getFashionsAttrs(uint256[])", "lineno": 600, "title": "Exception state", "type": "Informational"}, {"address": 5803, "debug": "The exception is triggered under the following conditions:\n\ncalldata_RaceToken_4 + calldata_RaceToken_4: 0x5b6db6db6db6db6db6db6db6db6db6db6db6db6db6db6db6db6db6db6db6db6e\ncalldata_RaceToken_0 + 36 + calldata_RaceToken_4: 0x0\nstorage_1: 0x1\nstorage_keccac_calldata_RaceToken_0_+_36_+_calldata_RaceToken_4: 0xffffffffffffffffffffffffffffffffffffffff00\ncalldata_RaceToken_0: 0xd047d4900000000000000000000000000000000000000000000000000000000\ncalldatasize_RaceToken: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/temp/Crypto_Racing-3.sol", "function": "getFashionsAttrs(uint256[])", "lineno": 604, "title": "Exception state", "type": "Informational"}, {"address": 5911, "debug": "The exception is triggered under the following conditions:\n\ncalldata_RaceToken_4 + calldata_RaceToken_4: 0x4924924924924924924924924924924924924924924924924924924924924925\ncalldata_RaceToken_0 + 36 + calldata_RaceToken_4: 0x0\nstorage_1: 0x1\nstorage_keccac_calldata_RaceToken_0_+_36_+_calldata_RaceToken_4: 0xffffffffffffffffffffffffffffffffffffffff00\ncalldata_RaceToken_0: 0xd047d4900000000000000000000000000000000000000000000000000000000\ncalldatasize_RaceToken: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/temp/Crypto_Racing-3.sol", "function": "getFashionsAttrs(uint256[])", "lineno": 604, "title": "Exception state", "type": "Informational"}, {"address": 6650, "code": "!= address(0)) {\n       ", "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_RaceToken_4 +\n0: 0x0\nstorage_1: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_RaceToken_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_RaceToken_4: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_RaceToken_0: 0x15de460700000000000000000000000000000000000000000000000000000000\ncalldatasize_RaceToken: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/temp/Crypto_Racing-3.sol", "function": "getOwnFashions(address)", "lineno": 584, "title": "Exception state", "type": "Informational"}, {"address": 6754, "code": "= i * 14", "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_RaceToken_4 +\n0: 0x0\nstorage_1: 0x1\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_RaceToken_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_RaceToken_4: 0xffffffffffffffffffffffffffffffffffffffff\ncalldata_RaceToken_0: 0x15de460700000000000000000000000000000000000000000000000000000000\ncalldatasize_RaceToken: 0x4\nmem_128 +\n32 +\n32*\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_RaceToken_4: 0x0\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/temp/Crypto_Racing-3.sol", "function": "getOwnFashions(address)", "lineno": 585, "title": "Exception state", "type": "Informational"}, {"address": 8328, "code": "on getOwnFashions(addr", "debug": "The exception is triggered under the following conditions:\n\nstorage_1: 0x1\ncalldata_RaceToken_4: 0x1\nstorage_keccac_calldata_RaceToken_4: 0xffffffffffffffffffffffffffffffffffffffff00\ncalldata_RaceToken_0: 0x425189e000000000000000000000000000000000000000000000000000000000\ncalldatasize_RaceToken: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/temp/Crypto_Racing-3.sol", "function": "getFashion(uint256)", "lineno": 562, "title": "Exception state", "type": "Informational"}, {"address": 14500, "code": "fashionIdToOwnerIn", "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_calldata_RaceToken_4: 0xc00000000000000000000000000000000000000000\ncalldata_RaceToken_4: 0x1\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\nUDiv(storage_keccac_calldata_RaceToken_4,_256): 0xc00000000000000000000000000000000000000000\ncalldata_RaceToken_32 + 4: 0x4000000000000000000000000000000000000000\nstorage_1: 0x1\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xff00\nstorage_0: 0x0\ncalldata_RaceToken_0: 0x18ad052b00000000000000000000000000000000000000000000000000000000\ncalldatasize_RaceToken: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/temp/Crypto_Racing-3.sol", "function": "safeTransferByContract(uint256,address)", "lineno": 309, "title": "Exception state", "type": "Informational"}, {"address": 16940, "code": "ashion {\n        uint16 equipmentId;             // 0  Equipment ID\n        uint16 quality;     \t        // 1  Rarity: 1 Coarse/2 Good/3 Rare/4 Epic/5 Legendary  If car  /1 T1 /2 T2 /3 T3 /4 T4 /5 T5 /6 T6  /7 free\n        uint16 pos;         \t        // 2  Slots: 1 Engine/2 Turbine/3 BodySystem/4 Pipe/5 Suspension/6 NO2/7 Tyre/8 Transmission/9 Car\n        uint16 production;    \t        // 3  Race bonus productivity\n        uint16 attack;\t                // 4  Attack\n        uint16 defense;                 // 5  Defense\n        uint16 plunder;     \t        // 6  Plunder\n        uint16 productionMultiplier;    // 7  Percent value\n        uint16 attackMultiplier;     \t// 8  Percent value\n        uint16 defenseMultiplier;     \t// 9  Percent value\n        uint16 plunderMultiplier;     \t// 10 Percent value\n        uint16 level;       \t        // 11 level\n        uint16 isPercent;   \t        // 12  Percent value\n    }\n\n    /// @dev All equipments tokenArray (not exceeding 2^32-1)\n    Fashion[] public fashionArray;\n\n    /// @dev Amount of tokens destroyed\n    uint256 destroyFashionCount;\n\n    /// @dev Equipment token ID belong to owner address\n    mapping (uint256 => address) fashionIdToOwner;\n\n    /// @dev Equipments owner by the owner (array)\n    mapping (address => uint256[]) ownerToFashionArray;\n\n    /// @dev Equipment token ID search in owner array\n    mapping (uint256 => uint256) fashionIdToOwnerIndex;\n\n    /// @dev The authorized address for each Race\n    mapping (uint256 => address) fashionIdToApprovals;\n\n    /// @dev The authorized operators for each address\n    mapping (address => mapping (address => bool)) operatorToApprovals;\n\n    /// @dev Trust contract\n    mapping (address => bool) actionContracts;\n\n\t\n    function setActionContract(address _actionAddr, bool _useful) external onlyAdmin {\n        actionContracts[_actionAddr] = _useful;\n    }\n\n    function getActionContract(address _actionAddr) external view onlyAdmin returns(bool) {\n        return actionContracts[_actionAddr];\n    }\n\n    /// @dev This emits when the approved address for an Race is changed or reaffirmed.\n    event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\n\n    /// @dev This emits when an operator is enabled or disabled for an owner.\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\n\n    /// @dev This emits when the equipment ownership changed \n    event Transfer(address indexed from, address indexed to, uint256 tokenId);\n\n    /// @dev This emits when the equipment created\n    event CreateFashion(address indexed owner, uint256 tokenId, uint16 equipmentId, uint16 quality, uint16 pos, uint16 level, uint16 createType);\n\n    /// @dev This emits when the equipment's attributes changed\n    event ChangeFashion(address indexed owner, uint256 tokenId, uint16 changeType);\n\n    /// @dev This emits when the equipment destroyed\n    event DeleteFashion(address indexed owner, uint256 tokenId, uint16 deleteType);\n    \n    function RaceToken() public {\n        addrAdmin = msg.sender;\n        fashionArray.length += 1;\n    }\n\n    // modifier\n    /// @dev Check if token ID is valid\n    modifier isValidToken(uint256 _tokenId) {\n        require(_tokenId >= 1 && _tokenId <= fashionArray.length);\n        require(fashionIdToOwner[_tokenId] != address(0)); \n        _;\n    }\n\n    modifier canTransfer(uint256 _tokenId) {\n        address owner = fashionIdToOwner[_tokenId];\n        require(msg.sender == owner || msg.sender == fashionIdToApprovals[_tokenId] || operatorToApprovals[owner][msg.sender]);\n        _;\n    }\n\n    // ERC721\n    function supportsInterface(bytes4 _interfaceId) external view returns(bool) {\n        // ERC165 || ERC721 || ERC165^ERC721\n        return (_interfaceId == 0x01ffc9a7 || _interfaceId == 0x80ac58cd || _interfaceId == 0x8153916a) && (_interfaceId != 0xffffffff);\n    }\n        \n    function name() public pure returns(string) {\n        return \"Race Token\";\n    }\n\n    function symbol() public pure returns(string) {\n        return \"Race\";\n    }\n\n    /// @dev Search for token quantity address\n    /// @param _owner Address that needs to be searched\n    /// @return Returns token quantity\n    function balanceOf(address _owner) external view returns(uint256) {\n        require(_owner != address(0));\n        return ownerToFashionArray[_owner].length;\n    }\n\n    /// @dev Find the owner of an Race\n    /// @param _tokenId The tokenId of Race\n    /// @return Give The address of the owner of this Race\n    function ownerOf(uint256 _tokenId) external view /*isValidToken(_tokenId)*/ returns (address owner) {\n        return fashionIdToOwner[_tokenId];\n    }\n\n    /// @dev Transfers the ownership of an Race from one address to another address\n    /// @param _from The current owner of the Race\n    /// @param _to The new owner\n    /// @param _tokenId The Race to transfer\n    /// @param data Additional data with no specified format, sent in call to `_to`\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes data) \n        external\n        whenNotPaused\n    {\n        _safeTransferFrom(_from, _to, _tokenId, data);\n    }\n\n    /// @dev Transfers the ownership of an Race from one address to another address\n    /// @param _from The current owner of the Race\n    /// @param _to The new owner\n    /// @param _tokenId The Race to transfer\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) \n        external\n        whenNotPaused\n    {\n        _safeTransferFrom(_from, _to, _tokenId, \"\");\n    }\n\n    /// @dev Transfer ownership of an Race, '_to' must be a vaild address, or the Race will lost\n    /// @param _from The current owner of the Race\n    /// @param _to The new owner\n    /// @param _tokenId The Race to transfer\n    function transferFrom(address _from, address _to, uint256 _tokenId)\n        external\n        whenNotPaused\n        isValidToken(_tokenId)\n        canTransfer(_tokenId)\n    {\n        address owner = fashionIdToOwner[_tokenId];\n        require(owner != address(0));\n        require(_to != address(0));\n        require(owner == _from);\n        \n        _transfer(_from, _to, _tokenId);\n    }\n\n    /// @dev Set or reaffirm the approved address for an Race\n    /// @param _approved The new approved Race controller\n    /// @param _tokenId The Race to approve\n    function approve(address _approved, uint256 _tokenId)\n        external\n        whenNotPaused\n    {\n        address owner = fashionIdToOwner[_tokenId];\n        require(owner != address(0));\n        require(msg.sender == owner || operatorToApprovals[owner][msg.sender]);\n\n        fashionIdToApprovals[_tokenId] = _approved;\n        Approval(owner, _approved, _tokenId);\n    }\n\n    /// @dev Enable or disable approval for a third party (\"operator\") to manage all your asset.\n    /// @param _operator Address to add to the set of authorized operators.\n    /// @param _approved True if the operators is approved, false to revoke approval\n    function setApprovalForAll(address _operator, bool _approved) \n        external \n        whenNotPaused\n    {\n        operatorToApprovals[msg.sender][_operator] = _approved;\n        ApprovalForAll(msg.sender, _operator, _approved);\n    }\n\n    /// @dev Get the approved address for a single Race\n    /// @param _tokenId The Race to find the approved address for\n    /// @return The approved address for this Race, or the zero address if there is none\n    function getApproved(uint256 _tokenId) external view isValidToken(_tokenId) returns (address) {\n        return fashionIdToApprovals[_tokenId];\n    }\n\n    /// @dev Query if an address is an authorized operator for another address\n    /// @param _owner The address that owns the Races\n    /// @param _operator The address that acts on behalf of the owner\n    /// @return True if `_operator` is an approved operator for `_owner`, false otherwise\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool) {\n        return operatorToApprovals[_owner][_operator];\n    }\n\n    /// @dev Count Races tracked by this contract\n    /// @return A count of valid Races tracked by this contract, where each one of\n    ///  them has an assigned and queryable owner not equal to the zero address\n    function totalSupply() external view returns (uint256) {\n        return fashionArray.length - destroyFashionCount - 1;\n    }\n\n    /// @dev Do the real transfer with out any condition checking\n    /// @param _from The old owner of this Race(If created: 0x0)\n    /// @param _to The new owner of this Race \n    /// @param _tokenId The tokenId of the Race\n    function _transfer(address _from, address _to, uint256 _tokenId) internal {\n        if (_from != address(0)) {\n            uint256 indexFrom = fashionIdToOwnerIndex[_tokenId];\n            uint256[] storage fsArray = ownerToFashionArray[_from];\n            require(fsArray[indexFrom] == _tokenId);\n\n            // If the Race is not the element of array, change it to with the last\n            if (indexFrom != fsArray.length - 1) {\n                uint256 lastTokenId = fsArray[fsArray.length - 1];\n                fsArray[indexFrom] = lastTokenId; \n                fashionIdToOwnerIndex[lastTokenId] = indexFrom;\n            }\n            fsArray.length -= 1; \n            \n            if (fashionIdToApprovals[_tokenId] != address(0)) {\n                delete fashionIdToApprovals[_tokenId];\n            }      \n        }\n\n        // Give the Race to '_to'\n        fashionIdToOwner[_tokenId] = _to;\n        ownerToFashionArray[_to].push(_tokenId);\n        fashionIdToOwnerIndex[_tokenId] = ownerToFashionArray[_to].length - 1;\n        \n        Transfer(_from != address(0) ? _from : this, _to, _tokenId);\n    }\n\n    /// @dev Actually perform the safeTransferFrom\n    function _safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes data) \n        internal\n        isValidToken(_tokenId) \n        canTransfer(_tokenId)\n    {\n        address owner = fashionIdToOwner[_tokenId];\n        require(owner != address(0));\n        require(_to != address(0));\n        require(owner == _from);\n        \n        _transfer(_from, _to, _tokenId);\n\n        // Do the callback after everything is done to avoid reentrancy attack\n        uint256 codeSize;\n        assembly { codeSize := extcodesize(_to) }\n        if (codeSize == 0) {\n            return;\n        }\n        bytes4 retval = ERC721TokenReceiver(_to).onERC721Received(_from, _tokenId, data);\n        // bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\")) = 0xf0b9e5ba;\n        require(retval == 0xf0b9e5ba);\n    }\n\n    //----------------------------------------------------------------------------------------------------------\n\n    /// @dev Equipment creation\n    /// @param _owner Owner of the equipment created\n    /// @param _attrs Attributes of the equipment created\n    /// @return Token ID of the equipment created\n    function createFashion(address _owner, uint16[13] _attrs, uint16 _createType) \n        external \n        whenNotPaused\n        returns(uint256)\n    {\n        require(actionContracts[msg.sender]);\n        require(_owner != address(0));\n\n        uint256 newFashionId = fashionArray.length;\n        require(newFashionId < 4294967296);\n\n        fashionArray.length += 1;\n        Fashion storage fs = fashionArray[newFashionId];\n        fs.equipmentId = _attrs[0];\n        fs.quality = _attrs[1];\n        fs.pos = _attrs[2];\n        if (_attrs[3] != 0) {\n            fs.production = _attrs[3];\n        }\n        \n        if (_attrs[4] != 0) {\n            fs.attack = _attrs[4];\n        }\n\t\t\n\t\tif (_attrs[5] != 0) {\n            fs.defense = _attrs[5];\n        }\n       \n        if (_attrs[6] != 0) {\n            fs.plunder = _attrs[6];\n        }\n        \n        if (_attrs[7] != 0) {\n            fs.productionMultiplier = _attrs[7];\n        }\n\n        if (_attrs[8] != 0) {\n            fs.attackMultiplier = _attrs[8];\n        }\n\n        if (_attrs[9] != 0) {\n            fs.defenseMultiplier = _attrs[9];\n        }\n\n        if (_attrs[10] != 0) {\n            fs.plunderMultiplier = _attrs[10];\n        }\n\n        if (_attrs[11] != 0) {\n            fs.level = _attrs[11];\n        }\n\n        if (_attrs[12] != 0) {\n            fs.isPercent = _attrs[12];\n        }\n        \n        _transfer(0, _owner, newFashionId);\n        CreateFashion(_owner, newFashionId, _attrs[0], _attrs[1], _attrs[2], _attrs[11], _createType);\n        return newFashionId;\n    }\n\n    /// @dev One specific attribute of the equipment modified\n    function _changeAttrByIndex(Fashion storage _fs, uint16 _index, uint16 _val) internal {\n        if (_index == 3) {\n            _fs.production = _val;\n        } else if(_index == 4) {\n            _fs.attack = _val;\n        } else if(_index == 5) {\n            _fs.defense = _val;\n        } else if(_index == 6) {\n            _fs.plunder = _val;\n        }else if(_index == 7) {\n            _fs.productionMultiplier = _val;\n        }else if(_index == 8) {\n            _fs.attackMultiplier = _val;\n        }else if(_index == 9) {\n            _fs.defenseMultiplier = _val;\n        }else if(_index == 10) {\n            _fs.plunderMultiplier = _val;\n        } else if(_index == 11) {\n            _fs.level = _val;\n        } \n       \n    }\n\n    /// @dev Equiment attributes modified (max 4 stats modified)\n    /// @param _tokenId Equipment Token ID\n    /// @param _idxArray Stats order that must be modified\n    /// @param _params Stat value that must be modified\n    /// @param _changeType Modification type such as enhance, socket, etc.\n    function changeFashionAttr(uint256 _tokenId, uint16[4] _idxArray, uint16[4] _params, uint16 _changeType) \n        external \n        whenNotPaused\n        isValidToken(_tokenId) \n    {\n        require(actionContracts[msg.sender]);\n\n        Fashion storage fs = fashionArray[_tokenId];\n        if (_idxArray[0] > 0) {\n            _changeAttrByIndex(fs, _idxArray[0], _params[0]);\n        }\n\n        if (_idxArray[1] > 0) {\n            _changeAttrByIndex(fs, _idxArray[1], _params[1]);\n        }\n\n        if (_idxArray[2] > 0) {\n            _changeAttrByIndex(fs, _idxArray[2], _params[2]);\n        }\n\n        if (_idxArray[3] > 0) {\n            _changeAttrByIndex(fs, _idxArray[3], _params[3]);\n        }\n\n        ChangeFashion(fashionIdToOwner[_tokenId], _tokenId, _changeType);\n    }\n\n    /// @dev Equipment destruction\n    /// @param _tokenId Equipment Token ID\n    /// @param _deleteType Destruction type, such as craft\n    function destroyFashion(uint256 _tokenId, uint16 _deleteType)\n        external \n        whenNotPaused\n        isValidToken(_tokenId) \n    {\n        require(actionContracts[msg.sender]);\n\n        address _from = fashionIdToOwner[_tokenId];\n        uint256 indexFrom = fashionIdToOwnerIndex[_tokenId];\n        uint256[] storage fsArray = ownerToFashionArray[_from]; \n        require(fsArray[indexFrom] == _tokenId);\n\n        if (indexFrom != fsArray.length - 1) {\n            uint256 lastTokenId = fsArray[fsArray.length - 1];\n            fsArray[indexFrom] = lastTokenId; \n            fashionIdToOwnerIndex[lastTokenId] = indexFrom;\n        }\n        fsArray.length -= 1; \n\n        fashionIdToOwner[_tokenId] = address(0);\n        delete fashionIdToOwnerIndex[_tokenId];\n        destroyFashionCount += 1;\n\n        Transfer(_from, 0, _tokenId);\n\n        DeleteFashion(_from, _tokenId, _deleteType);\n    }\n\n    /// @dev Safe transfer by trust contracts\n    function safeTransferByContract(uint256 _tokenId, address _to) \n        external\n        whenNotPaused\n    {\n        require(actionContracts[msg.sender]);\n\n        require(_tokenId >= 1 && _tokenId <= fashionArray.length);\n        address owner = fashionIdToOwner[_tokenId];\n        require(owner != address(0));\n        require(_to != address(0));\n        require(owner != _to);\n\n        _transfer(owner, _to, _tokenId);\n    }\n\n    //----------------------------------------------------------------------------------------------------------\n\n\n    /// @dev Get fashion attrs by tokenId front\n    function getFashionFront(uint256 _tokenId) external view isValidToken(_tokenId) returns (uint256[14] datas) {\n        Fashion storage fs = fashionArray[_tokenId];\n        datas[0] = fs.equipmentId;\n        datas[1] = fs.quality;\n        datas[2] = fs.pos;\n        datas[3] = fs.production;\n        datas[4] = fs.attack;\n        datas[5] = fs.defense;\n        datas[6] = fs.plunder;\n        datas[7] = fs.productionMultiplier;\n        datas[8] = fs.attackMultiplier;\n        datas[9] = fs.defenseMultiplier;\n        datas[10] = fs.plunderMultiplier;\n        datas[11] = fs.level;\n        datas[12] = fs.isPercent; \n        datas[13] = _tokenId;      \n    }\n\n    /// @dev Get fashion attrs by tokenId back\n    function getFashion(uint256 _tokenId) external view isValidToken(_tokenId) returns (uint16[13] datas) {\n        Fashion storage fs = fashionArray[_tokenId];\n        datas[0] = fs.equipmentId;\n        datas[1] = fs.quality;\n        datas[2] = fs.pos;\n        datas[3] = fs.production;\n        datas[4] = fs.attack;\n        datas[5] = fs.defense;\n        datas[6] = fs.plunder;\n        datas[7] = fs.productionMultiplier;\n        datas[8] = fs.attackMultiplier;\n        datas[9] = fs.defenseMultiplier;\n        datas[10] = fs.plunderMultiplier;\n        datas[11] = fs.level;\n        datas[12] = fs.isPercent;      \n    }\n\n\n    /// @dev Get tokenIds and flags by owner\n    function getOwnFashions(address _owner) external view returns(uint256[] tokens, uint32[] flags) {\n        require(_owner != address(0));\n        uint256[] storage fsArray = ownerToFashionArray[_owner];\n        uint256 length = fsArray.length;\n        tokens = new uint256[](length);\n        flags = new uint32[](length);\n        for (uint256 i = 0; i < length; ++i) {\n            tokens[i] = fsArray[i];\n            Fashion storage fs = fashionArray[fsArray[i]];\n            flags[i] = uint32(uint32(fs.equipmentId) * 10000 + uint32(fs.quality) * 100 + fs.pos);\n        }\n    }\n\n\n    /// @dev Race token info returned based on Token ID transfered (64 at most)\n    function getFashionsAttrs(uint256[] _tokens) external view returns(uint256[] attrs) {\n        uint256 length = _tokens.length;\n        attrs = new uint256[](length * 14);\n        uint256 tokenId;\n        uint256 index;\n        for (uint256 i = 0; i < length; ++i) {\n            tokenId = _tokens[i];\n            if (fashionIdToOwner[tokenId] != address(0)) {\n                index = i * 14;\n                Fashion storage fs = fashionArray[tokenId];\n                attrs[index]     = fs.equipmentId;\n\t\t\t\tattrs[index + 1] = fs.quality;\n                attrs[index + 2] = fs.pos;\n                attrs[index + 3] = fs.production;\n                attrs[index + 4] = fs.attack;\n                attrs[index + 5] = fs.defense;\n                attrs[index + 6] = fs.plunder;\n                attrs[index + 7] = fs.productionMultiplier;\n                attrs[index + 8] = fs.attackMultiplier;\n                attrs[index + 9] = fs.defenseMultiplier;\n                attrs[index + 10] = fs.plunderMultiplier;\n                attrs[index + 11] = fs.level;\n                attrs[index + 12] = fs.isPercent; \n                attrs[index + 13] = tokenId;  \n            }   \n        }\n    }\n}", "debug": "keccac_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\nUDiv(storage_keccac_calldata_RaceToken_4,_256): 0xaf8f21000c005052ccba529d8f4f1c76d3b0eba5affb52fe701f4cc5147ab845\nstorage_keccac_calldata_RaceToken_4: 0x821e20130500020dfc0860be6f1fdaf17c1f608f9ff5ee7942685f32d80ffa2e\ncalldata_RaceToken_4: 0x1\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\nUDiv(storage_keccac_calldata_RaceToken_4,_256): 0xc04c2613080011095c7a50dda12f4f24f93149c32ff00271536200765840f845\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xff00\nstorage_1: 0x1\nstorage_0: 0x0\ncalldata_RaceToken_0: 0x378f83f00000000000000000000000000000000000000000000000000000000\ncalldatasize_RaceToken: 0x4\nstorage_keccac_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\nUDiv(storage_keccac_calldata_RaceToken_4,_256) +\nstorage_keccac_calldata_RaceToken_4: 0x1\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `destroyFashion(uint256,uint16)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/temp/Crypto_Racing-3.sol", "function": "destroyFashion(uint256,uint16)", "lineno": 91, "title": "Integer Overflow ", "type": "Warning"}, {"address": 16942, "code": "ashion {\n        uint16 equipmentId;             // 0  Equipment ID\n        uint16 quality;     \t        // 1  Rarity: 1 Coarse/2 Good/3 Rare/4 Epic/5 Legendary  If car  /1 T1 /2 T2 /3 T3 /4 T4 /5 T5 /6 T6  /7 free\n        uint16 pos;         \t        // 2  Slots: 1 Engine/2 Turbine/3 BodySystem/4 Pipe/5 Suspension/6 NO2/7 Tyre/8 Transmission/9 Car\n        uint16 production;    \t        // 3  Race bonus productivity\n        uint16 attack;\t                // 4  Attack\n        uint16 defense;                 // 5  Defense\n        uint16 plunder;     \t        // 6  Plunder\n        uint16 productionMultiplier;    // 7  Percent value\n        uint16 attackMultiplier;     \t// 8  Percent value\n        uint16 defenseMultiplier;     \t// 9  Percent value\n        uint16 plunderMultiplier;     \t// 10 Percent value\n        uint16 level;       \t        // 11 level\n        uint16 isPercent;   \t        // 12  Percent value\n    }\n\n    /// @dev All equipments tokenArray (not exceeding 2^32-1)\n    Fashion[] public fashionArray;\n\n    /// @dev Amount of tokens destroyed\n    uint256 destroyFashionCount;\n\n    /// @dev Equipment token ID belong to owner address\n    mapping (uint256 => address) fashionIdToOwner;\n\n    /// @dev Equipments owner by the owner (array)\n    mapping (address => uint256[]) ownerToFashionArray;\n\n    /// @dev Equipment token ID search in owner array\n    mapping (uint256 => uint256) fashionIdToOwnerIndex;\n\n    /// @dev The authorized address for each Race\n    mapping (uint256 => address) fashionIdToApprovals;\n\n    /// @dev The authorized operators for each address\n    mapping (address => mapping (address => bool)) operatorToApprovals;\n\n    /// @dev Trust contract\n    mapping (address => bool) actionContracts;\n\n\t\n    function setActionContract(address _actionAddr, bool _useful) external onlyAdmin {\n        actionContracts[_actionAddr] = _useful;\n    }\n\n    function getActionContract(address _actionAddr) external view onlyAdmin returns(bool) {\n        return actionContracts[_actionAddr];\n    }\n\n    /// @dev This emits when the approved address for an Race is changed or reaffirmed.\n    event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\n\n    /// @dev This emits when an operator is enabled or disabled for an owner.\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\n\n    /// @dev This emits when the equipment ownership changed \n    event Transfer(address indexed from, address indexed to, uint256 tokenId);\n\n    /// @dev This emits when the equipment created\n    event CreateFashion(address indexed owner, uint256 tokenId, uint16 equipmentId, uint16 quality, uint16 pos, uint16 level, uint16 createType);\n\n    /// @dev This emits when the equipment's attributes changed\n    event ChangeFashion(address indexed owner, uint256 tokenId, uint16 changeType);\n\n    /// @dev This emits when the equipment destroyed\n    event DeleteFashion(address indexed owner, uint256 tokenId, uint16 deleteType);\n    \n    function RaceToken() public {\n        addrAdmin = msg.sender;\n        fashionArray.length += 1;\n    }\n\n    // modifier\n    /// @dev Check if token ID is valid\n    modifier isValidToken(uint256 _tokenId) {\n        require(_tokenId >= 1 && _tokenId <= fashionArray.length);\n        require(fashionIdToOwner[_tokenId] != address(0)); \n        _;\n    }\n\n    modifier canTransfer(uint256 _tokenId) {\n        address owner = fashionIdToOwner[_tokenId];\n        require(msg.sender == owner || msg.sender == fashionIdToApprovals[_tokenId] || operatorToApprovals[owner][msg.sender]);\n        _;\n    }\n\n    // ERC721\n    function supportsInterface(bytes4 _interfaceId) external view returns(bool) {\n        // ERC165 || ERC721 || ERC165^ERC721\n        return (_interfaceId == 0x01ffc9a7 || _interfaceId == 0x80ac58cd || _interfaceId == 0x8153916a) && (_interfaceId != 0xffffffff);\n    }\n        \n    function name() public pure returns(string) {\n        return \"Race Token\";\n    }\n\n    function symbol() public pure returns(string) {\n        return \"Race\";\n    }\n\n    /// @dev Search for token quantity address\n    /// @param _owner Address that needs to be searched\n    /// @return Returns token quantity\n    function balanceOf(address _owner) external view returns(uint256) {\n        require(_owner != address(0));\n        return ownerToFashionArray[_owner].length;\n    }\n\n    /// @dev Find the owner of an Race\n    /// @param _tokenId The tokenId of Race\n    /// @return Give The address of the owner of this Race\n    function ownerOf(uint256 _tokenId) external view /*isValidToken(_tokenId)*/ returns (address owner) {\n        return fashionIdToOwner[_tokenId];\n    }\n\n    /// @dev Transfers the ownership of an Race from one address to another address\n    /// @param _from The current owner of the Race\n    /// @param _to The new owner\n    /// @param _tokenId The Race to transfer\n    /// @param data Additional data with no specified format, sent in call to `_to`\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes data) \n        external\n        whenNotPaused\n    {\n        _safeTransferFrom(_from, _to, _tokenId, data);\n    }\n\n    /// @dev Transfers the ownership of an Race from one address to another address\n    /// @param _from The current owner of the Race\n    /// @param _to The new owner\n    /// @param _tokenId The Race to transfer\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) \n        external\n        whenNotPaused\n    {\n        _safeTransferFrom(_from, _to, _tokenId, \"\");\n    }\n\n    /// @dev Transfer ownership of an Race, '_to' must be a vaild address, or the Race will lost\n    /// @param _from The current owner of the Race\n    /// @param _to The new owner\n    /// @param _tokenId The Race to transfer\n    function transferFrom(address _from, address _to, uint256 _tokenId)\n        external\n        whenNotPaused\n        isValidToken(_tokenId)\n        canTransfer(_tokenId)\n    {\n        address owner = fashionIdToOwner[_tokenId];\n        require(owner != address(0));\n        require(_to != address(0));\n        require(owner == _from);\n        \n        _transfer(_from, _to, _tokenId);\n    }\n\n    /// @dev Set or reaffirm the approved address for an Race\n    /// @param _approved The new approved Race controller\n    /// @param _tokenId The Race to approve\n    function approve(address _approved, uint256 _tokenId)\n        external\n        whenNotPaused\n    {\n        address owner = fashionIdToOwner[_tokenId];\n        require(owner != address(0));\n        require(msg.sender == owner || operatorToApprovals[owner][msg.sender]);\n\n        fashionIdToApprovals[_tokenId] = _approved;\n        Approval(owner, _approved, _tokenId);\n    }\n\n    /// @dev Enable or disable approval for a third party (\"operator\") to manage all your asset.\n    /// @param _operator Address to add to the set of authorized operators.\n    /// @param _approved True if the operators is approved, false to revoke approval\n    function setApprovalForAll(address _operator, bool _approved) \n        external \n        whenNotPaused\n    {\n        operatorToApprovals[msg.sender][_operator] = _approved;\n        ApprovalForAll(msg.sender, _operator, _approved);\n    }\n\n    /// @dev Get the approved address for a single Race\n    /// @param _tokenId The Race to find the approved address for\n    /// @return The approved address for this Race, or the zero address if there is none\n    function getApproved(uint256 _tokenId) external view isValidToken(_tokenId) returns (address) {\n        return fashionIdToApprovals[_tokenId];\n    }\n\n    /// @dev Query if an address is an authorized operator for another address\n    /// @param _owner The address that owns the Races\n    /// @param _operator The address that acts on behalf of the owner\n    /// @return True if `_operator` is an approved operator for `_owner`, false otherwise\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool) {\n        return operatorToApprovals[_owner][_operator];\n    }\n\n    /// @dev Count Races tracked by this contract\n    /// @return A count of valid Races tracked by this contract, where each one of\n    ///  them has an assigned and queryable owner not equal to the zero address\n    function totalSupply() external view returns (uint256) {\n        return fashionArray.length - destroyFashionCount - 1;\n    }\n\n    /// @dev Do the real transfer with out any condition checking\n    /// @param _from The old owner of this Race(If created: 0x0)\n    /// @param _to The new owner of this Race \n    /// @param _tokenId The tokenId of the Race\n    function _transfer(address _from, address _to, uint256 _tokenId) internal {\n        if (_from != address(0)) {\n            uint256 indexFrom = fashionIdToOwnerIndex[_tokenId];\n            uint256[] storage fsArray = ownerToFashionArray[_from];\n            require(fsArray[indexFrom] == _tokenId);\n\n            // If the Race is not the element of array, change it to with the last\n            if (indexFrom != fsArray.length - 1) {\n                uint256 lastTokenId = fsArray[fsArray.length - 1];\n                fsArray[indexFrom] = lastTokenId; \n                fashionIdToOwnerIndex[lastTokenId] = indexFrom;\n            }\n            fsArray.length -= 1; \n            \n            if (fashionIdToApprovals[_tokenId] != address(0)) {\n                delete fashionIdToApprovals[_tokenId];\n            }      \n        }\n\n        // Give the Race to '_to'\n        fashionIdToOwner[_tokenId] = _to;\n        ownerToFashionArray[_to].push(_tokenId);\n        fashionIdToOwnerIndex[_tokenId] = ownerToFashionArray[_to].length - 1;\n        \n        Transfer(_from != address(0) ? _from : this, _to, _tokenId);\n    }\n\n    /// @dev Actually perform the safeTransferFrom\n    function _safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes data) \n        internal\n        isValidToken(_tokenId) \n        canTransfer(_tokenId)\n    {\n        address owner = fashionIdToOwner[_tokenId];\n        require(owner != address(0));\n        require(_to != address(0));\n        require(owner == _from);\n        \n        _transfer(_from, _to, _tokenId);\n\n        // Do the callback after everything is done to avoid reentrancy attack\n        uint256 codeSize;\n        assembly { codeSize := extcodesize(_to) }\n        if (codeSize == 0) {\n            return;\n        }\n        bytes4 retval = ERC721TokenReceiver(_to).onERC721Received(_from, _tokenId, data);\n        // bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\")) = 0xf0b9e5ba;\n        require(retval == 0xf0b9e5ba);\n    }\n\n    //----------------------------------------------------------------------------------------------------------\n\n    /// @dev Equipment creation\n    /// @param _owner Owner of the equipment created\n    /// @param _attrs Attributes of the equipment created\n    /// @return Token ID of the equipment created\n    function createFashion(address _owner, uint16[13] _attrs, uint16 _createType) \n        external \n        whenNotPaused\n        returns(uint256)\n    {\n        require(actionContracts[msg.sender]);\n        require(_owner != address(0));\n\n        uint256 newFashionId = fashionArray.length;\n        require(newFashionId < 4294967296);\n\n        fashionArray.length += 1;\n        Fashion storage fs = fashionArray[newFashionId];\n        fs.equipmentId = _attrs[0];\n        fs.quality = _attrs[1];\n        fs.pos = _attrs[2];\n        if (_attrs[3] != 0) {\n            fs.production = _attrs[3];\n        }\n        \n        if (_attrs[4] != 0) {\n            fs.attack = _attrs[4];\n        }\n\t\t\n\t\tif (_attrs[5] != 0) {\n            fs.defense = _attrs[5];\n        }\n       \n        if (_attrs[6] != 0) {\n            fs.plunder = _attrs[6];\n        }\n        \n        if (_attrs[7] != 0) {\n            fs.productionMultiplier = _attrs[7];\n        }\n\n        if (_attrs[8] != 0) {\n            fs.attackMultiplier = _attrs[8];\n        }\n\n        if (_attrs[9] != 0) {\n            fs.defenseMultiplier = _attrs[9];\n        }\n\n        if (_attrs[10] != 0) {\n            fs.plunderMultiplier = _attrs[10];\n        }\n\n        if (_attrs[11] != 0) {\n            fs.level = _attrs[11];\n        }\n\n        if (_attrs[12] != 0) {\n            fs.isPercent = _attrs[12];\n        }\n        \n        _transfer(0, _owner, newFashionId);\n        CreateFashion(_owner, newFashionId, _attrs[0], _attrs[1], _attrs[2], _attrs[11], _createType);\n        return newFashionId;\n    }\n\n    /// @dev One specific attribute of the equipment modified\n    function _changeAttrByIndex(Fashion storage _fs, uint16 _index, uint16 _val) internal {\n        if (_index == 3) {\n            _fs.production = _val;\n        } else if(_index == 4) {\n            _fs.attack = _val;\n        } else if(_index == 5) {\n            _fs.defense = _val;\n        } else if(_index == 6) {\n            _fs.plunder = _val;\n        }else if(_index == 7) {\n            _fs.productionMultiplier = _val;\n        }else if(_index == 8) {\n            _fs.attackMultiplier = _val;\n        }else if(_index == 9) {\n            _fs.defenseMultiplier = _val;\n        }else if(_index == 10) {\n            _fs.plunderMultiplier = _val;\n        } else if(_index == 11) {\n            _fs.level = _val;\n        } \n       \n    }\n\n    /// @dev Equiment attributes modified (max 4 stats modified)\n    /// @param _tokenId Equipment Token ID\n    /// @param _idxArray Stats order that must be modified\n    /// @param _params Stat value that must be modified\n    /// @param _changeType Modification type such as enhance, socket, etc.\n    function changeFashionAttr(uint256 _tokenId, uint16[4] _idxArray, uint16[4] _params, uint16 _changeType) \n        external \n        whenNotPaused\n        isValidToken(_tokenId) \n    {\n        require(actionContracts[msg.sender]);\n\n        Fashion storage fs = fashionArray[_tokenId];\n        if (_idxArray[0] > 0) {\n            _changeAttrByIndex(fs, _idxArray[0], _params[0]);\n        }\n\n        if (_idxArray[1] > 0) {\n            _changeAttrByIndex(fs, _idxArray[1], _params[1]);\n        }\n\n        if (_idxArray[2] > 0) {\n            _changeAttrByIndex(fs, _idxArray[2], _params[2]);\n        }\n\n        if (_idxArray[3] > 0) {\n            _changeAttrByIndex(fs, _idxArray[3], _params[3]);\n        }\n\n        ChangeFashion(fashionIdToOwner[_tokenId], _tokenId, _changeType);\n    }\n\n    /// @dev Equipment destruction\n    /// @param _tokenId Equipment Token ID\n    /// @param _deleteType Destruction type, such as craft\n    function destroyFashion(uint256 _tokenId, uint16 _deleteType)\n        external \n        whenNotPaused\n        isValidToken(_tokenId) \n    {\n        require(actionContracts[msg.sender]);\n\n        address _from = fashionIdToOwner[_tokenId];\n        uint256 indexFrom = fashionIdToOwnerIndex[_tokenId];\n        uint256[] storage fsArray = ownerToFashionArray[_from]; \n        require(fsArray[indexFrom] == _tokenId);\n\n        if (indexFrom != fsArray.length - 1) {\n            uint256 lastTokenId = fsArray[fsArray.length - 1];\n            fsArray[indexFrom] = lastTokenId; \n            fashionIdToOwnerIndex[lastTokenId] = indexFrom;\n        }\n        fsArray.length -= 1; \n\n        fashionIdToOwner[_tokenId] = address(0);\n        delete fashionIdToOwnerIndex[_tokenId];\n        destroyFashionCount += 1;\n\n        Transfer(_from, 0, _tokenId);\n\n        DeleteFashion(_from, _tokenId, _deleteType);\n    }\n\n    /// @dev Safe transfer by trust contracts\n    function safeTransferByContract(uint256 _tokenId, address _to) \n        external\n        whenNotPaused\n    {\n        require(actionContracts[msg.sender]);\n\n        require(_tokenId >= 1 && _tokenId <= fashionArray.length);\n        address owner = fashionIdToOwner[_tokenId];\n        require(owner != address(0));\n        require(_to != address(0));\n        require(owner != _to);\n\n        _transfer(owner, _to, _tokenId);\n    }\n\n    //----------------------------------------------------------------------------------------------------------\n\n\n    /// @dev Get fashion attrs by tokenId front\n    function getFashionFront(uint256 _tokenId) external view isValidToken(_tokenId) returns (uint256[14] datas) {\n        Fashion storage fs = fashionArray[_tokenId];\n        datas[0] = fs.equipmentId;\n        datas[1] = fs.quality;\n        datas[2] = fs.pos;\n        datas[3] = fs.production;\n        datas[4] = fs.attack;\n        datas[5] = fs.defense;\n        datas[6] = fs.plunder;\n        datas[7] = fs.productionMultiplier;\n        datas[8] = fs.attackMultiplier;\n        datas[9] = fs.defenseMultiplier;\n        datas[10] = fs.plunderMultiplier;\n        datas[11] = fs.level;\n        datas[12] = fs.isPercent; \n        datas[13] = _tokenId;      \n    }\n\n    /// @dev Get fashion attrs by tokenId back\n    function getFashion(uint256 _tokenId) external view isValidToken(_tokenId) returns (uint16[13] datas) {\n        Fashion storage fs = fashionArray[_tokenId];\n        datas[0] = fs.equipmentId;\n        datas[1] = fs.quality;\n        datas[2] = fs.pos;\n        datas[3] = fs.production;\n        datas[4] = fs.attack;\n        datas[5] = fs.defense;\n        datas[6] = fs.plunder;\n        datas[7] = fs.productionMultiplier;\n        datas[8] = fs.attackMultiplier;\n        datas[9] = fs.defenseMultiplier;\n        datas[10] = fs.plunderMultiplier;\n        datas[11] = fs.level;\n        datas[12] = fs.isPercent;      \n    }\n\n\n    /// @dev Get tokenIds and flags by owner\n    function getOwnFashions(address _owner) external view returns(uint256[] tokens, uint32[] flags) {\n        require(_owner != address(0));\n        uint256[] storage fsArray = ownerToFashionArray[_owner];\n        uint256 length = fsArray.length;\n        tokens = new uint256[](length);\n        flags = new uint32[](length);\n        for (uint256 i = 0; i < length; ++i) {\n            tokens[i] = fsArray[i];\n            Fashion storage fs = fashionArray[fsArray[i]];\n            flags[i] = uint32(uint32(fs.equipmentId) * 10000 + uint32(fs.quality) * 100 + fs.pos);\n        }\n    }\n\n\n    /// @dev Race token info returned based on Token ID transfered (64 at most)\n    function getFashionsAttrs(uint256[] _tokens) external view returns(uint256[] attrs) {\n        uint256 length = _tokens.length;\n        attrs = new uint256[](length * 14);\n        uint256 tokenId;\n        uint256 index;\n        for (uint256 i = 0; i < length; ++i) {\n            tokenId = _tokens[i];\n            if (fashionIdToOwner[tokenId] != address(0)) {\n                index = i * 14;\n                Fashion storage fs = fashionArray[tokenId];\n                attrs[index]     = fs.equipmentId;\n\t\t\t\tattrs[index + 1] = fs.quality;\n                attrs[index + 2] = fs.pos;\n                attrs[index + 3] = fs.production;\n                attrs[index + 4] = fs.attack;\n                attrs[index + 5] = fs.defense;\n                attrs[index + 6] = fs.plunder;\n                attrs[index + 7] = fs.productionMultiplier;\n                attrs[index + 8] = fs.attackMultiplier;\n                attrs[index + 9] = fs.defenseMultiplier;\n                attrs[index + 10] = fs.plunderMultiplier;\n                attrs[index + 11] = fs.level;\n                attrs[index + 12] = fs.isPercent; \n                attrs[index + 13] = tokenId;  \n            }   \n        }\n    }\n}", "debug": "keccac_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\nUDiv(storage_keccac_calldata_RaceToken_4,_256): 0xbdb6db6da00000387e2d51520160b010080007fffff87fffffffefffe0000000\nstorage_keccac_calldata_RaceToken_4: 0x4400000000000000000000000000000000000000000000000000000000000101\ncalldata_RaceToken_4: 0x1\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\nUDiv(storage_keccac_calldata_RaceToken_4,_256): 0xc400000000000000000000000000000000000000000000000000000000000000\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xff00\nstorage_1: 0x1\nstorage_0: 0x0\ncalldata_RaceToken_0: 0x378f83f00000000000000000000000000000000000000000000000000000000\ncalldatasize_RaceToken: 0x4\nstorage_keccac_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\nUDiv(storage_keccac_calldata_RaceToken_4,_256) +\nstorage_keccac_calldata_RaceToken_4: 0x1\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `destroyFashion(uint256,uint16)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/temp/Crypto_Racing-3.sol", "function": "destroyFashion(uint256,uint16)", "lineno": 91, "title": "Integer Overflow ", "type": "Warning"}], "success": true}
