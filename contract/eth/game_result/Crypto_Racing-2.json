{"error": null, "issues": [{"address": 1089, "code": "rgetLength = _targets.length;\n        require(targetLength <= 64);\n        require(targetLength == _cnts.length);\n        address addrZero = address(0);\n        uint32 oldCnt;\n        uint32 newCnt;\n        address addr;\n        for (uint256 i = 0; i < targetLength; ++i) {\n            addr = _targets[i];\n            if (addr != addrZero && _cnts[i] <= 32) {\n                oldCnt = freeMineral[addr];\n                newCnt = oldCnt + _cnts[i];\n                assert(oldCnt < newCnt);\n                freeMineral[addr] = newCnt;\n                emit FreeMineralChange(addr, freeMineral[addr]);\n            }\n        }\n    }\n\n    function setActionContract(address _actionAddr, bool _useful) external onlyAdmin {\n        actionContracts[_actionAddr] = _useful;\n    }\n\n   ", "debug": "calldata_IDataMining_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_IDataMining_0: 0xc1c7bc6800000000000000000000000000000000000000000000000000000000\ncalldatasize_IDataMining: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `addFreeMineralMulti(address[],uint32[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/temp/Crypto_Racing-2.sol", "function": "addFreeMineralMulti(address[],uint32[])", "lineno": 131, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1095, "code": "rgetLength = _targets.length;\n        require(targetLength <= 64);\n        require(targetLength == _cnts.length);\n        address addrZero = address(0);\n        uint32 oldCnt;\n        uint32 newCnt;\n        address addr;\n        for (uint256 i = 0; i < targetLength; ++i) {\n            addr = _targets[i];\n            if (addr != addrZero && _cnts[i] <= 32) {\n                oldCnt = freeMineral[addr];\n                newCnt = oldCnt + _cnts[i];\n                assert(oldCnt < newCnt);\n                freeMineral[addr] = newCnt;\n                emit FreeMineralChange(addr, freeMineral[addr]);\n            }\n        }\n    }\n\n    function setActionContract(address _actionAddr, bool _useful) external onlyAdmin {\n        actionContracts[_actionAddr] = _useful;\n    }\n\n   ", "debug": "calldata_IDataMining_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc\ncalldata_IDataMining_0: 0xc1c7bc6800000000000000000000000000000000000000000000000000000000\ncalldatasize_IDataMining: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `addFreeMineralMulti(address[],uint32[])`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/temp/Crypto_Racing-2.sol", "function": "addFreeMineralMulti(address[],uint32[])", "lineno": 131, "title": "Integer Overflow ", "type": "Warning"}, {"address": 4728, "code": "eral(address _ta", "debug": "The exception is triggered under the following conditions:\n\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_IDataMining_4: 0x0\ncalldata_IDataMining_4: 0xffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xff00\ncalldata_IDataMining_0: 0xd0946d0000000000000000000000000000000000000000000000000000000000\ncalldatasize_IDataMining: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/temp/Crypto_Racing-2.sol", "function": "subFreeMineral(address)", "lineno": 168, "title": "Exception state", "type": "Informational"}], "success": true}
