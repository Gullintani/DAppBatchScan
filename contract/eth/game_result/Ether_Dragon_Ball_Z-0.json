{"error": null, "issues": [{"address": 922, "code": "address of a sp", "debug": "The exception is triggered under the following conditions:\n\ncalldata_DragonBallZ_4: 0x0\nstorage_2: 0x0\ncalldata_DragonBallZ_0: 0x12c8986900000000000000000000000000000000000000000000000000000000\ncalldatasize_DragonBallZ: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/temp/Ether_Dragon_Ball_Z-0.sol", "function": "getHeroCurrentPrice(uint256)", "lineno": 94, "title": "Exception state", "type": "Informational"}, {"address": 1084, "code": "on overflow. =>", "debug": "The exception is triggered under the following conditions:\n\ncalldata_DragonBallZ_4: 0x0\nstorage_2: 0x0\ncalldata_DragonBallZ_0: 0x56b4d76000000000000000000000000000000000000000000000000000000000\ncalldatasize_DragonBallZ: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/temp/Ether_Dragon_Ball_Z-0.sol", "function": "getHeroOwner(uint256)", "lineno": 101, "title": "Exception state", "type": "Informational"}, {"address": 1163, "code": ".ownerAddress;\n", "debug": "The exception is triggered under the following conditions:\n\ncalldata_DragonBallZ_4: 0x0\nstorage_2: 0x0\ncalldata_DragonBallZ_0: 0x730bdc9600000000000000000000000000000000000000000000000000000000\ncalldatasize_DragonBallZ: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/temp/Ether_Dragon_Ball_Z-0.sol", "function": "getHeroDetails(uint256)", "lineno": 85, "title": "Exception state", "type": "Informational"}, {"address": 1543, "code": ";\n\n/*\nGame: Dragon", "debug": "storage_2: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_0: 0x0\ncaller: 0x0\ncalldata_DragonBallZ_0: 0xa4623cc400000000000000000000000000000000000000000000000000000000\ncalldatasize_DragonBallZ: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `addHero(string,address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/temp/Ether_Dragon_Ball_Z-0.sol", "function": "addHero(string,address,uint256)", "lineno": 1, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1595, "debug": "mem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_DragonBallZ_4 + calldata_DragonBallZ_4)) +\n0: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\nstorage_0: 0x0\ncaller: 0x0\ncalldata_DragonBallZ_0: 0xa4623cc400000000000000000000000000000000000000000000000000000000\ncalldatasize_DragonBallZ: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `addHero(string,address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/temp/Ether_Dragon_Ball_Z-0.sol", "function": "addHero(string,address,uint256)", "lineno": 127, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1749, "code": "heroes[_heroId]", "debug": "The exception is triggered under the following conditions:\n\ncalldata_DragonBallZ_4: 0x0\nstorage_2: 0x0\ncalldata_DragonBallZ_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_DragonBallZ_0: 0xb4d657cc00000000000000000000000000000000000000000000000000000000\ncalldatasize_DragonBallZ: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/temp/Ether_Dragon_Ball_Z-0.sol", "function": "modifyCurrentHeroPrice(uint256,uint256)", "lineno": 72, "title": "Exception state", "type": "Informational"}, {"address": 1938, "code": "sed == false);\n", "debug": "The exception is triggered under the following conditions:\n\ncalldata_DragonBallZ_4: 0x0\nstorage_2: 0x0\ncalldata_DragonBallZ_0: 0xb7ded7cc00000000000000000000000000000000000000000000000000000000\ncalldatasize_DragonBallZ: 0x4\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/temp/Ether_Dragon_Ball_Z-0.sol", "function": "purchaseHero(uint256)", "lineno": 48, "title": "Exception state", "type": "Informational"}, {"address": 2136, "code": ";\n\n\t\t// Transfer the 10% commission to the developer\n\t", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 2241\n", "filename": "/temp/Ether_Dragon_Ball_Z-0.sol", "function": "purchaseHero(uint256)", "lineno": 55, "title": "Multiple Calls", "type": "Information"}, {"address": 2661, "code": "t DragonBallZ {\n\n\taddress contractCreator = 0x23B385c822381BE63C9f45a3E45266DD32D52c43;\n    address devFeeAddress = 0x3bdC0D871731D08D1c1c793735372AB16397Cd61;\n\n\tstruct Hero {\n\t\tstring heroName;\n\t\taddress ownerAddress;\n\t\tuint256 currentPrice;\n\t}\n\tHero[] heroes;\n\n\tmodifier onlyContractCreator() {\n        require (msg.sender == contractCreator);\n        _;\n    }\n\n    bool isPaused;\n    \n    \n    /*\n    We use the following functions to pause and unpause the game.\n    */\n    function pauseGame() public onlyContractCreator {\n        isPaused = true;\n    }\n    function unPauseGame() public onlyContractCreator {\n        isPaused = false;\n    }\n    function GetGamestatus() public view returns(bool) {\n       return(isPaused);\n    }\n\n    /*\n    This function allows users to purchase Dragon Ball Z hero. \n    The price is automatically multiplied by 2 after each purchase.\n    Users can purchase multiple heroes.\n    */\n\tfunction purchaseHero(uint _heroId) public payable {\n\t\trequire(msg.value == heroes[_heroId].currentPrice);\n\t\trequire(isPaused == false);\n\n\t\t// Calculate the 10% value\n\t\tuint256 devFee = (msg.value / 10);\n\n\t\t// Calculate the hero owner commission on this sale & transfer the commission to the owner.\t\t\n\t\tuint256 commissionOwner = msg.value - devFee; // => 90%\n\t\theroes[_heroId].ownerAddress.transfer(commissionOwner);\n\n\t\t// Transfer the 10% commission to the developer\n\t\tdevFeeAddress.transfer(devFee); // => 10% \t\t\t\t\t\t\n\n\t\t// Update the hero owner and set the new price\n\t\theroes[_heroId].ownerAddress = msg.sender;\n\t\theroes[_heroId].currentPrice = mul(heroes[_heroId].currentPrice, 2);\n\t}\n\t\n\t/*\n\tThis function can be used by the owner of a hero to modify the price of its hero.\n\tHe can make the price lesser than the current price only.\n\t*/\n\tfunction modifyCurrentHeroPrice(uint _heroId, uint256 _newPrice) public {\n\t    require(_newPrice > 0);\n\t    require(heroes[_heroId].ownerAddress == msg.sender);\n\t    require(_newPrice < heroes[_heroId].currentPrice);\n\t    heroes[_heroId].currentPrice = _newPrice;\n\t}\n\t\n\t// This function will return all of the details of the Dragon Ball Z heroes\n\tfunction getHeroDetails(uint _heroId) public view returns (\n        string heroName,\n        address ownerAddress,\n        uint256 currentPrice\n    ) {\n        Hero storage _hero = heroes[_heroId];\n\n        heroName = _hero.heroName;\n        ownerAddress = _hero.ownerAddress;\n        currentPrice = _hero.currentPrice;\n    }\n    \n    // This function will return only the price of a specific hero\n    function getHeroCurrentPrice(uint _heroId) public view returns(uint256) {\n        return(heroes[_heroId].currentPrice);\n    }\n    \n    // This function will return only the owner address of a specific hero\n    function getHeroOwner(uint _heroId) public view returns(address) {\n        return(heroes[_heroId].ownerAddress);\n    }\n    \n    \n    /**\n    @dev Multiplies two numbers, throws on overflow. => From the SafeMath library\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n          return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n    @dev Integer division of two numbers, truncating the quotient. => From the SafeMath library\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n    \n\t// This function will be used to add a new hero by the contract creator\n\tfunction addHero(string heroName, address ownerAddress, uint256 currentPrice) public onlyContractCreator {\n        heroes.push(Hero(heroName,ownerAddress,currentPrice));\n    }\n\t\n}", "debug": "keccac_0_+\n29102676481673041902632991033461445430619272659676223336789171408008386403022_+\n3*storage_2: 0xff13e6a7459ae5a4c49c419171c3f89100a371508000000000129200000219e2\nstorage_0 +\n29102676481673041902632991033461445430619272659676223336789171408008386403022 +\n3*storage_2: 0xbac1c3147749165dd7d1977fffffffffffffffffffffffffffffffffffffffc5\nstorage_0: 0x0\ncaller: 0x0\ncalldata_DragonBallZ_0: 0xa4623cc400000000000000000000000000000000000000000000000000000000\ncalldatasize_DragonBallZ: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `addHero(string,address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/temp/Ether_Dragon_Ball_Z-0.sol", "function": "addHero(string,address,uint256)", "lineno": 8, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2690, "code": "t DragonBallZ {\n\n\taddress contractCreator = 0x23B385c822381BE63C9f45a3E45266DD32D52c43;\n    address devFeeAddress = 0x3bdC0D871731D08D1c1c793735372AB16397Cd61;\n\n\tstruct Hero {\n\t\tstring heroName;\n\t\taddress ownerAddress;\n\t\tuint256 currentPrice;\n\t}\n\tHero[] heroes;\n\n\tmodifier onlyContractCreator() {\n        require (msg.sender == contractCreator);\n        _;\n    }\n\n    bool isPaused;\n    \n    \n    /*\n    We use the following functions to pause and unpause the game.\n    */\n    function pauseGame() public onlyContractCreator {\n        isPaused = true;\n    }\n    function unPauseGame() public onlyContractCreator {\n        isPaused = false;\n    }\n    function GetGamestatus() public view returns(bool) {\n       return(isPaused);\n    }\n\n    /*\n    This function allows users to purchase Dragon Ball Z hero. \n    The price is automatically multiplied by 2 after each purchase.\n    Users can purchase multiple heroes.\n    */\n\tfunction purchaseHero(uint _heroId) public payable {\n\t\trequire(msg.value == heroes[_heroId].currentPrice);\n\t\trequire(isPaused == false);\n\n\t\t// Calculate the 10% value\n\t\tuint256 devFee = (msg.value / 10);\n\n\t\t// Calculate the hero owner commission on this sale & transfer the commission to the owner.\t\t\n\t\tuint256 commissionOwner = msg.value - devFee; // => 90%\n\t\theroes[_heroId].ownerAddress.transfer(commissionOwner);\n\n\t\t// Transfer the 10% commission to the developer\n\t\tdevFeeAddress.transfer(devFee); // => 10% \t\t\t\t\t\t\n\n\t\t// Update the hero owner and set the new price\n\t\theroes[_heroId].ownerAddress = msg.sender;\n\t\theroes[_heroId].currentPrice = mul(heroes[_heroId].currentPrice, 2);\n\t}\n\t\n\t/*\n\tThis function can be used by the owner of a hero to modify the price of its hero.\n\tHe can make the price lesser than the current price only.\n\t*/\n\tfunction modifyCurrentHeroPrice(uint _heroId, uint256 _newPrice) public {\n\t    require(_newPrice > 0);\n\t    require(heroes[_heroId].ownerAddress == msg.sender);\n\t    require(_newPrice < heroes[_heroId].currentPrice);\n\t    heroes[_heroId].currentPrice = _newPrice;\n\t}\n\t\n\t// This function will return all of the details of the Dragon Ball Z heroes\n\tfunction getHeroDetails(uint _heroId) public view returns (\n        string heroName,\n        address ownerAddress,\n        uint256 currentPrice\n    ) {\n        Hero storage _hero = heroes[_heroId];\n\n        heroName = _hero.heroName;\n        ownerAddress = _hero.ownerAddress;\n        currentPrice = _hero.currentPrice;\n    }\n    \n    // This function will return only the price of a specific hero\n    function getHeroCurrentPrice(uint _heroId) public view returns(uint256) {\n        return(heroes[_heroId].currentPrice);\n    }\n    \n    // This function will return only the owner address of a specific hero\n    function getHeroOwner(uint _heroId) public view returns(address) {\n        return(heroes[_heroId].ownerAddress);\n    }\n    \n    \n    /**\n    @dev Multiplies two numbers, throws on overflow. => From the SafeMath library\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n          return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n    @dev Integer division of two numbers, truncating the quotient. => From the SafeMath library\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n    \n\t// This function will be used to add a new hero by the contract creator\n\tfunction addHero(string heroName, address ownerAddress, uint256 currentPrice) public onlyContractCreator {\n        heroes.push(Hero(heroName,ownerAddress,currentPrice));\n    }\n\t\n}", "debug": "mem_mem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_DragonBallZ_4 + calldata_DragonBallZ_4)) +\n0: 0x8000000000000000000000000000000000000000000000000000000000000000\nstorage_0: 0x0\ncaller: 0x0\ncalldata_DragonBallZ_0: 0xa4623cc400000000000000000000000000000000000000000000000000000000\ncalldatasize_DragonBallZ: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `addHero(string,address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/temp/Ether_Dragon_Ball_Z-0.sol", "function": "addHero(string,address,uint256)", "lineno": 8, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2704, "code": "t DragonBallZ {\n\n\taddress contractCreator = 0x23B385c822381BE63C9f45a3E45266DD32D52c43;\n    address devFeeAddress = 0x3bdC0D871731D08D1c1c793735372AB16397Cd61;\n\n\tstruct Hero {\n\t\tstring heroName;\n\t\taddress ownerAddress;\n\t\tuint256 currentPrice;\n\t}\n\tHero[] heroes;\n\n\tmodifier onlyContractCreator() {\n        require (msg.sender == contractCreator);\n        _;\n    }\n\n    bool isPaused;\n    \n    \n    /*\n    We use the following functions to pause and unpause the game.\n    */\n    function pauseGame() public onlyContractCreator {\n        isPaused = true;\n    }\n    function unPauseGame() public onlyContractCreator {\n        isPaused = false;\n    }\n    function GetGamestatus() public view returns(bool) {\n       return(isPaused);\n    }\n\n    /*\n    This function allows users to purchase Dragon Ball Z hero. \n    The price is automatically multiplied by 2 after each purchase.\n    Users can purchase multiple heroes.\n    */\n\tfunction purchaseHero(uint _heroId) public payable {\n\t\trequire(msg.value == heroes[_heroId].currentPrice);\n\t\trequire(isPaused == false);\n\n\t\t// Calculate the 10% value\n\t\tuint256 devFee = (msg.value / 10);\n\n\t\t// Calculate the hero owner commission on this sale & transfer the commission to the owner.\t\t\n\t\tuint256 commissionOwner = msg.value - devFee; // => 90%\n\t\theroes[_heroId].ownerAddress.transfer(commissionOwner);\n\n\t\t// Transfer the 10% commission to the developer\n\t\tdevFeeAddress.transfer(devFee); // => 10% \t\t\t\t\t\t\n\n\t\t// Update the hero owner and set the new price\n\t\theroes[_heroId].ownerAddress = msg.sender;\n\t\theroes[_heroId].currentPrice = mul(heroes[_heroId].currentPrice, 2);\n\t}\n\t\n\t/*\n\tThis function can be used by the owner of a hero to modify the price of its hero.\n\tHe can make the price lesser than the current price only.\n\t*/\n\tfunction modifyCurrentHeroPrice(uint _heroId, uint256 _newPrice) public {\n\t    require(_newPrice > 0);\n\t    require(heroes[_heroId].ownerAddress == msg.sender);\n\t    require(_newPrice < heroes[_heroId].currentPrice);\n\t    heroes[_heroId].currentPrice = _newPrice;\n\t}\n\t\n\t// This function will return all of the details of the Dragon Ball Z heroes\n\tfunction getHeroDetails(uint _heroId) public view returns (\n        string heroName,\n        address ownerAddress,\n        uint256 currentPrice\n    ) {\n        Hero storage _hero = heroes[_heroId];\n\n        heroName = _hero.heroName;\n        ownerAddress = _hero.ownerAddress;\n        currentPrice = _hero.currentPrice;\n    }\n    \n    // This function will return only the price of a specific hero\n    function getHeroCurrentPrice(uint _heroId) public view returns(uint256) {\n        return(heroes[_heroId].currentPrice);\n    }\n    \n    // This function will return only the owner address of a specific hero\n    function getHeroOwner(uint _heroId) public view returns(address) {\n        return(heroes[_heroId].ownerAddress);\n    }\n    \n    \n    /**\n    @dev Multiplies two numbers, throws on overflow. => From the SafeMath library\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n          return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n    @dev Integer division of two numbers, truncating the quotient. => From the SafeMath library\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n    \n\t// This function will be used to add a new hero by the contract creator\n\tfunction addHero(string heroName, address ownerAddress, uint256 currentPrice) public onlyContractCreator {\n        heroes.push(Hero(heroName,ownerAddress,currentPrice));\n    }\n\t\n}", "debug": "mem_mem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_DragonBallZ_4 + calldata_DragonBallZ_4)) +\n0: 0xe9ed542651000003d76906f7c018193fbfffffffffffffffffffffffffffffcb\nmem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_DragonBallZ_4 + calldata_DragonBallZ_4)) +\n0: 0xc48c04261444f7ce9c1a66f6c355debe3fffffffffffffffffffffffffffffed\nstorage_0: 0x0\ncaller: 0x0\ncalldata_DragonBallZ_0: 0xa4623cc400000000000000000000000000000000000000000000000000000000\ncalldatasize_DragonBallZ: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `addHero(string,address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/temp/Ether_Dragon_Ball_Z-0.sol", "function": "addHero(string,address,uint256)", "lineno": 8, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2721, "code": "t DragonBallZ {\n\n\taddress contractCreator = 0x23B385c822381BE63C9f45a3E45266DD32D52c43;\n    address devFeeAddress = 0x3bdC0D871731D08D1c1c793735372AB16397Cd61;\n\n\tstruct Hero {\n\t\tstring heroName;\n\t\taddress ownerAddress;\n\t\tuint256 currentPrice;\n\t}\n\tHero[] heroes;\n\n\tmodifier onlyContractCreator() {\n        require (msg.sender == contractCreator);\n        _;\n    }\n\n    bool isPaused;\n    \n    \n    /*\n    We use the following functions to pause and unpause the game.\n    */\n    function pauseGame() public onlyContractCreator {\n        isPaused = true;\n    }\n    function unPauseGame() public onlyContractCreator {\n        isPaused = false;\n    }\n    function GetGamestatus() public view returns(bool) {\n       return(isPaused);\n    }\n\n    /*\n    This function allows users to purchase Dragon Ball Z hero. \n    The price is automatically multiplied by 2 after each purchase.\n    Users can purchase multiple heroes.\n    */\n\tfunction purchaseHero(uint _heroId) public payable {\n\t\trequire(msg.value == heroes[_heroId].currentPrice);\n\t\trequire(isPaused == false);\n\n\t\t// Calculate the 10% value\n\t\tuint256 devFee = (msg.value / 10);\n\n\t\t// Calculate the hero owner commission on this sale & transfer the commission to the owner.\t\t\n\t\tuint256 commissionOwner = msg.value - devFee; // => 90%\n\t\theroes[_heroId].ownerAddress.transfer(commissionOwner);\n\n\t\t// Transfer the 10% commission to the developer\n\t\tdevFeeAddress.transfer(devFee); // => 10% \t\t\t\t\t\t\n\n\t\t// Update the hero owner and set the new price\n\t\theroes[_heroId].ownerAddress = msg.sender;\n\t\theroes[_heroId].currentPrice = mul(heroes[_heroId].currentPrice, 2);\n\t}\n\t\n\t/*\n\tThis function can be used by the owner of a hero to modify the price of its hero.\n\tHe can make the price lesser than the current price only.\n\t*/\n\tfunction modifyCurrentHeroPrice(uint _heroId, uint256 _newPrice) public {\n\t    require(_newPrice > 0);\n\t    require(heroes[_heroId].ownerAddress == msg.sender);\n\t    require(_newPrice < heroes[_heroId].currentPrice);\n\t    heroes[_heroId].currentPrice = _newPrice;\n\t}\n\t\n\t// This function will return all of the details of the Dragon Ball Z heroes\n\tfunction getHeroDetails(uint _heroId) public view returns (\n        string heroName,\n        address ownerAddress,\n        uint256 currentPrice\n    ) {\n        Hero storage _hero = heroes[_heroId];\n\n        heroName = _hero.heroName;\n        ownerAddress = _hero.ownerAddress;\n        currentPrice = _hero.currentPrice;\n    }\n    \n    // This function will return only the price of a specific hero\n    function getHeroCurrentPrice(uint _heroId) public view returns(uint256) {\n        return(heroes[_heroId].currentPrice);\n    }\n    \n    // This function will return only the owner address of a specific hero\n    function getHeroOwner(uint _heroId) public view returns(address) {\n        return(heroes[_heroId].ownerAddress);\n    }\n    \n    \n    /**\n    @dev Multiplies two numbers, throws on overflow. => From the SafeMath library\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n          return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n    @dev Integer division of two numbers, truncating the quotient. => From the SafeMath library\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n    \n\t// This function will be used to add a new hero by the contract creator\n\tfunction addHero(string heroName, address ownerAddress, uint256 currentPrice) public onlyContractCreator {\n        heroes.push(Hero(heroName,ownerAddress,currentPrice));\n    }\n\t\n}", "debug": "mem_mem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_DragonBallZ_4 + calldata_DragonBallZ_4)) +\n0: 0x25\nmem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_DragonBallZ_4 + calldata_DragonBallZ_4)) +\n0: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa0\nstorage_0: 0x0\ncaller: 0x0\ncalldata_DragonBallZ_0: 0xa4623cc400000000000000000000000000000000000000000000000000000000\ncalldatasize_DragonBallZ: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `addHero(string,address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/temp/Ether_Dragon_Ball_Z-0.sol", "function": "addHero(string,address,uint256)", "lineno": 8, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2726, "code": "t DragonBallZ {\n\n\taddress contractCreator = 0x23B385c822381BE63C9f45a3E45266DD32D52c43;\n    address devFeeAddress = 0x3bdC0D871731D08D1c1c793735372AB16397Cd61;\n\n\tstruct Hero {\n\t\tstring heroName;\n\t\taddress ownerAddress;\n\t\tuint256 currentPrice;\n\t}\n\tHero[] heroes;\n\n\tmodifier onlyContractCreator() {\n        require (msg.sender == contractCreator);\n        _;\n    }\n\n    bool isPaused;\n    \n    \n    /*\n    We use the following functions to pause and unpause the game.\n    */\n    function pauseGame() public onlyContractCreator {\n        isPaused = true;\n    }\n    function unPauseGame() public onlyContractCreator {\n        isPaused = false;\n    }\n    function GetGamestatus() public view returns(bool) {\n       return(isPaused);\n    }\n\n    /*\n    This function allows users to purchase Dragon Ball Z hero. \n    The price is automatically multiplied by 2 after each purchase.\n    Users can purchase multiple heroes.\n    */\n\tfunction purchaseHero(uint _heroId) public payable {\n\t\trequire(msg.value == heroes[_heroId].currentPrice);\n\t\trequire(isPaused == false);\n\n\t\t// Calculate the 10% value\n\t\tuint256 devFee = (msg.value / 10);\n\n\t\t// Calculate the hero owner commission on this sale & transfer the commission to the owner.\t\t\n\t\tuint256 commissionOwner = msg.value - devFee; // => 90%\n\t\theroes[_heroId].ownerAddress.transfer(commissionOwner);\n\n\t\t// Transfer the 10% commission to the developer\n\t\tdevFeeAddress.transfer(devFee); // => 10% \t\t\t\t\t\t\n\n\t\t// Update the hero owner and set the new price\n\t\theroes[_heroId].ownerAddress = msg.sender;\n\t\theroes[_heroId].currentPrice = mul(heroes[_heroId].currentPrice, 2);\n\t}\n\t\n\t/*\n\tThis function can be used by the owner of a hero to modify the price of its hero.\n\tHe can make the price lesser than the current price only.\n\t*/\n\tfunction modifyCurrentHeroPrice(uint _heroId, uint256 _newPrice) public {\n\t    require(_newPrice > 0);\n\t    require(heroes[_heroId].ownerAddress == msg.sender);\n\t    require(_newPrice < heroes[_heroId].currentPrice);\n\t    heroes[_heroId].currentPrice = _newPrice;\n\t}\n\t\n\t// This function will return all of the details of the Dragon Ball Z heroes\n\tfunction getHeroDetails(uint _heroId) public view returns (\n        string heroName,\n        address ownerAddress,\n        uint256 currentPrice\n    ) {\n        Hero storage _hero = heroes[_heroId];\n\n        heroName = _hero.heroName;\n        ownerAddress = _hero.ownerAddress;\n        currentPrice = _hero.currentPrice;\n    }\n    \n    // This function will return only the price of a specific hero\n    function getHeroCurrentPrice(uint _heroId) public view returns(uint256) {\n        return(heroes[_heroId].currentPrice);\n    }\n    \n    // This function will return only the owner address of a specific hero\n    function getHeroOwner(uint _heroId) public view returns(address) {\n        return(heroes[_heroId].ownerAddress);\n    }\n    \n    \n    /**\n    @dev Multiplies two numbers, throws on overflow. => From the SafeMath library\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n          return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n    @dev Integer division of two numbers, truncating the quotient. => From the SafeMath library\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n    \n\t// This function will be used to add a new hero by the contract creator\n\tfunction addHero(string heroName, address ownerAddress, uint256 currentPrice) public onlyContractCreator {\n        heroes.push(Hero(heroName,ownerAddress,currentPrice));\n    }\n\t\n}", "debug": "mem_mem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_DragonBallZ_4 + calldata_DragonBallZ_4)) +\n0: 0x2021fda91bfffffffffffffffffffffffffffffffffffffffff8\nkeccac_0_+\n29102676481673041902632991033461445430619272659676223336789171408008386403022_+\n3*storage_2: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nmem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_DragonBallZ_4 + calldata_DragonBallZ_4)) +\n0: 0x9ffbffffffffd99db48e28ffffffffffffffffffffffffffffffffffffffffe8\nstorage_0: 0x0\ncaller: 0x0\ncalldata_DragonBallZ_0: 0xa4623cc400000000000000000000000000000000000000000000000000000000\ncalldatasize_DragonBallZ: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `addHero(string,address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/temp/Ether_Dragon_Ball_Z-0.sol", "function": "addHero(string,address,uint256)", "lineno": 8, "title": "Integer Overflow ", "type": "Warning"}], "success": true}
