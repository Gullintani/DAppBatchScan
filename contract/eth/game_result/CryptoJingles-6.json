{"error": null, "issues": [{"address": 990, "code": "  \n        } else", "debug": "The exception is triggered under the following conditions:\n\ncalldata_SampleStorage_4: 0x58\nstorage_2: 0x0\ncalldata_SampleStorage_0: 0x4036ab7800000000000000000000000000000000000000000000000000000000\ncalldatasize_SampleStorage: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/temp/CryptoJingles-6.sol", "function": "getType(uint256)", "lineno": 79, "title": "Exception state", "type": "Informational"}, {"address": 1016, "code": "&& _randomNum < 900) {\n   ", "debug": "The exception is triggered under the following conditions:\n\ncalldata_SampleStorage_4: 0x18\nstorage_2: 0x2fd00\ncalldata_SampleStorage_0: 0x4036ab7800000000000000000000000000000000000000000000000000000000\ncalldatasize_SampleStorage: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/temp/CryptoJingles-6.sol", "function": "getType(uint256)", "lineno": 80, "title": "Exception state", "type": "Informational"}, {"address": 1085, "code": "\n            ra", "debug": "The exception is triggered under the following conditions:\n\ncalldata_SampleStorage_4: 0x300\nstorage_2: 0x0\ncalldata_SampleStorage_0: 0x4036ab7800000000000000000000000000000000000000000000000000000000\ncalldatasize_SampleStorage: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/temp/CryptoJingles-6.sol", "function": "getType(uint256)", "lineno": 83, "title": "Exception state", "type": "Informational"}, {"address": 1111, "code": "dary;\n            return u", "debug": "The exception is triggered under the following conditions:\n\ncalldata_SampleStorage_4: 0x258\nstorage_2: 0x17c00\ncalldata_SampleStorage_0: 0x4036ab7800000000000000000000000000000000000000000000000000000000\ncalldatasize_SampleStorage: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/temp/CryptoJingles-6.sol", "function": "getType(uint256)", "lineno": 84, "title": "Exception state", "type": "Informational"}, {"address": 1155, "code": "}\n    \n}\n\ncontract J", "debug": "The exception is triggered under the following conditions:\n\ncalldata_SampleStorage_4: 0x3d8\nstorage_2: 0x0\ncalldata_SampleStorage_0: 0x4036ab7800000000000000000000000000000000000000000000000000000000\ncalldatasize_SampleStorage: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/temp/CryptoJingles-6.sol", "function": "getType(uint256)", "lineno": 87, "title": "Exception state", "type": "Informational"}, {"address": 1181, "code": "21 {\n    \n    struct MetaI", "debug": "The exception is triggered under the following conditions:\n\ncalldata_SampleStorage_4: 0x3d8\nstorage_2: 0x6d00\ncalldata_SampleStorage_0: 0x4036ab7800000000000000000000000000000000000000000000000000000000\ncalldatasize_SampleStorage: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/temp/CryptoJingles-6.sol", "function": "getType(uint256)", "lineno": 91, "title": "Exception state", "type": "Informational"}, {"address": 1951, "code": "pfsHash,\n           rarity: _rarityType\n        });\n        \n        numOfSampleTypes++;\n    }\n    \n    function getT", "debug": "mem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_SampleStorage_4 + calldata_SampleStorage_4)) +\n0: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\nstorage_0: 0x0\ncaller: 0x0\ncalldata_SampleStorage_0: 0xe576038f00000000000000000000000000000000000000000000000000000000\ncalldatasize_SampleStorage: 0x4\ncalldata_SampleStorage_32 + 4: 0x0\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `addNewSampleType(string,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/temp/CryptoJingles-6.sol", "function": "addNewSampleType(string,uint256)", "lineno": 66, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2420, "code": "    \n    struct Sample {\n        string ipfsHash;\n        uint rarity;\n    }\n    \n    mapping (uint32 => Sample) public sampleTypes;\n    \n    uint32 public numOfSampleTypes;\n    \n    uint32 public numOfCommon;\n    uint32 public numOfRare;\n    uint32 public numOfLegendary;\n\n    // The mythical sample is a type common that appears only once in a 1000\n    function addNewSampleType(string _ipfsHash, uint _rarityType) public onlyOwner {\n        \n        if (_rarityType == 0) {\n            numOfCommon++;\n        } else if (_rarityType == 1) {\n            numOfRare++;\n        } else if(_rarityType == 2) {\n            numOfLegendary++;\n        } else if(_rarityType == 3) {\n            numOfCommon++;\n        }\n        \n        sampleTypes[numOfSampleTypes] = Sample({\n           ipfsHash: _ipfsHash,\n           rarity: _rarityType\n        });\n        \n        numOfSampleTypes++;\n    }\n    \n    function getType(uint _randomNum) public view returns (uint32) {\n        uint32 range = 0;\n        \n        if (_randomNum > 0 && _randomNum < 600) {\n            range = 600 / numOfCommon;\n            return uint32(_randomNum) / range;\n            \n        } else if(_randomNum >= 600 && _randomNum < 900) {\n            range = 300 / numOfRare;\n            return uint32(_randomNum) / range;\n        } else {\n            range = 100 / numOfLegendary;\n            return uint32(_randomNum) / range;\n        }\n    }\n    \n}\n\ncontract Jingle is Ownable, ERC721 {\n    \n    struct MetaInfo {\n        string name;\n ", "debug": "storage_0 +\nkeccac_4294967295_&\n4294967295_&\n4294967295_&\nUDiv(256*Concat(0,_1_+_Extract(39,_8,_storage_2))_|\n_____Concat(Extract(255,_40,_storage_2),\n____________0,\n____________Extract(7,_0,_storage_2)),\n_____256): 0xbac1c3147749165dd7d1977fffffffffffffffffffffffffffffffffffffffc5\nkeccac_0_+\nkeccac_4294967295_&\n4294967295_&\n4294967295_&\nUDiv(256*Concat(0,_1_+_Extract(39,_8,_storage_2))_|\n_____Concat(Extract(255,_40,_storage_2),\n____________0,\n____________Extract(7,_0,_storage_2)),\n_____256): 0xff13e6a7459ae5a4c49c419171c3f89100a371508000000000129200000219e2\nstorage_0: 0x0\ncaller: 0x0\ncalldata_SampleStorage_0: 0xe576038f00000000000000000000000000000000000000000000000000000000\ncalldatasize_SampleStorage: 0x4\ncalldata_SampleStorage_32 + 4: 0x0\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `addNewSampleType(string,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/temp/CryptoJingles-6.sol", "function": "addNewSampleType(string,uint256)", "lineno": 38, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2449, "code": "    \n    struct Sample {\n        string ipfsHash;\n        uint rarity;\n    }\n    \n    mapping (uint32 => Sample) public sampleTypes;\n    \n    uint32 public numOfSampleTypes;\n    \n    uint32 public numOfCommon;\n    uint32 public numOfRare;\n    uint32 public numOfLegendary;\n\n    // The mythical sample is a type common that appears only once in a 1000\n    function addNewSampleType(string _ipfsHash, uint _rarityType) public onlyOwner {\n        \n        if (_rarityType == 0) {\n            numOfCommon++;\n        } else if (_rarityType == 1) {\n            numOfRare++;\n        } else if(_rarityType == 2) {\n            numOfLegendary++;\n        } else if(_rarityType == 3) {\n            numOfCommon++;\n        }\n        \n        sampleTypes[numOfSampleTypes] = Sample({\n           ipfsHash: _ipfsHash,\n           rarity: _rarityType\n        });\n        \n        numOfSampleTypes++;\n    }\n    \n    function getType(uint _randomNum) public view returns (uint32) {\n        uint32 range = 0;\n        \n        if (_randomNum > 0 && _randomNum < 600) {\n            range = 600 / numOfCommon;\n            return uint32(_randomNum) / range;\n            \n        } else if(_randomNum >= 600 && _randomNum < 900) {\n            range = 300 / numOfRare;\n            return uint32(_randomNum) / range;\n        } else {\n            range = 100 / numOfLegendary;\n            return uint32(_randomNum) / range;\n        }\n    }\n    \n}\n\ncontract Jingle is Ownable, ERC721 {\n    \n    struct MetaInfo {\n        string name;\n ", "debug": "mem_mem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_SampleStorage_4 + calldata_SampleStorage_4)) +\n0: 0x8000000000000000000000000000000000000000000000000000000000000000\nstorage_0: 0x0\ncaller: 0x0\ncalldata_SampleStorage_0: 0xe576038f00000000000000000000000000000000000000000000000000000000\ncalldatasize_SampleStorage: 0x4\ncalldata_SampleStorage_32 + 4: 0x0\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `addNewSampleType(string,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/temp/CryptoJingles-6.sol", "function": "addNewSampleType(string,uint256)", "lineno": 38, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2463, "code": "    \n    struct Sample {\n        string ipfsHash;\n        uint rarity;\n    }\n    \n    mapping (uint32 => Sample) public sampleTypes;\n    \n    uint32 public numOfSampleTypes;\n    \n    uint32 public numOfCommon;\n    uint32 public numOfRare;\n    uint32 public numOfLegendary;\n\n    // The mythical sample is a type common that appears only once in a 1000\n    function addNewSampleType(string _ipfsHash, uint _rarityType) public onlyOwner {\n        \n        if (_rarityType == 0) {\n            numOfCommon++;\n        } else if (_rarityType == 1) {\n            numOfRare++;\n        } else if(_rarityType == 2) {\n            numOfLegendary++;\n        } else if(_rarityType == 3) {\n            numOfCommon++;\n        }\n        \n        sampleTypes[numOfSampleTypes] = Sample({\n           ipfsHash: _ipfsHash,\n           rarity: _rarityType\n        });\n        \n        numOfSampleTypes++;\n    }\n    \n    function getType(uint _randomNum) public view returns (uint32) {\n        uint32 range = 0;\n        \n        if (_randomNum > 0 && _randomNum < 600) {\n            range = 600 / numOfCommon;\n            return uint32(_randomNum) / range;\n            \n        } else if(_randomNum >= 600 && _randomNum < 900) {\n            range = 300 / numOfRare;\n            return uint32(_randomNum) / range;\n        } else {\n            range = 100 / numOfLegendary;\n            return uint32(_randomNum) / range;\n        }\n    }\n    \n}\n\ncontract Jingle is Ownable, ERC721 {\n    \n    struct MetaInfo {\n        string name;\n ", "debug": "mem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_SampleStorage_4 + calldata_SampleStorage_4)) +\n0: 0xc48c04261444f7ce9c1a66f6c355debe3fffffffffffffffffffffffffffffed\nmem_mem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_SampleStorage_4 + calldata_SampleStorage_4)) +\n0: 0xe9ed542651000003d76906f7c018193fbfffffffffffffffffffffffffffffcb\nstorage_0: 0x0\ncaller: 0x0\ncalldata_SampleStorage_0: 0xe576038f00000000000000000000000000000000000000000000000000000000\ncalldatasize_SampleStorage: 0x4\ncalldata_SampleStorage_32 + 4: 0x0\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `addNewSampleType(string,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/temp/CryptoJingles-6.sol", "function": "addNewSampleType(string,uint256)", "lineno": 38, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2480, "code": "    \n    struct Sample {\n        string ipfsHash;\n        uint rarity;\n    }\n    \n    mapping (uint32 => Sample) public sampleTypes;\n    \n    uint32 public numOfSampleTypes;\n    \n    uint32 public numOfCommon;\n    uint32 public numOfRare;\n    uint32 public numOfLegendary;\n\n    // The mythical sample is a type common that appears only once in a 1000\n    function addNewSampleType(string _ipfsHash, uint _rarityType) public onlyOwner {\n        \n        if (_rarityType == 0) {\n            numOfCommon++;\n        } else if (_rarityType == 1) {\n            numOfRare++;\n        } else if(_rarityType == 2) {\n            numOfLegendary++;\n        } else if(_rarityType == 3) {\n            numOfCommon++;\n        }\n        \n        sampleTypes[numOfSampleTypes] = Sample({\n           ipfsHash: _ipfsHash,\n           rarity: _rarityType\n        });\n        \n        numOfSampleTypes++;\n    }\n    \n    function getType(uint _randomNum) public view returns (uint32) {\n        uint32 range = 0;\n        \n        if (_randomNum > 0 && _randomNum < 600) {\n            range = 600 / numOfCommon;\n            return uint32(_randomNum) / range;\n            \n        } else if(_randomNum >= 600 && _randomNum < 900) {\n            range = 300 / numOfRare;\n            return uint32(_randomNum) / range;\n        } else {\n            range = 100 / numOfLegendary;\n            return uint32(_randomNum) / range;\n        }\n    }\n    \n}\n\ncontract Jingle is Ownable, ERC721 {\n    \n    struct MetaInfo {\n        string name;\n ", "debug": "mem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_SampleStorage_4 + calldata_SampleStorage_4)) +\n0: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa0\nmem_mem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_SampleStorage_4 + calldata_SampleStorage_4)) +\n0: 0x25\nstorage_0: 0x0\ncaller: 0x0\ncalldata_SampleStorage_0: 0xe576038f00000000000000000000000000000000000000000000000000000000\ncalldatasize_SampleStorage: 0x4\ncalldata_SampleStorage_32 + 4: 0x0\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `addNewSampleType(string,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/temp/CryptoJingles-6.sol", "function": "addNewSampleType(string,uint256)", "lineno": 38, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2485, "code": "    \n    struct Sample {\n        string ipfsHash;\n        uint rarity;\n    }\n    \n    mapping (uint32 => Sample) public sampleTypes;\n    \n    uint32 public numOfSampleTypes;\n    \n    uint32 public numOfCommon;\n    uint32 public numOfRare;\n    uint32 public numOfLegendary;\n\n    // The mythical sample is a type common that appears only once in a 1000\n    function addNewSampleType(string _ipfsHash, uint _rarityType) public onlyOwner {\n        \n        if (_rarityType == 0) {\n            numOfCommon++;\n        } else if (_rarityType == 1) {\n            numOfRare++;\n        } else if(_rarityType == 2) {\n            numOfLegendary++;\n        } else if(_rarityType == 3) {\n            numOfCommon++;\n        }\n        \n        sampleTypes[numOfSampleTypes] = Sample({\n           ipfsHash: _ipfsHash,\n           rarity: _rarityType\n        });\n        \n        numOfSampleTypes++;\n    }\n    \n    function getType(uint _randomNum) public view returns (uint32) {\n        uint32 range = 0;\n        \n        if (_randomNum > 0 && _randomNum < 600) {\n            range = 600 / numOfCommon;\n            return uint32(_randomNum) / range;\n            \n        } else if(_randomNum >= 600 && _randomNum < 900) {\n            range = 300 / numOfRare;\n            return uint32(_randomNum) / range;\n        } else {\n            range = 100 / numOfLegendary;\n            return uint32(_randomNum) / range;\n        }\n    }\n    \n}\n\ncontract Jingle is Ownable, ERC721 {\n    \n    struct MetaInfo {\n        string name;\n ", "debug": "mem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_SampleStorage_4 + calldata_SampleStorage_4)) +\n0: 0x9ffbffffffffd99db48e28ffffffffffffffffffffffffffffffffffffffffe8\nmem_mem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_SampleStorage_4 + calldata_SampleStorage_4)) +\n0: 0x2021fda91bfffffffffffffffffffffffffffffffffffffffff8\nkeccac_0_+\nkeccac_4294967295_&\n4294967295_&\n4294967295_&\nUDiv(256*Concat(0,_1_+_Extract(39,_8,_storage_2))_|\n_____Concat(Extract(255,_40,_storage_2),\n____________0,\n____________Extract(7,_0,_storage_2)),\n_____256): 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_0: 0x0\ncaller: 0x0\ncalldata_SampleStorage_0: 0xe576038f00000000000000000000000000000000000000000000000000000000\ncalldatasize_SampleStorage: 0x4\ncalldata_SampleStorage_32 + 4: 0x0\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `addNewSampleType(string,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/temp/CryptoJingles-6.sol", "function": "addNewSampleType(string,uint256)", "lineno": 38, "title": "Integer Overflow ", "type": "Warning"}], "success": true}
