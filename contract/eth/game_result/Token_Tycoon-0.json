{"error": null, "issues": [{"address": 1022, "code": " = 1100000000000000000;\n        } else if (val == 3 ether) {\n            tthVal = 3600000000000000000;\n        } else if (val == 5 ether) {\n            tthVal = 6500000000000000000;\n        } else if (val == 10 ether) {\n            tthVal = 15000000000000000000;\n        } else if (val == 20 ether) {\n            tthVal = 34000000000000000000;\n        } else {\n            require(false);\n        }\n        uint256 b = balances[this];\n        require(b >= tthVal);\n\n        bytes32 hashAccount = keccak256(_account);\n        require(hashAccount != emptyHash);\n\n        address preAddr = accHashToAddress[hashAccount];\n        string storage preAcc = addressToAccount[msg.sender];\n        bytes32 hashPreAcc = keccak256(preAcc);\n\n        if (preAddr == address(0)) {\n            require(hashPreAcc == emptyHash);\n            // first buy\n            accHashToAddress[hashAccount] = msg.sender;\n            addressToAccount[msg.sender] = _account;\n            _transfer(this, msg.sender, tthVal);\n        } else if(preAddr == msg.sender) {\n            require(hashPreAcc == hashAccount);\n            // multi buy\n            _transfer(this, msg.sender, tthVal);\n        } else {\n            require(false);\n        }\n\n        BuyIGO(msg.sender, _account, val, tthVal);\n    }\n\n    function getCanSellBalance() external view returns(uint256) {\n        return balances[this];\n    }\n\n    function getBalanceByAccount(string _account) external view returns(uint256) {\n        bytes32 hashAc", "debug": "calldata_tokenRecipient_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_tokenRecipient_0: 0x492cc76900000000000000000000000000000000000000000000000000000000\ncalldatasize_tokenRecipient: 0x4\n", "description": "A possible integer overflow exists in the function `buy(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/temp/Token_Tycoon-0.sol", "function": "buy(string)", "lineno": 175, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1028, "code": " = 1100000000000000000;\n        } else if (val == 3 ether) {\n            tthVal = 3600000000000000000;\n        } else if (val == 5 ether) {\n            tthVal = 6500000000000000000;\n        } else if (val == 10 ether) {\n            tthVal = 15000000000000000000;\n        } else if (val == 20 ether) {\n            tthVal = 34000000000000000000;\n        } else {\n            require(false);\n        }\n        uint256 b = balances[this];\n        require(b >= tthVal);\n\n        bytes32 hashAccount = keccak256(_account);\n        require(hashAccount != emptyHash);\n\n        address preAddr = accHashToAddress[hashAccount];\n        string storage preAcc = addressToAccount[msg.sender];\n        bytes32 hashPreAcc = keccak256(preAcc);\n\n        if (preAddr == address(0)) {\n            require(hashPreAcc == emptyHash);\n            // first buy\n            accHashToAddress[hashAccount] = msg.sender;\n            addressToAccount[msg.sender] = _account;\n            _transfer(this, msg.sender, tthVal);\n        } else if(preAddr == msg.sender) {\n            require(hashPreAcc == hashAccount);\n            // multi buy\n            _transfer(this, msg.sender, tthVal);\n        } else {\n            require(false);\n        }\n\n        BuyIGO(msg.sender, _account, val, tthVal);\n    }\n\n    function getCanSellBalance() external view returns(uint256) {\n        return balances[this];\n    }\n\n    function getBalanceByAccount(string _account) external view returns(uint256) {\n        bytes32 hashAc", "debug": "calldata_tokenRecipient_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc\ncalldata_tokenRecipient_0: 0x492cc76900000000000000000000000000000000000000000000000000000000\ncalldatasize_tokenRecipient: 0x4\n", "description": "A possible integer overflow exists in the function `buy(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/temp/Token_Tycoon-0.sol", "function": "buy(string)", "lineno": 175, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3765, "code": "   bytes32 hashPreA", "debug": "calldata_tokenRecipient_4 + calldata_tokenRecipient_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80\nstorage_49447583277831049919367225834250252452388266381872102257329440518579731298015: 0xf43fc2c04ee0000\nstorage_0: 0x0\ncalldata_tokenRecipient_0: 0x492cc76900000000000000000000000000000000000000000000000000000000\ncalldatasize_tokenRecipient: 0x4\ncallvalue: 0xde0b6b3a7640000\n", "description": "A possible integer overflow exists in the function `buy(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/temp/Token_Tycoon-0.sol", "function": "buy(string)", "lineno": 195, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3778, "code": "   bytes32 hashPreA", "debug": "calldata_tokenRecipient_4 + calldata_tokenRecipient_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_49447583277831049919367225834250252452388266381872102257329440518579731298015: 0xf43fc2c04ee0000\nstorage_0: 0x0\ncalldata_tokenRecipient_0: 0x492cc76900000000000000000000000000000000000000000000000000000000\ncalldatasize_tokenRecipient: 0x4\ncallvalue: 0xde0b6b3a7640000\n", "description": "A possible integer underflow exists in the function `buy(string)`.\nThe subtraction may result in a value < 0.", "filename": "/temp/Token_Tycoon-0.sol", "function": "buy(string)", "lineno": 195, "title": "Integer Underflow", "type": "Warning"}, {"address": 7520, "code": "ces[_to] = newToV", "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_tokenRecipient_32_+_4: 0x18a3d0000000003d83b1202da8090f2e6802400af2000000280000127fe43efa\ncalldata_tokenRecipient_32 + 36: 0xeb7e3000000000012000200134010f94023a7a28e10000000bffefc46000b0f0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_tokenRecipient_4: 0xeb7e3000000000012000200134010f94023a7a28e10000000bffefc46000b0f0\ncalldata_tokenRecipient_32 + 4: 0xffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xeb7e3000000000012000200134010f94023a7a28e10000000bffefc46000b0f0\ncalldata_tokenRecipient_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_tokenRecipient: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `transferFrom(address,address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/temp/Token_Tycoon-0.sol", "function": "transferFrom(address,address,uint256)", "lineno": 163, "title": "Integer Overflow ", "type": "Warning"}, {"address": 7680, "code": "     uint256 val = ms", "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_tokenRecipient_4: 0xed1f02be40009fef7b1879d97f820d473f3d0d6d49e7a7d6c7f374f85c65263b\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_tokenRecipient_32_+_4: 0x4f3e480c31cc0923039744e6084488a200017d71a904041f1cfc4844762016b3\ncalldata_tokenRecipient_32 + 36: 0x9c504807bdcd596098c184e6025b00f8a0440000000000000000000000000000\ncalldata_tokenRecipient_32 + 4: 0xffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x9c504807bdcd596098c184e6025b00f8a0440000000000000000000000000000\ncalldata_tokenRecipient_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_tokenRecipient: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `transferFrom(address,address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/temp/Token_Tycoon-0.sol", "function": "transferFrom(address,address,uint256)", "lineno": 172, "title": "Integer Overflow ", "type": "Warning"}, {"address": 7683, "code": "yable whenNotPaused {", "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_tokenRecipient_4: 0xcddb7b26e14692b043099058f2737e28c594472fb657e8553cf98f0bfb8feb3d\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_tokenRecipient_32_+_4: 0x390c9d6016a4d3eef3bdfe76eb3b6396795547cf37560f95befe702913688345\ncalldata_tokenRecipient_32 + 36: 0x898df175edc38cb15e52d6440e05acd39711daa232221c4ea000dac811300000\ncalldata_tokenRecipient_32 + 4: 0xffffffffffffffffffffffffffffffffffffffff\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x898df175edc38cb15e52d6440e05acd39711daa232221c4ea000dac811300000\ncalldata_tokenRecipient_0: 0x23b872dd00000000000000000000000000000000000000000000000000000000\ncalldatasize_tokenRecipient: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `transferFrom(address,address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/temp/Token_Tycoon-0.sol", "function": "transferFrom(address,address,uint256)", "lineno": 171, "title": "Integer Overflow ", "type": "Warning"}, {"address": 7876, "code": "blic totalSupply = 850 * (10 ** uint256(decimals));\n    string public name = \"Token Tycoon Coin\";\n    string public symbol = \"TTC\";\n    bytes32 private emptyHash;\n\n    mapping (address => uint256) balances;\n    mapping (address => mapping(address => uint256)) allowed;\n    mapping (address => string) addressToAccount;\n    mapping (bytes32 => address) accHashToAddress;\n    \n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n    event BuyIGO(address indexed _from, string _account, uint256 _ethVal, uint256 _tthVal);\n\n    function TokenTycoonIGO() public {\n        addrAdmin = msg.sender;\n        addrService = msg.sender;\n        addrFinance = msg.sender;\n\n        balances[this] = totalSupply;\n        emptyHash = keccak256(\"\");\n    }\n\n    function() external payable {\n\n    }\n\n    function balanceOf(address _owner) external view returns (uint256) {\n        return balances[_owner];\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) external view returns (uint256) {\n        return allowed[_owner][_spender];\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool) {\n        require(_value <= allowed[_from][msg.sender]);\n        allowed[_from][msg.sender] -= _value;\n        return _transfer(_from, _to, _value);\n    }\n\n    function transfer(address _to, uint256 _value) external returns (bool) {\n        return _transfer(msg.sender, _to, _value);     \n    }\n\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n        external\n        returns (bool success) {\n        tokenRecipient spender = tokenRecipient(_spender);\n        if (approve(_spender, _value)) {\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\n            return true;\n        }\n    }\n\n    function _transfer(address _from, address _to, uint256 _value) internal returns (bool) {\n        require(_to != address(0));\n        uint256 oldFromVal = balances[_from];\n        require(_value > 0 && oldFromVal >= _value);\n        uint256 oldToVal = balances[_to];\n        uint256 newToVal = oldToVal + _value;\n        require(newToVal > oldToVal);\n        uint256 newFromVal = oldFromVal - _value;\n        balances[_from] = newFromVal;\n        balances[_to] = newToVal;\n\n        assert((oldFromVal + oldToVal) == (newFromVal + newToVal));\n        Transfer(_from, _to, _value);\n\n        return true;\n    }\n\n    function buy(string _account) external payable whenNotPaused {  \n        uint256 val = msg.value;\n        uint256 tthVal;\n        if (val == 1 ether) {\n            tthVal = 1100000000000000000;\n        } else if (val == 3 ether) {\n            tthVal = 3600000000000000000;\n        } else if (val == 5 ether) {\n            tthVal = 6500000000000000000;\n        } else if (val == 10 ether) {\n            tthVal = 15000000000000000000;\n        } else if (val == 20 ether) {\n            tthVal = 34000000000000000000;\n        } else {\n            require(false);\n        }\n        uint256 b = balances[this];\n        require(b >= tthVal);\n\n        bytes32 hashAccount = keccak256(_account);\n        require(hashAccount != emptyHash);\n\n        address preAddr = accHashToAddress[hashAccount];\n        string storage preAcc = addressToAccount[msg.sender];\n        bytes32 hashPreAcc = keccak256(preAcc);\n\n        if (preAddr == address(0)) {\n            require(hashPreAcc == emptyHash);\n            // first buy\n            accHashToAddress[hashAccount] = msg.sender;\n            addressToAccount[msg.sender] = _account;\n            _transfer(this, msg.sender, tthVal);\n        } else if(preAddr == msg.sender) {\n            require(hashPreAcc == hashAccount);\n            // multi buy\n            _transfer(this, msg.sender, tthVal);\n        } else {\n            require(false);\n        }\n\n        BuyIGO(msg.sender, _account, val, tthVal);\n    }\n\n    function getCanSellBalance() external view returns(uint256) {\n        return balances[this];\n    }\n\n    function getBalanceByAccount(string _account) external view returns(uint256) {\n        bytes32 hashAccount = keccak256(_account);\n        address addr = accHashToAddress[hashAccount];\n        if (addr == address(0)) {\n            return 0;\n        } else {\n            return balances[addr];\n        }\n    }\n\n    function getIGOAccoountByAddr(address _addr) external view returns(string) {\n        return addressToAccount[_addr];\n    }\n}", "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\ncalldata_tokenRecipient_4 + calldata_tokenRecipient_4: 0x8000000000000000000000000000000000000000000000000000000000000000\nstorage_keccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\nKECCAC_mem_128): 0x0\nKECCAC_mem_128): 0x3a2db9fe7908dcc36d81824d2338fc3f1aff49ac357dd8c4840527fba27a5b8f\nstorage_49447583277831049919367225834250252452388266381872102257329440518579731298015: 0xf43fc2c04ee0000\nstorage_0: 0x0\ncalldata_tokenRecipient_0: 0x492cc76900000000000000000000000000000000000000000000000000000000\ncalldatasize_tokenRecipient: 0x4\nstorage_6: 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470\ncallvalue: 0xde0b6b3a7640000\n", "description": "A possible integer overflow exists in the function `buy(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/temp/Token_Tycoon-0.sol", "function": "buy(string)", "lineno": 92, "title": "Integer Overflow ", "type": "Warning"}, {"address": 7890, "code": "blic totalSupply = 850 * (10 ** uint256(decimals));\n    string public name = \"Token Tycoon Coin\";\n    string public symbol = \"TTC\";\n    bytes32 private emptyHash;\n\n    mapping (address => uint256) balances;\n    mapping (address => mapping(address => uint256)) allowed;\n    mapping (address => string) addressToAccount;\n    mapping (bytes32 => address) accHashToAddress;\n    \n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n    event BuyIGO(address indexed _from, string _account, uint256 _ethVal, uint256 _tthVal);\n\n    function TokenTycoonIGO() public {\n        addrAdmin = msg.sender;\n        addrService = msg.sender;\n        addrFinance = msg.sender;\n\n        balances[this] = totalSupply;\n        emptyHash = keccak256(\"\");\n    }\n\n    function() external payable {\n\n    }\n\n    function balanceOf(address _owner) external view returns (uint256) {\n        return balances[_owner];\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) external view returns (uint256) {\n        return allowed[_owner][_spender];\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool) {\n        require(_value <= allowed[_from][msg.sender]);\n        allowed[_from][msg.sender] -= _value;\n        return _transfer(_from, _to, _value);\n    }\n\n    function transfer(address _to, uint256 _value) external returns (bool) {\n        return _transfer(msg.sender, _to, _value);     \n    }\n\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n        external\n        returns (bool success) {\n        tokenRecipient spender = tokenRecipient(_spender);\n        if (approve(_spender, _value)) {\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\n            return true;\n        }\n    }\n\n    function _transfer(address _from, address _to, uint256 _value) internal returns (bool) {\n        require(_to != address(0));\n        uint256 oldFromVal = balances[_from];\n        require(_value > 0 && oldFromVal >= _value);\n        uint256 oldToVal = balances[_to];\n        uint256 newToVal = oldToVal + _value;\n        require(newToVal > oldToVal);\n        uint256 newFromVal = oldFromVal - _value;\n        balances[_from] = newFromVal;\n        balances[_to] = newToVal;\n\n        assert((oldFromVal + oldToVal) == (newFromVal + newToVal));\n        Transfer(_from, _to, _value);\n\n        return true;\n    }\n\n    function buy(string _account) external payable whenNotPaused {  \n        uint256 val = msg.value;\n        uint256 tthVal;\n        if (val == 1 ether) {\n            tthVal = 1100000000000000000;\n        } else if (val == 3 ether) {\n            tthVal = 3600000000000000000;\n        } else if (val == 5 ether) {\n            tthVal = 6500000000000000000;\n        } else if (val == 10 ether) {\n            tthVal = 15000000000000000000;\n        } else if (val == 20 ether) {\n            tthVal = 34000000000000000000;\n        } else {\n            require(false);\n        }\n        uint256 b = balances[this];\n        require(b >= tthVal);\n\n        bytes32 hashAccount = keccak256(_account);\n        require(hashAccount != emptyHash);\n\n        address preAddr = accHashToAddress[hashAccount];\n        string storage preAcc = addressToAccount[msg.sender];\n        bytes32 hashPreAcc = keccak256(preAcc);\n\n        if (preAddr == address(0)) {\n            require(hashPreAcc == emptyHash);\n            // first buy\n            accHashToAddress[hashAccount] = msg.sender;\n            addressToAccount[msg.sender] = _account;\n            _transfer(this, msg.sender, tthVal);\n        } else if(preAddr == msg.sender) {\n            require(hashPreAcc == hashAccount);\n            // multi buy\n            _transfer(this, msg.sender, tthVal);\n        } else {\n            require(false);\n        }\n\n        BuyIGO(msg.sender, _account, val, tthVal);\n    }\n\n    function getCanSellBalance() external view returns(uint256) {\n        return balances[this];\n    }\n\n    function getBalanceByAccount(string _account) external view returns(uint256) {\n        bytes32 hashAccount = keccak256(_account);\n        address addr = accHashToAddress[hashAccount];\n        if (addr == address(0)) {\n            return 0;\n        } else {\n            return balances[addr];\n        }\n    }\n\n    function getIGOAccoountByAddr(address _addr) external view returns(string) {\n        return addressToAccount[_addr];\n    }\n}", "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\ncalldata_tokenRecipient_4: 0xe18a3d1c393c760111059c91fbfb6ae91f7ffff874ffffffffffffffffffffdf\ncalldata_tokenRecipient_4 + calldata_tokenRecipient_4: 0x7ff900d5ebfcfeff1f7ddfe9fc045516e08000078affffffffffffffffffffff\nstorage_keccac_115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\n115792089237316195423570985008687907853269984665640564039457584007913129639935_-\n0_&\nKECCAC_mem_128): 0x0\nKECCAC_mem_128): 0x3a2db9fe7908dcc36d81824d2338fc3f1aff49ac357dd8c4840527fba27a5b8f\nstorage_49447583277831049919367225834250252452388266381872102257329440518579731298015: 0xf43fc2c04ee0000\nstorage_0: 0x0\ncalldata_tokenRecipient_0: 0x492cc76900000000000000000000000000000000000000000000000000000000\ncalldatasize_tokenRecipient: 0x4\nstorage_6: 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470\ncallvalue: 0xde0b6b3a7640000\n", "description": "A possible integer overflow exists in the function `buy(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/temp/Token_Tycoon-0.sol", "function": "buy(string)", "lineno": 92, "title": "Integer Overflow ", "type": "Warning"}], "success": true}
