{"error": null, "issues": [{"address": 933, "code": "\n        ownerAddress = ", "debug": "The exception is triggered under the following conditions:\n\ncalldata_CryptoVideoGames_4: 0x0\nstorage_2: 0x0\ncalldata_CryptoVideoGames_0: 0x9e7616100000000000000000000000000000000000000000000000000000000\ncalldatasize_CryptoVideoGames: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/temp/Crypto_Kotaku-0.sol", "function": "getVideoGameDetails(uint256)", "lineno": 79, "title": "Exception state", "type": "Informational"}, {"address": 1399, "code": ";\n\ncontract Crypto", "debug": "storage_2: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_0: 0x0\ncaller: 0x0\ncalldata_CryptoVideoGames_0: 0x1a994fd200000000000000000000000000000000000000000000000000000000\ncalldatasize_CryptoVideoGames: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `addVideoGame(string,address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/temp/Crypto_Kotaku-0.sol", "function": "addVideoGame(string,address,uint256)", "lineno": 1, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1451, "debug": "mem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_CryptoVideoGames_4 + calldata_CryptoVideoGames_4)) +\n0: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\nstorage_0: 0x0\ncaller: 0x0\ncalldata_CryptoVideoGames_0: 0x1a994fd200000000000000000000000000000000000000000000000000000000\ncalldatasize_CryptoVideoGames: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `addVideoGame(string,address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/temp/Crypto_Kotaku-0.sol", "function": "addVideoGame(string,address,uint256)", "lineno": 122, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1570, "code": "       require(isPaused ", "debug": "The exception is triggered under the following conditions:\n\ncalldata_CryptoVideoGames_4: 0x0\nstorage_2: 0x0\ncalldata_CryptoVideoGames_0: 0x22b0818000000000000000000000000000000000000000000000000000000000\ncalldatasize_CryptoVideoGames: 0x4\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/temp/Crypto_Kotaku-0.sol", "function": "purchaseVideoGame(uint256)", "lineno": 43, "title": "Exception state", "type": "Informational"}, {"address": 1768, "code": "mmissionOwner);\n\n        // Transfer the 10% commission to the ", "debug": "", "description": "Multiple sends exist in one transaction, try to isolate each external call into its own transaction. As external calls can fail accidentally or deliberately.\nConsecutive calls: \nCall at address: 1873\n", "filename": "/temp/Crypto_Kotaku-0.sol", "function": "purchaseVideoGame(uint256)", "lineno": 50, "title": "Multiple Calls", "type": "Information"}, {"address": 2247, "code": "uire(_newPrice < videoGa", "debug": "The exception is triggered under the following conditions:\n\ncalldata_CryptoVideoGames_4: 0x0\nstorage_2: 0x0\ncalldata_CryptoVideoGames_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_CryptoVideoGames_0: 0x6185141600000000000000000000000000000000000000000000000000000000\ncalldatasize_CryptoVideoGames: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/temp/Crypto_Kotaku-0.sol", "function": "modifyCurrentVideoGamePrice(uint256,uint256)", "lineno": 67, "title": "Exception state", "type": "Informational"}, {"address": 2435, "code": "mbers, throws on overflo", "debug": "The exception is triggered under the following conditions:\n\ncalldata_CryptoVideoGames_4: 0x0\nstorage_2: 0x0\ncalldata_CryptoVideoGames_0: 0xab22a64000000000000000000000000000000000000000000000000000000000\ncalldatasize_CryptoVideoGames: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/temp/Crypto_Kotaku-0.sol", "function": "getVideoGameOwner(uint256)", "lineno": 96, "title": "Exception state", "type": "Informational"}, {"address": 2509, "code": "nly the owner address of", "debug": "The exception is triggered under the following conditions:\n\ncalldata_CryptoVideoGames_4: 0x0\nstorage_2: 0x0\ncalldata_CryptoVideoGames_0: 0xe5dc476f00000000000000000000000000000000000000000000000000000000\ncalldatasize_CryptoVideoGames: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/temp/Crypto_Kotaku-0.sol", "function": "getVideoGameCurrentPrice(uint256)", "lineno": 89, "title": "Exception state", "type": "Informational"}, {"address": 2679, "code": "numbe", "debug": "storage_2 +\n29102676481673041902632991033461445430619272659676223336789171408008386403022 +\n3*calldata_CryptoVideoGames_4: 0x8000000000000000000000000000000000000000000000000000000000000000\ncalldata_CryptoVideoGames_4: 0x0\nretval_1873: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nretval_1768: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_3: 0x0\nstorage_2: 0x1\ncalldata_CryptoVideoGames_0: 0x22b0818000000000000000000000000000000000000000000000000000000000\ncalldatasize_CryptoVideoGames: 0x4\ncallvalue: 0x8000000000000000000000000000000000000000000000000000000000000000\n", "description": "A possible integer overflow exists in the function `purchaseVideoGame(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/temp/Crypto_Kotaku-0.sol", "function": "purchaseVideoGame(uint256)", "lineno": 108, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2809, "code": "ntract CryptoVideoGames {\n\n    address contractCreator = 0xC15d9f97aC926a6A29A681f5c19e2b56fd208f00;\n    address devFeeAddress = 0xC15d9f97aC926a6A29A681f5c19e2b56fd208f00;\n\n    struct VideoGame {\n        string videoGameName;\n        address ownerAddress;\n        uint256 currentPrice;\n    }\n    VideoGame[] videoGames;\n\n    modifier onlyContractCreator() {\n        require (msg.sender == contractCreator);\n        _;\n    }\n\n    bool isPaused;\n    \n    \n    /*\n    We use the following functions to pause and unpause the game.\n    */\n    function pauseGame() public onlyContractCreator {\n        isPaused = true;\n    }\n    function unPauseGame() public onlyContractCreator {\n        isPaused = false;\n    }\n    function GetGamestatus() public view returns(bool) {\n       return(isPaused);\n    }\n\n    /*\n    This function allows users to purchase Video Game. \n    The price is automatically multiplied by 2 after each purchase.\n    Users can purchase multiple video games.\n    */\n    function purchaseVideoGame(uint _videoGameId) public payable {\n        require(msg.value == videoGames[_videoGameId].currentPrice);\n        require(isPaused == false);\n\n        // Calculate the 10% value\n        uint256 devFee = (msg.value / 10);\n\n        // Calculate the video game owner commission on this sale & transfer the commission to the owner.     \n        uint256 commissionOwner = msg.value - devFee; // => 90%\n        videoGames[_videoGameId].ownerAddress.transfer(commissionOwner);\n\n        // Transfer the 10% commission to the developer\n        devFeeAddress.transfer(devFee); // => 10%                       \n\n        // Update the video game owner and set the new price\n        videoGames[_videoGameId].ownerAddress = msg.sender;\n        videoGames[_videoGameId].currentPrice = mul(videoGames[_videoGameId].currentPrice, 2);\n    }\n    \n    /*\n    This function can be used by the owner of a video game to modify the price of its video game.\n    He can make the price lesser than the current price only.\n    */\n    function modifyCurrentVideoGamePrice(uint _videoGameId, uint256 _newPrice) public {\n        require(_newPrice > 0);\n        require(videoGames[_videoGameId].ownerAddress == msg.sender);\n        require(_newPrice < videoGames[_videoGameId].currentPrice);\n        videoGames[_videoGameId].currentPrice = _newPrice;\n    }\n    \n    // This function will return all of the details of the Video Games\n    function getVideoGameDetails(uint _videoGameId) public view returns (\n        string videoGameName,\n        address ownerAddress,\n        uint256 currentPrice\n    ) {\n        VideoGame memory _videoGame = videoGames[_videoGameId];\n\n        videoGameName = _videoGame.videoGameName;\n        ownerAddress = _videoGame.ownerAddress;\n        currentPrice = _videoGame.currentPrice;\n    }\n    \n    // This function will return only the price of a specific Video Game\n    function getVideoGameCurrentPrice(uint _videoGameId) public view returns(uint256) {\n        return(videoGames[_videoGameId].currentPrice);\n    }\n    \n    // This function will return only the owner address of a specific Video Game\n    function getVideoGameOwner(uint _videoGameId) public view returns(address) {\n        return(videoGames[_videoGameId].ownerAddress);\n    }\n    \n    \n    /**\n    @dev Multiplies two numbers, throws on overflow. => From the SafeMath library\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n          return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n    @dev Integer division of two numbers, truncating the quotient. => From the SafeMath library\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n    \n    // This function will be used to add a new video game by the contract creator\n    function addVideoGame(string videoGameName, address ownerAddress, uint256 currentPrice) public onlyContractCreator {\n        videoGames.push(VideoGame(videoGameName,ownerAddress,currentPrice));\n    }\n    \n}", "debug": "keccac_0_+\n29102676481673041902632991033461445430619272659676223336789171408008386403022_+\n3*storage_2: 0xff13e6a7459ae5a4c49c419171c3f89100a371508000000000129200000219e2\nstorage_0 +\n29102676481673041902632991033461445430619272659676223336789171408008386403022 +\n3*storage_2: 0xbac1c3147749165dd7d1977fffffffffffffffffffffffffffffffffffffffc5\nstorage_0: 0x0\ncaller: 0x0\ncalldata_CryptoVideoGames_0: 0x1a994fd200000000000000000000000000000000000000000000000000000000\ncalldatasize_CryptoVideoGames: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `addVideoGame(string,address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/temp/Crypto_Kotaku-0.sol", "function": "addVideoGame(string,address,uint256)", "lineno": 3, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2838, "code": "ntract CryptoVideoGames {\n\n    address contractCreator = 0xC15d9f97aC926a6A29A681f5c19e2b56fd208f00;\n    address devFeeAddress = 0xC15d9f97aC926a6A29A681f5c19e2b56fd208f00;\n\n    struct VideoGame {\n        string videoGameName;\n        address ownerAddress;\n        uint256 currentPrice;\n    }\n    VideoGame[] videoGames;\n\n    modifier onlyContractCreator() {\n        require (msg.sender == contractCreator);\n        _;\n    }\n\n    bool isPaused;\n    \n    \n    /*\n    We use the following functions to pause and unpause the game.\n    */\n    function pauseGame() public onlyContractCreator {\n        isPaused = true;\n    }\n    function unPauseGame() public onlyContractCreator {\n        isPaused = false;\n    }\n    function GetGamestatus() public view returns(bool) {\n       return(isPaused);\n    }\n\n    /*\n    This function allows users to purchase Video Game. \n    The price is automatically multiplied by 2 after each purchase.\n    Users can purchase multiple video games.\n    */\n    function purchaseVideoGame(uint _videoGameId) public payable {\n        require(msg.value == videoGames[_videoGameId].currentPrice);\n        require(isPaused == false);\n\n        // Calculate the 10% value\n        uint256 devFee = (msg.value / 10);\n\n        // Calculate the video game owner commission on this sale & transfer the commission to the owner.     \n        uint256 commissionOwner = msg.value - devFee; // => 90%\n        videoGames[_videoGameId].ownerAddress.transfer(commissionOwner);\n\n        // Transfer the 10% commission to the developer\n        devFeeAddress.transfer(devFee); // => 10%                       \n\n        // Update the video game owner and set the new price\n        videoGames[_videoGameId].ownerAddress = msg.sender;\n        videoGames[_videoGameId].currentPrice = mul(videoGames[_videoGameId].currentPrice, 2);\n    }\n    \n    /*\n    This function can be used by the owner of a video game to modify the price of its video game.\n    He can make the price lesser than the current price only.\n    */\n    function modifyCurrentVideoGamePrice(uint _videoGameId, uint256 _newPrice) public {\n        require(_newPrice > 0);\n        require(videoGames[_videoGameId].ownerAddress == msg.sender);\n        require(_newPrice < videoGames[_videoGameId].currentPrice);\n        videoGames[_videoGameId].currentPrice = _newPrice;\n    }\n    \n    // This function will return all of the details of the Video Games\n    function getVideoGameDetails(uint _videoGameId) public view returns (\n        string videoGameName,\n        address ownerAddress,\n        uint256 currentPrice\n    ) {\n        VideoGame memory _videoGame = videoGames[_videoGameId];\n\n        videoGameName = _videoGame.videoGameName;\n        ownerAddress = _videoGame.ownerAddress;\n        currentPrice = _videoGame.currentPrice;\n    }\n    \n    // This function will return only the price of a specific Video Game\n    function getVideoGameCurrentPrice(uint _videoGameId) public view returns(uint256) {\n        return(videoGames[_videoGameId].currentPrice);\n    }\n    \n    // This function will return only the owner address of a specific Video Game\n    function getVideoGameOwner(uint _videoGameId) public view returns(address) {\n        return(videoGames[_videoGameId].ownerAddress);\n    }\n    \n    \n    /**\n    @dev Multiplies two numbers, throws on overflow. => From the SafeMath library\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n          return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n    @dev Integer division of two numbers, truncating the quotient. => From the SafeMath library\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n    \n    // This function will be used to add a new video game by the contract creator\n    function addVideoGame(string videoGameName, address ownerAddress, uint256 currentPrice) public onlyContractCreator {\n        videoGames.push(VideoGame(videoGameName,ownerAddress,currentPrice));\n    }\n    \n}", "debug": "mem_mem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_CryptoVideoGames_4 + calldata_CryptoVideoGames_4)) +\n0: 0x8000000000000000000000000000000000000000000000000000000000000000\nstorage_0: 0x0\ncaller: 0x0\ncalldata_CryptoVideoGames_0: 0x1a994fd200000000000000000000000000000000000000000000000000000000\ncalldatasize_CryptoVideoGames: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `addVideoGame(string,address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/temp/Crypto_Kotaku-0.sol", "function": "addVideoGame(string,address,uint256)", "lineno": 3, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2852, "code": "ntract CryptoVideoGames {\n\n    address contractCreator = 0xC15d9f97aC926a6A29A681f5c19e2b56fd208f00;\n    address devFeeAddress = 0xC15d9f97aC926a6A29A681f5c19e2b56fd208f00;\n\n    struct VideoGame {\n        string videoGameName;\n        address ownerAddress;\n        uint256 currentPrice;\n    }\n    VideoGame[] videoGames;\n\n    modifier onlyContractCreator() {\n        require (msg.sender == contractCreator);\n        _;\n    }\n\n    bool isPaused;\n    \n    \n    /*\n    We use the following functions to pause and unpause the game.\n    */\n    function pauseGame() public onlyContractCreator {\n        isPaused = true;\n    }\n    function unPauseGame() public onlyContractCreator {\n        isPaused = false;\n    }\n    function GetGamestatus() public view returns(bool) {\n       return(isPaused);\n    }\n\n    /*\n    This function allows users to purchase Video Game. \n    The price is automatically multiplied by 2 after each purchase.\n    Users can purchase multiple video games.\n    */\n    function purchaseVideoGame(uint _videoGameId) public payable {\n        require(msg.value == videoGames[_videoGameId].currentPrice);\n        require(isPaused == false);\n\n        // Calculate the 10% value\n        uint256 devFee = (msg.value / 10);\n\n        // Calculate the video game owner commission on this sale & transfer the commission to the owner.     \n        uint256 commissionOwner = msg.value - devFee; // => 90%\n        videoGames[_videoGameId].ownerAddress.transfer(commissionOwner);\n\n        // Transfer the 10% commission to the developer\n        devFeeAddress.transfer(devFee); // => 10%                       \n\n        // Update the video game owner and set the new price\n        videoGames[_videoGameId].ownerAddress = msg.sender;\n        videoGames[_videoGameId].currentPrice = mul(videoGames[_videoGameId].currentPrice, 2);\n    }\n    \n    /*\n    This function can be used by the owner of a video game to modify the price of its video game.\n    He can make the price lesser than the current price only.\n    */\n    function modifyCurrentVideoGamePrice(uint _videoGameId, uint256 _newPrice) public {\n        require(_newPrice > 0);\n        require(videoGames[_videoGameId].ownerAddress == msg.sender);\n        require(_newPrice < videoGames[_videoGameId].currentPrice);\n        videoGames[_videoGameId].currentPrice = _newPrice;\n    }\n    \n    // This function will return all of the details of the Video Games\n    function getVideoGameDetails(uint _videoGameId) public view returns (\n        string videoGameName,\n        address ownerAddress,\n        uint256 currentPrice\n    ) {\n        VideoGame memory _videoGame = videoGames[_videoGameId];\n\n        videoGameName = _videoGame.videoGameName;\n        ownerAddress = _videoGame.ownerAddress;\n        currentPrice = _videoGame.currentPrice;\n    }\n    \n    // This function will return only the price of a specific Video Game\n    function getVideoGameCurrentPrice(uint _videoGameId) public view returns(uint256) {\n        return(videoGames[_videoGameId].currentPrice);\n    }\n    \n    // This function will return only the owner address of a specific Video Game\n    function getVideoGameOwner(uint _videoGameId) public view returns(address) {\n        return(videoGames[_videoGameId].ownerAddress);\n    }\n    \n    \n    /**\n    @dev Multiplies two numbers, throws on overflow. => From the SafeMath library\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n          return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n    @dev Integer division of two numbers, truncating the quotient. => From the SafeMath library\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n    \n    // This function will be used to add a new video game by the contract creator\n    function addVideoGame(string videoGameName, address ownerAddress, uint256 currentPrice) public onlyContractCreator {\n        videoGames.push(VideoGame(videoGameName,ownerAddress,currentPrice));\n    }\n    \n}", "debug": "mem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_CryptoVideoGames_4 + calldata_CryptoVideoGames_4)) +\n0: 0xc48c04261444f7ce9c1a66f6c355debe3fffffffffffffffffffffffffffffed\nmem_mem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_CryptoVideoGames_4 + calldata_CryptoVideoGames_4)) +\n0: 0xe9ed542651000003d76906f7c018193fbfffffffffffffffffffffffffffffcb\nstorage_0: 0x0\ncaller: 0x0\ncalldata_CryptoVideoGames_0: 0x1a994fd200000000000000000000000000000000000000000000000000000000\ncalldatasize_CryptoVideoGames: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `addVideoGame(string,address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/temp/Crypto_Kotaku-0.sol", "function": "addVideoGame(string,address,uint256)", "lineno": 3, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2869, "code": "ntract CryptoVideoGames {\n\n    address contractCreator = 0xC15d9f97aC926a6A29A681f5c19e2b56fd208f00;\n    address devFeeAddress = 0xC15d9f97aC926a6A29A681f5c19e2b56fd208f00;\n\n    struct VideoGame {\n        string videoGameName;\n        address ownerAddress;\n        uint256 currentPrice;\n    }\n    VideoGame[] videoGames;\n\n    modifier onlyContractCreator() {\n        require (msg.sender == contractCreator);\n        _;\n    }\n\n    bool isPaused;\n    \n    \n    /*\n    We use the following functions to pause and unpause the game.\n    */\n    function pauseGame() public onlyContractCreator {\n        isPaused = true;\n    }\n    function unPauseGame() public onlyContractCreator {\n        isPaused = false;\n    }\n    function GetGamestatus() public view returns(bool) {\n       return(isPaused);\n    }\n\n    /*\n    This function allows users to purchase Video Game. \n    The price is automatically multiplied by 2 after each purchase.\n    Users can purchase multiple video games.\n    */\n    function purchaseVideoGame(uint _videoGameId) public payable {\n        require(msg.value == videoGames[_videoGameId].currentPrice);\n        require(isPaused == false);\n\n        // Calculate the 10% value\n        uint256 devFee = (msg.value / 10);\n\n        // Calculate the video game owner commission on this sale & transfer the commission to the owner.     \n        uint256 commissionOwner = msg.value - devFee; // => 90%\n        videoGames[_videoGameId].ownerAddress.transfer(commissionOwner);\n\n        // Transfer the 10% commission to the developer\n        devFeeAddress.transfer(devFee); // => 10%                       \n\n        // Update the video game owner and set the new price\n        videoGames[_videoGameId].ownerAddress = msg.sender;\n        videoGames[_videoGameId].currentPrice = mul(videoGames[_videoGameId].currentPrice, 2);\n    }\n    \n    /*\n    This function can be used by the owner of a video game to modify the price of its video game.\n    He can make the price lesser than the current price only.\n    */\n    function modifyCurrentVideoGamePrice(uint _videoGameId, uint256 _newPrice) public {\n        require(_newPrice > 0);\n        require(videoGames[_videoGameId].ownerAddress == msg.sender);\n        require(_newPrice < videoGames[_videoGameId].currentPrice);\n        videoGames[_videoGameId].currentPrice = _newPrice;\n    }\n    \n    // This function will return all of the details of the Video Games\n    function getVideoGameDetails(uint _videoGameId) public view returns (\n        string videoGameName,\n        address ownerAddress,\n        uint256 currentPrice\n    ) {\n        VideoGame memory _videoGame = videoGames[_videoGameId];\n\n        videoGameName = _videoGame.videoGameName;\n        ownerAddress = _videoGame.ownerAddress;\n        currentPrice = _videoGame.currentPrice;\n    }\n    \n    // This function will return only the price of a specific Video Game\n    function getVideoGameCurrentPrice(uint _videoGameId) public view returns(uint256) {\n        return(videoGames[_videoGameId].currentPrice);\n    }\n    \n    // This function will return only the owner address of a specific Video Game\n    function getVideoGameOwner(uint _videoGameId) public view returns(address) {\n        return(videoGames[_videoGameId].ownerAddress);\n    }\n    \n    \n    /**\n    @dev Multiplies two numbers, throws on overflow. => From the SafeMath library\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n          return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n    @dev Integer division of two numbers, truncating the quotient. => From the SafeMath library\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n    \n    // This function will be used to add a new video game by the contract creator\n    function addVideoGame(string videoGameName, address ownerAddress, uint256 currentPrice) public onlyContractCreator {\n        videoGames.push(VideoGame(videoGameName,ownerAddress,currentPrice));\n    }\n    \n}", "debug": "mem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_CryptoVideoGames_4 + calldata_CryptoVideoGames_4)) +\n0: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa0\nmem_mem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_CryptoVideoGames_4 + calldata_CryptoVideoGames_4)) +\n0: 0x25\nstorage_0: 0x0\ncaller: 0x0\ncalldata_CryptoVideoGames_0: 0x1a994fd200000000000000000000000000000000000000000000000000000000\ncalldatasize_CryptoVideoGames: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `addVideoGame(string,address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/temp/Crypto_Kotaku-0.sol", "function": "addVideoGame(string,address,uint256)", "lineno": 3, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2874, "code": "ntract CryptoVideoGames {\n\n    address contractCreator = 0xC15d9f97aC926a6A29A681f5c19e2b56fd208f00;\n    address devFeeAddress = 0xC15d9f97aC926a6A29A681f5c19e2b56fd208f00;\n\n    struct VideoGame {\n        string videoGameName;\n        address ownerAddress;\n        uint256 currentPrice;\n    }\n    VideoGame[] videoGames;\n\n    modifier onlyContractCreator() {\n        require (msg.sender == contractCreator);\n        _;\n    }\n\n    bool isPaused;\n    \n    \n    /*\n    We use the following functions to pause and unpause the game.\n    */\n    function pauseGame() public onlyContractCreator {\n        isPaused = true;\n    }\n    function unPauseGame() public onlyContractCreator {\n        isPaused = false;\n    }\n    function GetGamestatus() public view returns(bool) {\n       return(isPaused);\n    }\n\n    /*\n    This function allows users to purchase Video Game. \n    The price is automatically multiplied by 2 after each purchase.\n    Users can purchase multiple video games.\n    */\n    function purchaseVideoGame(uint _videoGameId) public payable {\n        require(msg.value == videoGames[_videoGameId].currentPrice);\n        require(isPaused == false);\n\n        // Calculate the 10% value\n        uint256 devFee = (msg.value / 10);\n\n        // Calculate the video game owner commission on this sale & transfer the commission to the owner.     \n        uint256 commissionOwner = msg.value - devFee; // => 90%\n        videoGames[_videoGameId].ownerAddress.transfer(commissionOwner);\n\n        // Transfer the 10% commission to the developer\n        devFeeAddress.transfer(devFee); // => 10%                       \n\n        // Update the video game owner and set the new price\n        videoGames[_videoGameId].ownerAddress = msg.sender;\n        videoGames[_videoGameId].currentPrice = mul(videoGames[_videoGameId].currentPrice, 2);\n    }\n    \n    /*\n    This function can be used by the owner of a video game to modify the price of its video game.\n    He can make the price lesser than the current price only.\n    */\n    function modifyCurrentVideoGamePrice(uint _videoGameId, uint256 _newPrice) public {\n        require(_newPrice > 0);\n        require(videoGames[_videoGameId].ownerAddress == msg.sender);\n        require(_newPrice < videoGames[_videoGameId].currentPrice);\n        videoGames[_videoGameId].currentPrice = _newPrice;\n    }\n    \n    // This function will return all of the details of the Video Games\n    function getVideoGameDetails(uint _videoGameId) public view returns (\n        string videoGameName,\n        address ownerAddress,\n        uint256 currentPrice\n    ) {\n        VideoGame memory _videoGame = videoGames[_videoGameId];\n\n        videoGameName = _videoGame.videoGameName;\n        ownerAddress = _videoGame.ownerAddress;\n        currentPrice = _videoGame.currentPrice;\n    }\n    \n    // This function will return only the price of a specific Video Game\n    function getVideoGameCurrentPrice(uint _videoGameId) public view returns(uint256) {\n        return(videoGames[_videoGameId].currentPrice);\n    }\n    \n    // This function will return only the owner address of a specific Video Game\n    function getVideoGameOwner(uint _videoGameId) public view returns(address) {\n        return(videoGames[_videoGameId].ownerAddress);\n    }\n    \n    \n    /**\n    @dev Multiplies two numbers, throws on overflow. => From the SafeMath library\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n          return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n    @dev Integer division of two numbers, truncating the quotient. => From the SafeMath library\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n    \n    // This function will be used to add a new video game by the contract creator\n    function addVideoGame(string videoGameName, address ownerAddress, uint256 currentPrice) public onlyContractCreator {\n        videoGames.push(VideoGame(videoGameName,ownerAddress,currentPrice));\n    }\n    \n}", "debug": "keccac_0_+\n29102676481673041902632991033461445430619272659676223336789171408008386403022_+\n3*storage_2: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nmem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_CryptoVideoGames_4 + calldata_CryptoVideoGames_4)) +\n0: 0x9ffbffffffffd99db48e28ffffffffffffffffffffffffffffffffffffffffe8\nmem_mem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_CryptoVideoGames_4 + calldata_CryptoVideoGames_4)) +\n0: 0x2021fda91bfffffffffffffffffffffffffffffffffffffffff8\nstorage_0: 0x0\ncaller: 0x0\ncalldata_CryptoVideoGames_0: 0x1a994fd200000000000000000000000000000000000000000000000000000000\ncalldatasize_CryptoVideoGames: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `addVideoGame(string,address,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/temp/Crypto_Kotaku-0.sol", "function": "addVideoGame(string,address,uint256)", "lineno": 3, "title": "Integer Overflow ", "type": "Warning"}], "success": true}
