{"success": false, "error": "Solc experienced a fatal error (code 1).\n\nWarning: This is a pre-release compiler version, please do not use it in production.\n/temp/CryptoSpinners-0.sol:17:3: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use \"constructor(...) { ... }\" instead.\n  function Ownable() public {\r\n  ^ (Relevant source part starts here and spans across multiple lines).\n/temp/CryptoSpinners-0.sol:101:5: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use \"constructor(...) { ... }\" instead.\n    function SpinnerDatabase() public {\r\n    ^ (Relevant source part starts here and spans across multiple lines).\n/temp/CryptoSpinners-0.sol:263:5: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use \"constructor(...) { ... }\" instead.\n    function SpinnerFactory(address _spinnerDatabaseAddress) public {\r\n    ^ (Relevant source part starts here and spans across multiple lines).\n/temp/CryptoSpinners-0.sol:400:5: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use \"constructor(...) { ... }\" instead.\n    function SpinnerProcessor(address _spinnerFactoryAddress, address _spinnerDatabaseAddress, address _ownerAddress) public {\r\n    ^ (Relevant source part starts here and spans across multiple lines).\n/temp/CryptoSpinners-0.sol:35:5: Warning: Invoking events without \"emit\" prefix is deprecated.\n    OwnershipTransferred(owner, newOwner);\r\n    ^-----------------------------------^\n/temp/CryptoSpinners-0.sol:113:33: Warning: This function only accepts a single \"bytes\" argument. Please use \"abi.encodePacked(...)\" or a similar function to encode the data.\n        uint256 _id = uint(uint(keccak256(_type)) + uint(keccak256(block.timestamp + uint(keccak256(msg.sender)))));\r\n                                ^--------------^\n/temp/CryptoSpinners-0.sol:113:33: Warning: The provided argument of type uint256 is not implicitly convertible to expected type bytes memory.\n        uint256 _id = uint(uint(keccak256(_type)) + uint(keccak256(block.timestamp + uint(keccak256(msg.sender)))));\r\n                                ^--------------^\n/temp/CryptoSpinners-0.sol:113:91: Warning: This function only accepts a single \"bytes\" argument. Please use \"abi.encodePacked(...)\" or a similar function to encode the data.\n        uint256 _id = uint(uint(keccak256(_type)) + uint(keccak256(block.timestamp + uint(keccak256(msg.sender)))));\r\n                                                                                          ^-------------------^\n/temp/CryptoSpinners-0.sol:113:91: Warning: The provided argument of type address is not implicitly convertible to expected type bytes memory.\n        uint256 _id = uint(uint(keccak256(_type)) + uint(keccak256(block.timestamp + uint(keccak256(msg.sender)))));\r\n                                                                                          ^-------------------^\n/temp/CryptoSpinners-0.sol:113:58: Warning: This function only accepts a single \"bytes\" argument. Please use \"abi.encodePacked(...)\" or a similar function to encode the data.\n        uint256 _id = uint(uint(keccak256(_type)) + uint(keccak256(block.timestamp + uint(keccak256(msg.sender)))));\r\n                                                         ^------------------------------------------------------^\n/temp/CryptoSpinners-0.sol:113:58: Warning: The provided argument of type uint256 is not implicitly convertible to expected type bytes memory.\n        uint256 _id = uint(uint(keccak256(_type)) + uint(keccak256(block.timestamp + uint(keccak256(msg.sender)))));\r\n                                                         ^------------------------------------------------------^\n/temp/CryptoSpinners-0.sol:127:33: Warning: This function only accepts a single \"bytes\" argument. Please use \"abi.encodePacked(...)\" or a similar function to encode the data.\n        uint256 _id = uint(uint(keccak256(_type)) + uint(keccak256(block.timestamp + uint(keccak256(msg.sender)))));\r\n                                ^--------------^\n/temp/CryptoSpinners-0.sol:127:33: Warning: The provided argument of type uint256 is not implicitly convertible to expected type bytes memory.\n        uint256 _id = uint(uint(keccak256(_type)) + uint(keccak256(block.timestamp + uint(keccak256(msg.sender)))));\r\n                                ^--------------^\n/temp/CryptoSpinners-0.sol:127:91: Warning: This function only accepts a single \"bytes\" argument. Please use \"abi.encodePacked(...)\" or a similar function to encode the data.\n        uint256 _id = uint(uint(keccak256(_type)) + uint(keccak256(block.timestamp + uint(keccak256(msg.sender)))));\r\n                                                                                          ^-------------------^\n/temp/CryptoSpinners-0.sol:127:91: Warning: The provided argument of type address is not implicitly convertible to expected type bytes memory.\n        uint256 _id = uint(uint(keccak256(_type)) + uint(keccak256(block.timestamp + uint(keccak256(msg.sender)))));\r\n                                                                                          ^-------------------^\n/temp/CryptoSpinners-0.sol:127:58: Warning: This function only accepts a single \"bytes\" argument. Please use \"abi.encodePacked(...)\" or a similar function to encode the data.\n        uint256 _id = uint(uint(keccak256(_type)) + uint(keccak256(block.timestamp + uint(keccak256(msg.sender)))));\r\n                                                         ^------------------------------------------------------^\n/temp/CryptoSpinners-0.sol:127:58: Warning: The provided argument of type uint256 is not implicitly convertible to expected type bytes memory.\n        uint256 _id = uint(uint(keccak256(_type)) + uint(keccak256(block.timestamp + uint(keccak256(msg.sender)))));\r\n                                                         ^------------------------------------------------------^\n/temp/CryptoSpinners-0.sol:226:85: Error: This type is only supported in the new experimental ABI encoder. Use \"pragma experimental ABIEncoderV2;\" to enable the feature.\n    function getSpinnerData(address walletAddress, uint index) public view returns (Shared.Spinner) {\r\n                                                                                    ^------------^\n/temp/CryptoSpinners-0.sol:237:17: Warning: This function only accepts a single \"bytes\" argument. Please use \"abi.encodePacked(...)\" or a similar function to encode the data.\n            if (keccak256(SpinnersByAddress[walletAddress][i].spinnerOwner) == keccak256(walletAddress)) {\r\n                ^---------------------------------------------------------^\n/temp/CryptoSpinners-0.sol:237:17: Warning: The provided argument of type address is not implicitly convertible to expected type bytes memory.\n            if (keccak256(SpinnersByAddress[walletAddress][i].spinnerOwner) == keccak256(walletAddress)) {\r\n                ^---------------------------------------------------------^\n/temp/CryptoSpinners-0.sol:237:80: Warning: This function only accepts a single \"bytes\" argument. Please use \"abi.encodePacked(...)\" or a similar function to encode the data.\n            if (keccak256(SpinnersByAddress[walletAddress][i].spinnerOwner) == keccak256(walletAddress)) {\r\n                                                                               ^----------------------^\n/temp/CryptoSpinners-0.sol:237:80: Warning: The provided argument of type address is not implicitly convertible to expected type bytes memory.\n            if (keccak256(SpinnersByAddress[walletAddress][i].spinnerOwner) == keccak256(walletAddress)) {\r\n                                                                               ^----------------------^\n/temp/CryptoSpinners-0.sol:280:81: Warning: This function only accepts a single \"bytes\" argument. Please use \"abi.encodePacked(...)\" or a similar function to encode the data.\n        uint rand = uint(keccak256(uint(block.blockhash(block.number-1)) + uint(keccak256(msg.sender))));\r\n                                                                                ^-------------------^\n/temp/CryptoSpinners-0.sol:280:81: Warning: The provided argument of type address is not implicitly convertible to expected type bytes memory.\n        uint rand = uint(keccak256(uint(block.blockhash(block.number-1)) + uint(keccak256(msg.sender))));\r\n                                                                                ^-------------------^\n/temp/CryptoSpinners-0.sol:280:26: Warning: This function only accepts a single \"bytes\" argument. Please use \"abi.encodePacked(...)\" or a similar function to encode the data.\n        uint rand = uint(keccak256(uint(block.blockhash(block.number-1)) + uint(keccak256(msg.sender))));\r\n                         ^----------------------------------------------------------------------------^\n/temp/CryptoSpinners-0.sol:280:26: Warning: The provided argument of type uint256 is not implicitly convertible to expected type bytes memory.\n        uint rand = uint(keccak256(uint(block.blockhash(block.number-1)) + uint(keccak256(msg.sender))));\r\n                         ^----------------------------------------------------------------------------^\n/temp/CryptoSpinners-0.sol:288:71: Warning: This function only accepts a single \"bytes\" argument. Please use \"abi.encodePacked(...)\" or a similar function to encode the data.\n ... keccak256(_seed + 1) ... \n     ^------------------^\n/temp/CryptoSpinners-0.sol:288:71: Warning: The provided argument of type uint256 is not implicitly convertible to expected type bytes memory.\n ... keccak256(_seed + 1) ... \n     ^------------------^\n/temp/CryptoSpinners-0.sol:288:110: Warning: This function only accepts a single \"bytes\" argument. Please use \"abi.encodePacked(...)\" or a similar function to encode the data.\n ... keccak256(_seed + 2) ... \n     ^------------------^\n/temp/CryptoSpinners-0.sol:288:110: Warning: The provided argument of type uint256 is not implicitly convertible to expected type bytes memory.\n ... keccak256(_seed + 2) ... \n     ^------------------^\n/temp/CryptoSpinners-0.sol:288:149: Warning: This function only accepts a single \"bytes\" argument. Please use \"abi.encodePacked(...)\" or a similar function to encode the data.\n ... keccak256(_seed + 3) ... \n     ^------------------^\n/temp/CryptoSpinners-0.sol:288:149: Warning: The provided argument of type uint256 is not implicitly convertible to expected type bytes memory.\n ... keccak256(_seed + 3) ... \n     ^------------------^\n/temp/CryptoSpinners-0.sol:296:65: Warning: This function only accepts a single \"bytes\" argument. Please use \"abi.encodePacked(...)\" or a similar function to encode the data.\n ... keccak256(_seed + 1) ... \n     ^------------------^\n/temp/CryptoSpinners-0.sol:296:65: Warning: The provided argument of type uint256 is not implicitly convertible to expected type bytes memory.\n ... keccak256(_seed + 1) ... \n     ^------------------^\n/temp/CryptoSpinners-0.sol:296:104: Warning: This function only accepts a single \"bytes\" argument. Please use \"abi.encodePacked(...)\" or a similar function to encode the data.\n ... keccak256(_seed + 2) ... \n     ^------------------^\n/temp/CryptoSpinners-0.sol:296:104: Warning: The provided argument of type uint256 is not implicitly convertible to expected type bytes memory.\n ... keccak256(_seed + 2) ... \n     ^------------------^\n/temp/CryptoSpinners-0.sol:296:143: Warning: This function only accepts a single \"bytes\" argument. Please use \"abi.encodePacked(...)\" or a similar function to encode the data.\n ... keccak256(_seed + 3) ... \n     ^------------------^\n/temp/CryptoSpinners-0.sol:296:143: Warning: The provided argument of type uint256 is not implicitly convertible to expected type bytes memory.\n ... keccak256(_seed + 3) ... \n     ^------------------^\n/temp/CryptoSpinners-0.sol:397:16: Warning: Using contract member \"balance\" inherited from the address type is deprecated. Convert the contract to \"address\" type to access the member, for example use \"address(contract).balance\" instead.\n        return this.balance;\r\n               ^----------^\n/temp/CryptoSpinners-0.sol:430:32: Warning: Using contract member \"balance\" inherited from the address type is deprecated. Convert the contract to \"address\" type to access the member, for example use \"address(contract).balance\" instead.\n        uint contractBalance = this.balance;\r\n                               ^----------^\n/temp/CryptoSpinners-0.sol:437:33: Warning: Using contract member \"balance\" inherited from the address type is deprecated. Convert the contract to \"address\" type to access the member, for example use \"address(contract).balance\" instead.\n        require(ownerBalance <= this.balance);\r\n                                ^----------^\n/temp/CryptoSpinners-0.sol:443:31: Warning: Using contract member \"balance\" inherited from the address type is deprecated. Convert the contract to \"address\" type to access the member, for example use \"address(contract).balance\" instead.\n        newProcessor.transfer(this.balance);\r\n                              ^----------^\n", "issues": []}
