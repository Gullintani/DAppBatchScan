{"error": null, "issues": [{"address": 436, "code": "0000000) {revert();}\n         \n         if ((numDays < minDays) || (numDays > maxDays)) {revert();}\n            Leaderboard memory leaderboard;\n            leaderboard.startTime = now;\n            leaderboard.endTime = (now + (numDays * 86400));\n            leaderboard.isLive = true;\n            leaderboard.sponsor = msg.sender;\n            leaderboard.prize = msg.value;\n            leaderboard.message = message;\n            leaderboard.id = totalLeaderboards;\n            \n            leaderboard.medalsClaimed= false;\n            leaderboard.numTeams = 4;\n    \n           Leaderboards.push(leaderboard);\n           \n            Team memory team;\n            team.angelId = 1;\n            team.petId = 1;\n            team.accessoryId = 0;\n            Leaderboards[totalLeaderboards].rank1 = team;\n            Leaderboards[totalLeaderboards].rank2 = team;\n            Leaderboards[totalLeaderboards].rank3 = team;\n            Leaderboards[totalLeaderboards].rank0 = team;\n            totalLeaderboards +=1;\n            contractReservedBalance += msg.value;\n           \n            \n        }\n        \n        function closeLeaderboard(uint16 leaderboardId) onlySERAPHIM external {\n           //will be called by the SponsoredLeaderboards contract with a certain chance after the minimum battle time. \n           \n            Leaderboard memory lea", "debug": "calldata_SponsoredLeaderboardData_32 + 4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_SponsoredLeaderboardData_0: 0x23a1e00e00000000000000000000000000000000000000000000000000000000\ncalldatasize_SponsoredLeaderboardData: 0x4\n", "description": "A possible integer overflow exists in the function `openLeaderboard(uint8,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/temp/Angel_Battles-16.sol", "function": "openLeaderboard(uint8,string)", "lineno": 228, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2513, "code": "eaderboards;\n          ", "debug": "timestamp: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffff3bc80\nstorage_6: 0x2700\ncalldata_SponsoredLeaderboardData_4: 0x27\ncallvalue: 0x2386f26fc10000\ncalldata_SponsoredLeaderboardData_0: 0x23a1e00e00000000000000000000000000000000000000000000000000000000\ncalldatasize_SponsoredLeaderboardData: 0x4\n", "description": "A possible integer overflow exists in the function `openLeaderboard(uint8,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/temp/Angel_Battles-16.sol", "function": "openLeaderboard(uint8,string)", "lineno": 238, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2751, "code": ";\ncontract AccessC", "debug": "storage_6: 0x0\nstorage_5: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_SponsoredLeaderboardData_4: 0x0\ncallvalue: 0x2386f26fc10000\ncalldata_SponsoredLeaderboardData_0: 0x23a1e00e00000000000000000000000000000000000000000000000000000000\ncalldatasize_SponsoredLeaderboardData: 0x4\n", "description": "A possible integer overflow exists in the function `openLeaderboard(uint8,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/temp/Angel_Battles-16.sol", "function": "openLeaderboard(uint8,string)", "lineno": 1, "title": "Integer Overflow ", "type": "Warning"}, {"address": 4883, "code": "board.medalsClai", "debug": "The exception is triggered under the following conditions:\n\nstorage_5: 0x0\ncalldata_SponsoredLeaderboardData_4: 0x0\ncalldata_SponsoredLeaderboardData_0: 0x5007364f00000000000000000000000000000000000000000000000000000000\ncalldatasize_SponsoredLeaderboardData: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/temp/Angel_Battles-16.sol", "function": "getLeaderboard(uint16)", "lineno": 362, "title": "Exception state", "type": "Informational"}, {"address": 6372, "code": "   function updateM", "debug": "storage_0: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncalldata_SponsoredLeaderboardData_4: 0xff00\ncaller: 0x0\ncalldata_SponsoredLeaderboardData_0: 0x7123691e00000000000000000000000000000000000000000000000000000000\ncalldatasize_SponsoredLeaderboardData: 0x4\ncallvalue: 0x0\n", "description": "A possible integer underflow exists in the function `removeSERAPHIM(address)`.\nThe subtraction may result in a value < 0.", "filename": "/temp/Angel_Battles-16.sol", "function": "removeSERAPHIM(address)", "lineno": 44, "title": "Integer Underflow", "type": "Warning"}, {"address": 6601, "code": "aderboardId <0) || (rank <0) || (rank >3) || (leaderboardId >", "debug": "", "description": "A possible transaction order independence vulnerability exists in function withdrawEther(). The value or direction of the call statement is determined from a tainted storage location", "filename": "/temp/Angel_Battles-16.sol", "function": "withdrawEther()", "lineno": 324, "title": "Transaction order dependence", "type": "Warning"}, {"address": 6741, "code": "certain position of a certa", "debug": "The exception is triggered under the following conditions:\n\nstorage_5: 0x0\ncalldata_SponsoredLeaderboardData_4: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xff00\ncalldata_SponsoredLeaderboardData_0: 0xa946d7bb00000000000000000000000000000000000000000000000000000000\ncalldatasize_SponsoredLeaderboardData: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/temp/Angel_Battles-16.sol", "function": "setMedalsClaimed(uint16)", "lineno": 321, "title": "Exception state", "type": "Informational"}, {"address": 16652, "code": "88Ee0E86DC;\n    \n      struct Team {\n        uint64 angelId;\n        uint64 petId;\n        uint64 accessoryId;\n    }\n    \n      struct Leaderboard {\n        uint startTime;\n        uint endTime;\n        Team rank0;\n        Team rank1;\n        Team rank2;\n        Team rank3;\n        bool isLive;\n        address sponsor;\n        uint prize;\n        uint16 id;\n        uint8 numTeams;\n        string message;\n        bool medalsClaimed;\n        \n    }\n\n    //main storage\n    Leaderboard []  Leaderboards;\n    \n    uint16 public totalLeaderboards;\n    \n    uint16 minDays= 4;\n    uint16 maxDays = 10;\n    \n    //The reserved balance is the total balance outstanding on all open leaderboards. \n    //We keep track of this figure to prevent the developers from pulling out money currently pledged\n    uint public contractReservedBalance;\n    \n    \n    mapping (uint64 => bool) angelsOnLeaderboards;\n    mapping (uint64 => bool) petsOnLeaderboards;\n    mapping (uint64 => bool) accessoriesOnLeaderboards;\n    \n    \n    \n      // write functions\n    function setMinMaxDays(uint8 _minDays, uint8 _maxDays) external {\n        minDays = _minDays;\n        maxDays = _maxDays;\n       }\n\n  \n        function openLeaderboard(uint8 numDays, string message) external payable {\n            // This function is called by the sponsor to create the Leaderboard by sending money. \n            \n           if (msg.value < 10000000000000000) {revert();}\n         \n         if ((numDays < minDays) || (numDays > maxDays)) {revert();}\n            Leaderboard memory leaderboard;\n            leaderboard.startTime = now;\n            leaderboard.endTime = (now + (numDays * 86400));\n            leaderboard.isLive = true;\n            leaderboard.sponsor = msg.sender;\n            leaderboard.prize = msg.value;\n            leaderboard.message = message;\n            leaderboard.id = totalLeaderboards;\n            \n            leaderboard.medalsClaimed= false;\n            leaderboard.numTeams = 4;\n    \n           Leaderboards.push(leaderboard);\n           \n            Team memory team;\n            team.angelId = 1;\n            team.petId = 1;\n            team.accessoryId = 0;\n            Leaderboards[totalLeaderboards].rank1 = team;\n            Leaderboards[totalLeaderboards].rank2 = team;\n            Leaderboards[totalLeaderboards].rank3 = team;\n            Leaderboards[totalLeaderboards].rank0 = team;\n            totalLeaderboards +=1;\n            contractReservedBalance += msg.value;\n           \n            \n        }\n        \n        function closeLeaderboard(uint16 leaderboardId) onlySERAPHIM external {\n           //will be called by the SponsoredLeaderboards contract with a certain chance after the minimum battle time. \n           \n            Leaderboard memory leaderboard;\n            leaderboard = Leaderboards[leaderboardId];\n            if (now < leaderboard.endTime) {revert();}\n            if (leaderboard.isLive = false) {revert();}\n            Leaderboards[leaderboardId].isLive = false;\n             IAngelCardData angelCardData = IAngelCardData(angelCardDataContract);\n             \n             address owner1;\n             address owner2;\n             address owner3;\n             address owner4;\n             \n            (,,,,,,,,,,owner1) = angelCardData.getAngel(Leaderboards[leaderboardId].rank0.angelId);\n            (,,,,,,,,,,owner2) = angelCardData.getAngel(Leaderboards[leaderboardId].rank1.angelId);\n            (,,,,,,,,,,owner3) = angelCardData.getAngel(Leaderboards[leaderboardId].rank2.angelId);\n            (,,,,,,,,,,owner4) = angelCardData.getAngel(Leaderboards[leaderboardId].rank3.angelId);\n            uint prize = Leaderboards[leaderboardId].prize;\n            \n            owner1.transfer(SafeDiv(safeMult(prize,45), 100));\n            owner2.transfer(SafeDiv(safeMult(prize,25), 100));\n            owner3.transfer(SafeDiv(safeMult(prize,15), 100));\n            owner4.transfer(SafeDiv(safeMult(prize,5), 100));\n    \n            //Free up cards to be on other Leaderboards\n            \n        angelsOnLeaderboards[Leaderboards[leaderboardId].rank0.angelId] = false;\n        petsOnLeaderboards[Leaderboards[leaderboardId].rank0.petId] = false;\n        accessoriesOnLeaderboards[Leaderboards[leaderboardId].rank0.accessoryId] = false;\n         \n             \n        angelsOnLeaderboards[Leaderboards[leaderboardId].rank1.angelId] = false;\n        petsOnLeaderboards[Leaderboards[leaderboardId].rank1.petId] = false;\n        accessoriesOnLeaderboards[Leaderboards[leaderboardId].rank1.accessoryId] = false;\n        \n            \n        angelsOnLeaderboards[Leaderboards[leaderboardId].rank2.angelId] = false;\n        petsOnLeaderboards[Leaderboards[leaderboardId].rank2.petId] = false;\n        accessoriesOnLeaderboards[Leaderboards[leaderboardId].rank2.accessoryId] = false;\n        \n            \n        angelsOnLeaderboards[Leaderboards[leaderboardId].rank3.angelId] = false;\n        petsOnLeaderboards[Leaderboards[leaderboardId].rank3.petId] = false;\n        accessoriesOnLeaderboards[Leaderboards[leaderboardId].rank3.accessoryId] = false;\n            \n            \n            \n            contractReservedBalance= contractReservedBalance -  SafeDiv(safeMult(prize,90), 100);\n        }\n  \n        \n        function setMedalsClaimed(uint16 leaderboardId) onlySERAPHIM external {\n            Leaderboards[leaderboardId].medalsClaimed = true;\n        }\n        \nfunction withdrawEther() external onlyCREATOR {\n    //make sure we can't transfer out balance for leaderboards that aren't open. \n    creatorAddress.transfer(this.balance-contractReservedBalance);\n}\n\n    // Call to get the specified team at a certain position of a certain board. \n   function getTeamFromLeaderboard(uint16 leaderboardId, uint8 rank) public constant returns (uint64 angelId, uint64 petId, uint64 accessoryId)   {\n      \n        if ((leaderboardId <0) || (rank <0) || (rank >3) || (leaderboardId > totalLeaderboards)) {revert();}\n        if (rank == 0) {\n       angelId = Leaderboards[leaderboardId].rank0.angelId;\n       petId = Leaderboards[leaderboardId].rank0.petId;\n       accessoryId = Leaderboards[leaderboardId].rank0.accessoryId;\n       return;\n        }\n         if (rank == 1) {\n       angelId = Leaderboards[leaderboardId].rank1.angelId;\n       petId = Leaderboards[leaderboardId].rank1.petId;\n       accessoryId = Leaderboards[leaderboardId].rank1.accessoryId;\n       return;\n        }\n          if (rank == 2) {\n       angelId = Leaderboards[leaderboardId].rank2.angelId;\n       petId = Leaderboards[leaderboardId].rank2.petId;\n       accessoryId = Leaderboards[leaderboardId].rank2.accessoryId;\n       return;\n        }\n          if (rank == 3) {\n       angelId = Leaderboards[leaderboardId].rank3.angelId;\n       petId = Leaderboards[leaderboardId].rank3.petId;\n       accessoryId = Leaderboards[leaderboardId].rank3.accessoryId;\n       return;\n        }\n    \n\n   }\n    function getLeaderboard(uint16 id) public constant returns (uint startTime, uint endTime, bool isLive, address sponsor, uint prize, uint8 numTeams, string message, bool medalsClaimed) {\n            Leaderboard memory leaderboard;\n            leaderboard = Leaderboards[id];\n            startTime = leaderboard.startTime;\n            endTime = leaderboard.endTime;\n            isLive = leaderboard.isLive;\n            sponsor = leaderboard.sponsor;\n            prize = leaderboard.prize;\n            numTeams = leaderboard.numTeams;\n            message = leaderboard.message;\n            medalsClaimed = leaderboard.medalsClaimed;\n    }\n    \n     \n\n\n        function newTeamOnEnd(uint16 leaderboardId, uint64 angelId, uint64 petId, uint64 accessoryId)  onlySERAPHIM external  {\n         //to be used when a team successfully challenges the last spot and knocks the prvious team out.   \n         \n                Team memory team;\n               //remove old team from mappings\n                team = Leaderboards[leaderboardId].rank3;\n                angelsOnLeaderboards[Leaderboards[leaderboardId].rank3.angelId] = false;\n               petsOnLeaderboards[Leaderboards[leaderboardId].rank3.petId] = false;\n               accessoriesOnLeaderboards[Leaderboards[leaderboardId].rank3.accessoryId] = false;\n                \n                //Add new team to end\n              Leaderboards[leaderboardId].rank3.angelId = angelId;\n              Leaderboards[leaderboardId].rank3.petId = petId;\n              Leaderboards[leaderboardId].rank3.accessoryId = accessoryId;\n              \n              angelsOnLeaderboards[angelId] = true;\n               petsOnLeaderboards[petId] = true;\n               accessoriesOnLeaderboards[accessoryId] = true;\n           \n            \n            \n        }\n        function switchRankings (uint16 leaderboardId, uint8 spot,uint64 angel1ID, uint64 pet1ID, uint64 accessory1ID,uint64 angel2ID,uint64 pet2ID,uint64 accessory2ID ) onlySERAPHIM external {\n        //put team 1 from spot to spot+1 and put team 2 to spot. \n    \n                Team memory team;\n                team.angelId = angel1ID;\n                team.petId = pet1ID;\n                team.accessoryId = accessory1ID;\n                if (spot == 0) {Leaderboards[leaderboardId].rank1 = team;}\n                if (spot == 1) {Leaderboards[leaderboardId].rank2 = team;}\n                if (spot == 2) {Leaderboards[leaderboardId].rank3 = team;}\n                \n                team.angelId = angel2ID;\n                team.petId = pet2ID;\n                team.accessoryId = accessory2ID;\n            \n                if (spot == 0) {Leaderboards[leaderboardId].rank0 = team;}\n                if (spot == 1) {Leaderboards[leaderboardId].rank1 = team;}\n                if (spot == 2) {Leaderboards[leaderboardId].rank2 = team;}\n        \n        }\n        \n        \n        function verifyPosition(uint16 leaderboardId, uint8 spot, uint64 angelID) external constant returns (bool) {\n          \n               if (spot == 0) {\n                   if (Leaderboards[leaderboardId].rank0.angelId == angelID) {return true;}\n               }\n               if (spot == 1) {\n                   if (Leaderboards[leaderboardId].rank1.angelId == angelID) {return true;}\n               }\n               if (spot == 2) {\n                   if (Leaderboards[leaderboardId].rank2.angelId == angelID) {return true;}\n               }\n                 if (spot == 3) {\n                   if (Leaderboards[leaderboardId].rank3.angelId == angelID) {return true;}\n               }\n               \n               \n                return false;\n                \n        }\n        \n        //each angel can only be on ONE sponsored leaderboard at a time. \n        function angelOnLeaderboards(uint64 angelID) external constant returns (bool) {\n           \n            return angelsOnLeaderboards[angelID]; \n        }\n        \n        //each pet can only be on ONE sponsored leaderboard at a time. \n         function petOnLeaderboards(uint64 petID) external constant returns (bool) {\n           \n            return petsOnLeaderboards[petID]; \n        }\n        \n        //Each Accessory can only be on one sponsored leaderboard\n         function accessoryOnLeaderboards(uint64 accessoryID) external constant returns (bool) {\n           \n            return accessoriesOnLeaderboards[accessoryID]; \n        }\n        \n       \n    \n    function safeMult(uint x, uint y) pure internal returns(uint) {\n      uint z = x * y;\n      assert((x == 0)||(z/x == y));\n      return z;\n    }\n    \n     function SafeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n    /// Read access\n     }\n   \n   \n    function getTotalLeaderboards() public constant returns (uint16) {\n        return totalLeaderboards;\n    }\n      \n  \n        \n   \n        \n        \n        \n   \n      \n        \n   \n}", "debug": "storage_6: 0x0\ncalldata_SponsoredLeaderboardData_4 + calldata_SponsoredLeaderboardData_32 + 4: 0x8000000000000000000000000000000000000000000000000000000000000000\ncalldata_SponsoredLeaderboardData_4: 0x0\ncallvalue: 0x2386f26fc10000\ncalldata_SponsoredLeaderboardData_0: 0x23a1e00e00000000000000000000000000000000000000000000000000000000\ncalldatasize_SponsoredLeaderboardData: 0x4\n", "description": "A possible integer overflow exists in the function `openLeaderboard(uint8,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/temp/Angel_Battles-16.sol", "function": "openLeaderboard(uint8,string)", "lineno": 174, "title": "Integer Overflow ", "type": "Warning"}], "success": true}
