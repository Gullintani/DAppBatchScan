{"error": null, "issues": [{"address": 325, "code": "ame(string _username)\n        public\n        returns (bool)\n    {\n        address senderAddress = msg.sender;\n        Entry storage entry = usernames.data[senderAddress];\n        entry.value = _username;\n        if (entry.keyIndex > 0) {\n            return true;\n        } else {\n            entry.keyIndex = ++usernames.keys.length;\n            usernames.keys[entry.keyIndex - 1] = senderAddress;\n            return false;\n        }\n    }\n\n    function removeUsername()", "debug": "calldata_Users_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_Users_0: 0x56e7bcd100000000000000000000000000000000000000000000000000000000\ncalldatasize_Users: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `putUsername(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/temp/Crypto_Serval-1.sol", "function": "putUsername(string)", "lineno": 18, "title": "Integer Overflow ", "type": "Warning"}, {"address": 831, "debug": "The exception is triggered under the following conditions:\n\ncalldata_Users_4: 0x0\nstorage_1: 0x0\ncalldata_Users_0: 0xbac9fe700000000000000000000000000000000000000000000000000000000\ncalldatasize_Users: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/temp/Crypto_Serval-1.sol", "function": "getUsernameByIndex(uint256)", "lineno": 85, "title": "Exception state", "type": "Informational"}, {"address": 1228, "code": "          usernames.key", "debug": "keccac_1_+\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\nstorage_1 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x82\nstorage_1: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_Users_4 + calldata_Users_4: 0x0\ncalldata_Users_0: 0x56e7bcd100000000000000000000000000000000000000000000000000000000\ncalldatasize_Users: 0x4\nstorage_0 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `putUsername(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/temp/Crypto_Serval-1.sol", "function": "putUsername(string)", "lineno": 29, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1273, "code": "x - 1] = senderAddress;\n          ", "debug": "The exception is triggered under the following conditions:\n\nkeccac_1_+\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xfc0fffffffffffffdfeffd000000000000000000000000000000000000000005\nstorage_1 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3\nstorage_1: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_Users_4 + calldata_Users_4: 0x0\ncalldata_Users_0: 0x56e7bcd100000000000000000000000000000000000000000000000000000000\ncalldatasize_Users: 0x4\nstorage_0 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0x0\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/temp/Crypto_Serval-1.sol", "function": "putUsername(string)", "lineno": 29, "title": "Exception state", "type": "Informational"}, {"address": 1960, "code": "    public\n        ", "debug": "The exception is triggered under the following conditions:\n\ncalldata_Users_4: 0x0\nstorage_1: 0x0\ncalldata_Users_0: 0xce10cf8800000000000000000000000000000000000000000000000000000000\ncalldatasize_Users: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/temp/Crypto_Serval-1.sol", "function": "getAddressByIndex(uint256)", "lineno": 79, "title": "Exception state", "type": "Informational"}, {"address": 2280, "code": "ract Users {\n    struct Entry {\n        uint keyIndex;\n        string value;\n    }\n\n    struct AddressStringMap {\n        mapping(address => Entry) data;\n        address[] keys;\n    }\n\n    AddressStringMap internal usernames;\n\n    function putUsername(string _username)\n        public\n        returns (bool)\n    {\n        address senderAddress = msg.sender;\n        Entry storage entry = usernames.data[senderAddress];\n        entry.value = _username;\n        if (entry.keyIndex > 0) {\n            return true;\n        } else {\n            entry.keyIndex = ++usernames.keys.length;\n            usernames.keys[entry.keyIndex - 1] = senderAddress;\n            return false;\n        }\n    }\n\n    function removeUsername()\n        public\n        returns (bool)\n    {\n        address senderAddress = msg.sender;\n        Entry storage entry = usernames.data[senderAddress];\n        if (entry.keyIndex == 0) {\n            return false;\n        }\n\n        if (entry.keyIndex <= usernames.keys.length) {\n            // Move an existing element into the vacated key slot.\n            usernames.data[usernames.keys[usernames.keys.length - 1]].keyIndex = entry.keyIndex;\n            usernames.keys[entry.keyIndex - 1] = usernames.keys[usernames.keys.length - 1];\n            usernames.keys.length -= 1;\n            delete usernames.data[senderAddress];\n            return true;\n        }\n    }\n\n    function size()\n        public\n        view\n        returns (uint)\n    {\n        return usernames.keys.length;\n    }\n\n    function getUsernameByAddress(address _address)\n        public\n        constant\n        returns (string)\n    {\n        return usernames.data[_address].value;\n    }\n\n    function getAddressByIndex(uint idx)\n        public\n        constant\n        returns (address)\n    {\n        return usernames.keys[idx];\n    }\n\n    function getUsernameByIndex(uint idx)\n        public\n        constant\n        returns (string)\n    {\n        return usernames.data[usernames.keys[idx]].value;\n    }\n}", "debug": "keccac_1_+\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xff13e6a7459ae5a4c49c419171c3f89100a371508000000000129200000219e2\nstorage_1 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xbac1c3147749165dd7d1977fffffffffffffffffffffffffffffffffffffffc5\ncalldata_Users_0: 0x56e7bcd100000000000000000000000000000000000000000000000000000000\ncalldatasize_Users: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `putUsername(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/temp/Crypto_Serval-1.sol", "function": "putUsername(string)", "lineno": 5, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2309, "code": "ract Users {\n    struct Entry {\n        uint keyIndex;\n        string value;\n    }\n\n    struct AddressStringMap {\n        mapping(address => Entry) data;\n        address[] keys;\n    }\n\n    AddressStringMap internal usernames;\n\n    function putUsername(string _username)\n        public\n        returns (bool)\n    {\n        address senderAddress = msg.sender;\n        Entry storage entry = usernames.data[senderAddress];\n        entry.value = _username;\n        if (entry.keyIndex > 0) {\n            return true;\n        } else {\n            entry.keyIndex = ++usernames.keys.length;\n            usernames.keys[entry.keyIndex - 1] = senderAddress;\n            return false;\n        }\n    }\n\n    function removeUsername()\n        public\n        returns (bool)\n    {\n        address senderAddress = msg.sender;\n        Entry storage entry = usernames.data[senderAddress];\n        if (entry.keyIndex == 0) {\n            return false;\n        }\n\n        if (entry.keyIndex <= usernames.keys.length) {\n            // Move an existing element into the vacated key slot.\n            usernames.data[usernames.keys[usernames.keys.length - 1]].keyIndex = entry.keyIndex;\n            usernames.keys[entry.keyIndex - 1] = usernames.keys[usernames.keys.length - 1];\n            usernames.keys.length -= 1;\n            delete usernames.data[senderAddress];\n            return true;\n        }\n    }\n\n    function size()\n        public\n        view\n        returns (uint)\n    {\n        return usernames.keys.length;\n    }\n\n    function getUsernameByAddress(address _address)\n        public\n        constant\n        returns (string)\n    {\n        return usernames.data[_address].value;\n    }\n\n    function getAddressByIndex(uint idx)\n        public\n        constant\n        returns (address)\n    {\n        return usernames.keys[idx];\n    }\n\n    function getUsernameByIndex(uint idx)\n        public\n        constant\n        returns (string)\n    {\n        return usernames.data[usernames.keys[idx]].value;\n    }\n}", "debug": "calldata_Users_4 + calldata_Users_4: 0x8000000000000000000000000000000000000000000000000000000000000000\ncalldata_Users_0: 0x56e7bcd100000000000000000000000000000000000000000000000000000000\ncalldatasize_Users: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `putUsername(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/temp/Crypto_Serval-1.sol", "function": "putUsername(string)", "lineno": 5, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2323, "code": "ract Users {\n    struct Entry {\n        uint keyIndex;\n        string value;\n    }\n\n    struct AddressStringMap {\n        mapping(address => Entry) data;\n        address[] keys;\n    }\n\n    AddressStringMap internal usernames;\n\n    function putUsername(string _username)\n        public\n        returns (bool)\n    {\n        address senderAddress = msg.sender;\n        Entry storage entry = usernames.data[senderAddress];\n        entry.value = _username;\n        if (entry.keyIndex > 0) {\n            return true;\n        } else {\n            entry.keyIndex = ++usernames.keys.length;\n            usernames.keys[entry.keyIndex - 1] = senderAddress;\n            return false;\n        }\n    }\n\n    function removeUsername()\n        public\n        returns (bool)\n    {\n        address senderAddress = msg.sender;\n        Entry storage entry = usernames.data[senderAddress];\n        if (entry.keyIndex == 0) {\n            return false;\n        }\n\n        if (entry.keyIndex <= usernames.keys.length) {\n            // Move an existing element into the vacated key slot.\n            usernames.data[usernames.keys[usernames.keys.length - 1]].keyIndex = entry.keyIndex;\n            usernames.keys[entry.keyIndex - 1] = usernames.keys[usernames.keys.length - 1];\n            usernames.keys.length -= 1;\n            delete usernames.data[senderAddress];\n            return true;\n        }\n    }\n\n    function size()\n        public\n        view\n        returns (uint)\n    {\n        return usernames.keys.length;\n    }\n\n    function getUsernameByAddress(address _address)\n        public\n        constant\n        returns (string)\n    {\n        return usernames.data[_address].value;\n    }\n\n    function getAddressByIndex(uint idx)\n        public\n        constant\n        returns (address)\n    {\n        return usernames.keys[idx];\n    }\n\n    function getUsernameByIndex(uint idx)\n        public\n        constant\n        returns (string)\n    {\n        return usernames.data[usernames.keys[idx]].value;\n    }\n}", "debug": "calldata_Users_4 + calldata_Users_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\ncalldata_Users_0: 0x56e7bcd100000000000000000000000000000000000000000000000000000000\ncalldatasize_Users: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `putUsername(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/temp/Crypto_Serval-1.sol", "function": "putUsername(string)", "lineno": 5, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2345, "code": "ract Users {\n    struct Entry {\n        uint keyIndex;\n        string value;\n    }\n\n    struct AddressStringMap {\n        mapping(address => Entry) data;\n        address[] keys;\n    }\n\n    AddressStringMap internal usernames;\n\n    function putUsername(string _username)\n        public\n        returns (bool)\n    {\n        address senderAddress = msg.sender;\n        Entry storage entry = usernames.data[senderAddress];\n        entry.value = _username;\n        if (entry.keyIndex > 0) {\n            return true;\n        } else {\n            entry.keyIndex = ++usernames.keys.length;\n            usernames.keys[entry.keyIndex - 1] = senderAddress;\n            return false;\n        }\n    }\n\n    function removeUsername()\n        public\n        returns (bool)\n    {\n        address senderAddress = msg.sender;\n        Entry storage entry = usernames.data[senderAddress];\n        if (entry.keyIndex == 0) {\n            return false;\n        }\n\n        if (entry.keyIndex <= usernames.keys.length) {\n            // Move an existing element into the vacated key slot.\n            usernames.data[usernames.keys[usernames.keys.length - 1]].keyIndex = entry.keyIndex;\n            usernames.keys[entry.keyIndex - 1] = usernames.keys[usernames.keys.length - 1];\n            usernames.keys.length -= 1;\n            delete usernames.data[senderAddress];\n            return true;\n        }\n    }\n\n    function size()\n        public\n        view\n        returns (uint)\n    {\n        return usernames.keys.length;\n    }\n\n    function getUsernameByAddress(address _address)\n        public\n        constant\n        returns (string)\n    {\n        return usernames.data[_address].value;\n    }\n\n    function getAddressByIndex(uint idx)\n        public\n        constant\n        returns (address)\n    {\n        return usernames.keys[idx];\n    }\n\n    function getUsernameByIndex(uint idx)\n        public\n        constant\n        returns (string)\n    {\n        return usernames.data[usernames.keys[idx]].value;\n    }\n}", "debug": "keccac_1_+\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncalldata_Users_4 + calldata_Users_4: 0x4000f04100100000000000000000000000000000d6401413fffffffffffffe0\ncalldata_Users_0: 0x56e7bcd100000000000000000000000000000000000000000000000000000000\ncalldatasize_Users: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `putUsername(string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/temp/Crypto_Serval-1.sol", "function": "putUsername(string)", "lineno": 5, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2395, "code": "ract Users {\n    struct Entry {\n        uint keyIndex;\n        string value;\n    }\n\n    struct AddressStringMap {\n        mapping(address => Entry) data;\n        address[] keys;\n    }\n\n    AddressStringMap internal usernames;\n\n    function putUsername(string _username)\n        public\n        returns (bool)\n    {\n        address senderAddress = msg.sender;\n        Entry storage entry = usernames.data[senderAddress];\n        entry.value = _username;\n        if (entry.keyIndex > 0) {\n            return true;\n        } else {\n            entry.keyIndex = ++usernames.keys.length;\n            usernames.keys[entry.keyIndex - 1] = senderAddress;\n            return false;\n        }\n    }\n\n    function removeUsername()\n        public\n        returns (bool)\n    {\n        address senderAddress = msg.sender;\n        Entry storage entry = usernames.data[senderAddress];\n        if (entry.keyIndex == 0) {\n            return false;\n        }\n\n        if (entry.keyIndex <= usernames.keys.length) {\n            // Move an existing element into the vacated key slot.\n            usernames.data[usernames.keys[usernames.keys.length - 1]].keyIndex = entry.keyIndex;\n            usernames.keys[entry.keyIndex - 1] = usernames.keys[usernames.keys.length - 1];\n            usernames.keys.length -= 1;\n            delete usernames.data[senderAddress];\n            return true;\n        }\n    }\n\n    function size()\n        public\n        view\n        returns (uint)\n    {\n        return usernames.keys.length;\n    }\n\n    function getUsernameByAddress(address _address)\n        public\n        constant\n        returns (string)\n    {\n        return usernames.data[_address].value;\n    }\n\n    function getAddressByIndex(uint idx)\n        public\n        constant\n        returns (address)\n    {\n        return usernames.keys[idx];\n    }\n\n    function getUsernameByIndex(uint idx)\n        public\n        constant\n        returns (string)\n    {\n        return usernames.data[usernames.keys[idx]].value;\n    }\n}", "debug": "storage_0 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xffbffffffffffffffffe7fffffe1800000000000000000000000000000000000\nstorage_1: 0xffbfffffffffffffffffffffffe1940000000000000000000000000000000000\ncalldata_Users_0: 0xb96144fd00000000000000000000000000000000000000000000000000000000\ncalldatasize_Users: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `removeUsername()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/temp/Crypto_Serval-1.sol", "function": "removeUsername()", "lineno": 5, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2397, "code": "ract Users {\n    struct Entry {\n        uint keyIndex;\n        string value;\n    }\n\n    struct AddressStringMap {\n        mapping(address => Entry) data;\n        address[] keys;\n    }\n\n    AddressStringMap internal usernames;\n\n    function putUsername(string _username)\n        public\n        returns (bool)\n    {\n        address senderAddress = msg.sender;\n        Entry storage entry = usernames.data[senderAddress];\n        entry.value = _username;\n        if (entry.keyIndex > 0) {\n            return true;\n        } else {\n            entry.keyIndex = ++usernames.keys.length;\n            usernames.keys[entry.keyIndex - 1] = senderAddress;\n            return false;\n        }\n    }\n\n    function removeUsername()\n        public\n        returns (bool)\n    {\n        address senderAddress = msg.sender;\n        Entry storage entry = usernames.data[senderAddress];\n        if (entry.keyIndex == 0) {\n            return false;\n        }\n\n        if (entry.keyIndex <= usernames.keys.length) {\n            // Move an existing element into the vacated key slot.\n            usernames.data[usernames.keys[usernames.keys.length - 1]].keyIndex = entry.keyIndex;\n            usernames.keys[entry.keyIndex - 1] = usernames.keys[usernames.keys.length - 1];\n            usernames.keys.length -= 1;\n            delete usernames.data[senderAddress];\n            return true;\n        }\n    }\n\n    function size()\n        public\n        view\n        returns (uint)\n    {\n        return usernames.keys.length;\n    }\n\n    function getUsernameByAddress(address _address)\n        public\n        constant\n        returns (string)\n    {\n        return usernames.data[_address].value;\n    }\n\n    function getAddressByIndex(uint idx)\n        public\n        constant\n        returns (address)\n    {\n        return usernames.keys[idx];\n    }\n\n    function getUsernameByIndex(uint idx)\n        public\n        constant\n        returns (string)\n    {\n        return usernames.data[usernames.keys[idx]].value;\n    }\n}", "debug": "storage_0 +\nkeccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xfffffffffffffffffbffffff8000000000000000000000000000000000000000\nstorage_1: 0xfffffffffffffffffbffffff8000000000000000000000000000000000000000\ncalldata_Users_0: 0xb96144fd00000000000000000000000000000000000000000000000000000000\ncalldatasize_Users: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `removeUsername()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/temp/Crypto_Serval-1.sol", "function": "removeUsername()", "lineno": 5, "title": "Integer Overflow ", "type": "Warning"}], "success": true}
