{"error": null, "issues": [{"address": 756, "code": "   } else if(_ran", "debug": "The exception is triggered under the following conditions:\n\ncalldata_SampleStorage_4: 0x58\ncalldata_SampleStorage_0: 0x4036ab7800000000000000000000000000000000000000000000000000000000\ncalldatasize_SampleStorage: 0x4\nstorage_3: 0x0\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/temp/CryptoJingles-4.sol", "function": "getType(uint256)", "lineno": 80, "title": "Exception state", "type": "Informational"}, {"address": 770, "code": "omNum < 900) {\n   ", "debug": "The exception is triggered under the following conditions:\n\nstorage_3: 0x2fd\ncalldata_SampleStorage_4: 0x200\ncalldata_SampleStorage_0: 0x4036ab7800000000000000000000000000000000000000000000000000000000\ncalldatasize_SampleStorage: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/temp/CryptoJingles-4.sol", "function": "getType(uint256)", "lineno": 80, "title": "Exception state", "type": "Informational"}, {"address": 817, "code": "     range = 10", "debug": "The exception is triggered under the following conditions:\n\ncalldata_SampleStorage_4: 0x300\ncalldata_SampleStorage_0: 0x4036ab7800000000000000000000000000000000000000000000000000000000\ncalldatasize_SampleStorage: 0x4\nstorage_4: 0x0\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/temp/CryptoJingles-4.sol", "function": "getType(uint256)", "lineno": 84, "title": "Exception state", "type": "Informational"}, {"address": 831, "code": "          return _", "debug": "The exception is triggered under the following conditions:\n\nstorage_4: 0x17d\ncalldata_SampleStorage_4: 0x258\ncalldata_SampleStorage_0: 0x4036ab7800000000000000000000000000000000000000000000000000000000\ncalldatasize_SampleStorage: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/temp/CryptoJingles-4.sol", "function": "getType(uint256)", "lineno": 85, "title": "Exception state", "type": "Informational"}, {"address": 853, "code": "\n\ncontract Jingle is", "debug": "The exception is triggered under the following conditions:\n\ncalldata_SampleStorage_4: 0x3d8\ncalldata_SampleStorage_0: 0x4036ab7800000000000000000000000000000000000000000000000000000000\ncalldatasize_SampleStorage: 0x4\nstorage_5: 0x0\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/temp/CryptoJingles-4.sol", "function": "getType(uint256)", "lineno": 89, "title": "Exception state", "type": "Informational"}, {"address": 867, "code": " \n    struct MetaI", "debug": "The exception is triggered under the following conditions:\n\ncalldata_SampleStorage_4: 0x3d8\nstorage_5: 0x6c\ncalldata_SampleStorage_0: 0x4036ab7800000000000000000000000000000000000000000000000000000000\ncalldatasize_SampleStorage: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/temp/CryptoJingles-4.sol", "function": "getType(uint256)", "lineno": 92, "title": "Exception state", "type": "Informational"}, {"address": 1052, "code": "           nu", "debug": "storage_3: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_0: 0x0\ncaller: 0x0\ncalldata_SampleStorage_0: 0xe576038f00000000000000000000000000000000000000000000000000000000\ncalldatasize_SampleStorage: 0x4\ncalldata_SampleStorage_32 + 4: 0x0\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `addNewSampleType(string,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/temp/CryptoJingles-4.sol", "function": "addNewSampleType(string,uint256)", "lineno": 58, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1084, "code": "      numOf", "debug": "storage_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_0: 0x0\ncaller: 0x0\ncalldata_SampleStorage_0: 0xe576038f00000000000000000000000000000000000000000000000000000000\ncalldatasize_SampleStorage: 0x4\ncalldata_SampleStorage_32 + 4: 0x1\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `addNewSampleType(string,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/temp/CryptoJingles-4.sol", "function": "addNewSampleType(string,uint256)", "lineno": 60, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1116, "code": "         numOfMy", "debug": "storage_5: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_0: 0x0\ncaller: 0x0\ncalldata_SampleStorage_0: 0xe576038f00000000000000000000000000000000000000000000000000000000\ncalldatasize_SampleStorage: 0x4\ncalldata_SampleStorage_32 + 4: 0x2\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `addNewSampleType(string,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/temp/CryptoJingles-4.sol", "function": "addNewSampleType(string,uint256)", "lineno": 62, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1148, "code": "SampleTypes] = ", "debug": "storage_6: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_0: 0x0\ncaller: 0x0\ncalldata_SampleStorage_0: 0xe576038f00000000000000000000000000000000000000000000000000000000\ncalldatasize_SampleStorage: 0x4\ncalldata_SampleStorage_32 + 4: 0x3\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `addNewSampleType(string,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/temp/CryptoJingles-4.sol", "function": "addNewSampleType(string,uint256)", "lineno": 65, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1215, "code": "pfsHash,\n           rarity: _rarityType\n        });\n        \n        numOfSampleTypes++;\n    }\n    \n    function getT", "debug": "mem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_SampleStorage_4 + calldata_SampleStorage_4)) +\n0: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\nstorage_0: 0x0\ncaller: 0x0\ncalldata_SampleStorage_0: 0xe576038f00000000000000000000000000000000000000000000000000000000\ncalldatasize_SampleStorage: 0x4\ncalldata_SampleStorage_32 + 4: 0x0\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `addNewSampleType(string,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/temp/CryptoJingles-4.sol", "function": "addNewSampleType(string,uint256)", "lineno": 66, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1254, "code": "public view return", "debug": "keccac_0_+_keccac_storage_2: 0xff53f00602402b80400004fa1ffffffffffffffffe103ffffe00240980df69f8\nstorage_2: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_0 + keccac_storage_2: 0x3551afb79748e0ffffffffffffffffffffffffffffffffffffffffffffffffc3\nmem_mem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_SampleStorage_4 + calldata_SampleStorage_4)) +\n0: 0x0\nstorage_0: 0x0\ncaller: 0x0\ncalldata_SampleStorage_0: 0xe576038f00000000000000000000000000000000000000000000000000000000\ncalldatasize_SampleStorage: 0x4\ncalldata_SampleStorage_32 + 4: 0x0\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `addNewSampleType(string,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/temp/CryptoJingles-4.sol", "function": "addNewSampleType(string,uint256)", "lineno": 73, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1643, "code": "    \n    struct Sample {\n        string ipfsHash;\n        uint rarity;\n    }\n    \n    mapping (uint => Sample) sampleTypes;\n    \n    uint public numOfSampleTypes;\n    \n    uint public numOfCommon;\n    uint public numOfRare;\n    uint public numOfLegendary;\n    uint public numOfMythical;\n    \n    function addNewSampleType(string _ipfsHash, uint _rarityType) public onlyOwner {\n        \n        if (_rarityType == 0) {\n            numOfCommon++;\n        } else if (_rarityType == 1) {\n            numOfRare++;\n        } else if(_rarityType == 2) {\n            numOfLegendary++;\n        } else if(_rarityType == 3) {\n            numOfMythical++;\n        }\n        \n        sampleTypes[numOfSampleTypes] = Sample({\n           ipfsHash: _ipfsHash,\n           rarity: _rarityType\n        });\n        \n        numOfSampleTypes++;\n    }\n    \n    function getType(uint _randomNum) public view returns (uint) {\n        uint range = 0;\n        \n        if (_randomNum > 0 && _randomNum < 600) {\n            range = 600 / numOfCommon;\n            return _randomNum / range;\n            \n        } else if(_randomNum >= 600 && _randomNum < 900) {\n            range = 300 / numOfRare;\n            return _randomNum / range;\n        } else {\n            range = 100 / numOfLegendary;\n            return _randomNum / range;\n        }\n    }\n    \n}\n\ncontract Jingle is Ownable, ERC721 {\n    \n    struct MetaInfo {\n        string name;\n ", "debug": "keccac_0_+_keccac_storage_2: 0xff13e6a7459ae5a4c49c419171c3f89100a371508000000000129200000219e2\nstorage_0 + keccac_storage_2: 0xbac1c3147749165dd7d1977fffffffffffffffffffffffffffffffffffffffc5\nstorage_0: 0x0\ncaller: 0x0\ncalldata_SampleStorage_0: 0xe576038f00000000000000000000000000000000000000000000000000000000\ncalldatasize_SampleStorage: 0x4\ncalldata_SampleStorage_32 + 4: 0x0\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `addNewSampleType(string,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/temp/CryptoJingles-4.sol", "function": "addNewSampleType(string,uint256)", "lineno": 38, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1672, "code": "    \n    struct Sample {\n        string ipfsHash;\n        uint rarity;\n    }\n    \n    mapping (uint => Sample) sampleTypes;\n    \n    uint public numOfSampleTypes;\n    \n    uint public numOfCommon;\n    uint public numOfRare;\n    uint public numOfLegendary;\n    uint public numOfMythical;\n    \n    function addNewSampleType(string _ipfsHash, uint _rarityType) public onlyOwner {\n        \n        if (_rarityType == 0) {\n            numOfCommon++;\n        } else if (_rarityType == 1) {\n            numOfRare++;\n        } else if(_rarityType == 2) {\n            numOfLegendary++;\n        } else if(_rarityType == 3) {\n            numOfMythical++;\n        }\n        \n        sampleTypes[numOfSampleTypes] = Sample({\n           ipfsHash: _ipfsHash,\n           rarity: _rarityType\n        });\n        \n        numOfSampleTypes++;\n    }\n    \n    function getType(uint _randomNum) public view returns (uint) {\n        uint range = 0;\n        \n        if (_randomNum > 0 && _randomNum < 600) {\n            range = 600 / numOfCommon;\n            return _randomNum / range;\n            \n        } else if(_randomNum >= 600 && _randomNum < 900) {\n            range = 300 / numOfRare;\n            return _randomNum / range;\n        } else {\n            range = 100 / numOfLegendary;\n            return _randomNum / range;\n        }\n    }\n    \n}\n\ncontract Jingle is Ownable, ERC721 {\n    \n    struct MetaInfo {\n        string name;\n ", "debug": "mem_mem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_SampleStorage_4 + calldata_SampleStorage_4)) +\n0: 0x8000000000000000000000000000000000000000000000000000000000000000\nstorage_0: 0x0\ncaller: 0x0\ncalldata_SampleStorage_0: 0xe576038f00000000000000000000000000000000000000000000000000000000\ncalldatasize_SampleStorage: 0x4\ncalldata_SampleStorage_32 + 4: 0x0\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `addNewSampleType(string,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/temp/CryptoJingles-4.sol", "function": "addNewSampleType(string,uint256)", "lineno": 38, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1686, "code": "    \n    struct Sample {\n        string ipfsHash;\n        uint rarity;\n    }\n    \n    mapping (uint => Sample) sampleTypes;\n    \n    uint public numOfSampleTypes;\n    \n    uint public numOfCommon;\n    uint public numOfRare;\n    uint public numOfLegendary;\n    uint public numOfMythical;\n    \n    function addNewSampleType(string _ipfsHash, uint _rarityType) public onlyOwner {\n        \n        if (_rarityType == 0) {\n            numOfCommon++;\n        } else if (_rarityType == 1) {\n            numOfRare++;\n        } else if(_rarityType == 2) {\n            numOfLegendary++;\n        } else if(_rarityType == 3) {\n            numOfMythical++;\n        }\n        \n        sampleTypes[numOfSampleTypes] = Sample({\n           ipfsHash: _ipfsHash,\n           rarity: _rarityType\n        });\n        \n        numOfSampleTypes++;\n    }\n    \n    function getType(uint _randomNum) public view returns (uint) {\n        uint range = 0;\n        \n        if (_randomNum > 0 && _randomNum < 600) {\n            range = 600 / numOfCommon;\n            return _randomNum / range;\n            \n        } else if(_randomNum >= 600 && _randomNum < 900) {\n            range = 300 / numOfRare;\n            return _randomNum / range;\n        } else {\n            range = 100 / numOfLegendary;\n            return _randomNum / range;\n        }\n    }\n    \n}\n\ncontract Jingle is Ownable, ERC721 {\n    \n    struct MetaInfo {\n        string name;\n ", "debug": "mem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_SampleStorage_4 + calldata_SampleStorage_4)) +\n0: 0xc48c04261444f7ce9c1a66f6c355debe3fffffffffffffffffffffffffffffed\nmem_mem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_SampleStorage_4 + calldata_SampleStorage_4)) +\n0: 0xe9ed542651000003d76906f7c018193fbfffffffffffffffffffffffffffffcb\nstorage_0: 0x0\ncaller: 0x0\ncalldata_SampleStorage_0: 0xe576038f00000000000000000000000000000000000000000000000000000000\ncalldatasize_SampleStorage: 0x4\ncalldata_SampleStorage_32 + 4: 0x0\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `addNewSampleType(string,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/temp/CryptoJingles-4.sol", "function": "addNewSampleType(string,uint256)", "lineno": 38, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1703, "code": "    \n    struct Sample {\n        string ipfsHash;\n        uint rarity;\n    }\n    \n    mapping (uint => Sample) sampleTypes;\n    \n    uint public numOfSampleTypes;\n    \n    uint public numOfCommon;\n    uint public numOfRare;\n    uint public numOfLegendary;\n    uint public numOfMythical;\n    \n    function addNewSampleType(string _ipfsHash, uint _rarityType) public onlyOwner {\n        \n        if (_rarityType == 0) {\n            numOfCommon++;\n        } else if (_rarityType == 1) {\n            numOfRare++;\n        } else if(_rarityType == 2) {\n            numOfLegendary++;\n        } else if(_rarityType == 3) {\n            numOfMythical++;\n        }\n        \n        sampleTypes[numOfSampleTypes] = Sample({\n           ipfsHash: _ipfsHash,\n           rarity: _rarityType\n        });\n        \n        numOfSampleTypes++;\n    }\n    \n    function getType(uint _randomNum) public view returns (uint) {\n        uint range = 0;\n        \n        if (_randomNum > 0 && _randomNum < 600) {\n            range = 600 / numOfCommon;\n            return _randomNum / range;\n            \n        } else if(_randomNum >= 600 && _randomNum < 900) {\n            range = 300 / numOfRare;\n            return _randomNum / range;\n        } else {\n            range = 100 / numOfLegendary;\n            return _randomNum / range;\n        }\n    }\n    \n}\n\ncontract Jingle is Ownable, ERC721 {\n    \n    struct MetaInfo {\n        string name;\n ", "debug": "mem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_SampleStorage_4 + calldata_SampleStorage_4)) +\n0: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa0\nmem_mem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_SampleStorage_4 + calldata_SampleStorage_4)) +\n0: 0x25\nstorage_0: 0x0\ncaller: 0x0\ncalldata_SampleStorage_0: 0xe576038f00000000000000000000000000000000000000000000000000000000\ncalldatasize_SampleStorage: 0x4\ncalldata_SampleStorage_32 + 4: 0x0\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `addNewSampleType(string,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/temp/CryptoJingles-4.sol", "function": "addNewSampleType(string,uint256)", "lineno": 38, "title": "Integer Overflow ", "type": "Warning"}, {"address": 1708, "code": "    \n    struct Sample {\n        string ipfsHash;\n        uint rarity;\n    }\n    \n    mapping (uint => Sample) sampleTypes;\n    \n    uint public numOfSampleTypes;\n    \n    uint public numOfCommon;\n    uint public numOfRare;\n    uint public numOfLegendary;\n    uint public numOfMythical;\n    \n    function addNewSampleType(string _ipfsHash, uint _rarityType) public onlyOwner {\n        \n        if (_rarityType == 0) {\n            numOfCommon++;\n        } else if (_rarityType == 1) {\n            numOfRare++;\n        } else if(_rarityType == 2) {\n            numOfLegendary++;\n        } else if(_rarityType == 3) {\n            numOfMythical++;\n        }\n        \n        sampleTypes[numOfSampleTypes] = Sample({\n           ipfsHash: _ipfsHash,\n           rarity: _rarityType\n        });\n        \n        numOfSampleTypes++;\n    }\n    \n    function getType(uint _randomNum) public view returns (uint) {\n        uint range = 0;\n        \n        if (_randomNum > 0 && _randomNum < 600) {\n            range = 600 / numOfCommon;\n            return _randomNum / range;\n            \n        } else if(_randomNum >= 600 && _randomNum < 900) {\n            range = 300 / numOfRare;\n            return _randomNum / range;\n        } else {\n            range = 100 / numOfLegendary;\n            return _randomNum / range;\n        }\n    }\n    \n}\n\ncontract Jingle is Ownable, ERC721 {\n    \n    struct MetaInfo {\n        string name;\n ", "debug": "mem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_SampleStorage_4 + calldata_SampleStorage_4)) +\n0: 0x9ffbffffffffd99db48e28ffffffffffffffffffffffffffffffffffffffffe8\nkeccac_0_+_keccac_storage_2: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nmem_mem_160 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_SampleStorage_4 + calldata_SampleStorage_4)) +\n0: 0x2021fda91bfffffffffffffffffffffffffffffffffffffffff8\nstorage_0: 0x0\ncaller: 0x0\ncalldata_SampleStorage_0: 0xe576038f00000000000000000000000000000000000000000000000000000000\ncalldatasize_SampleStorage: 0x4\ncalldata_SampleStorage_32 + 4: 0x0\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `addNewSampleType(string,uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/temp/CryptoJingles-4.sol", "function": "addNewSampleType(string,uint256)", "lineno": 38, "title": "Integer Overflow ", "type": "Warning"}], "success": true}
