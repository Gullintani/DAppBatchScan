{"error": null, "issues": [{"address": 891, "code": "ame;\n    symbol = _symbol;\n  }\n\n  /* MODIFIER */\n\n  modifier onlyManager {\n    require(msg.sender == manager);\n    _;\n  }\n\n}", "debug": "calldata_ERC20Interface_4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_ERC20Interface_0: 0x5a44621500000000000000000000000000000000000000000000000000000000\ncalldatasize_ERC20Interface: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `setNameAndSymbol(string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/temp/Chicken_Hunt-2.sol", "function": "setNameAndSymbol(string,string)", "lineno": 105, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2175, "code": "eturns (uint256) {\n    ret", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/temp/Chicken_Hunt-2.sol", "function": "totalSupply()", "lineno": 87, "title": "Message call to external contract", "type": "Informational"}, {"address": 2175, "code": "eturns (uint256) {\n    ret", "debug": "", "description": "A possible transaction order independence vulnerability exists in function totalSupply(). The value or direction of the call statement is determined from a tainted storage location", "filename": "/temp/Chicken_Hunt-2.sol", "function": "totalSupply()", "lineno": 87, "title": "Transaction order dependence", "type": "Warning"}, {"address": 2665, "code": "ed[_from][msg.sender] -= _value;\n      emit Transfe", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/temp/Chicken_Hunt-2.sol", "function": "transferFrom(address,address,uint256)", "lineno": 68, "title": "Message call to external contract", "type": "Informational"}, {"address": 2665, "code": "ed[_from][msg.sender] -= _value;\n      emit Transfe", "debug": "", "description": "A possible transaction order independence vulnerability exists in function transferFrom(address,address,uint256). The value or direction of the call statement is determined from a tainted storage location", "filename": "/temp/Chicken_Hunt-2.sol", "function": "transferFrom(address,address,uint256)", "lineno": 68, "title": "Transaction order dependence", "type": "Warning"}, {"address": 3368, "code": "er) public view returns (uint", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/temp/Chicken_Hunt-2.sol", "function": "balanceOf(address)", "lineno": 91, "title": "Message call to external contract", "type": "Informational"}, {"address": 3368, "code": "er) public view returns (uint", "debug": "", "description": "A possible transaction order independence vulnerability exists in function balanceOf(address). The value or direction of the call statement is determined from a tainted storage location", "filename": "/temp/Chicken_Hunt-2.sol", "function": "balanceOf(address)", "lineno": 91, "title": "Transaction order dependence", "type": "Warning"}, {"address": 3842, "code": "\n      emit Transfer(msg.sender, _to, _value);\n    }\n  }", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/temp/Chicken_Hunt-2.sol", "function": "transfer(address,uint256)", "lineno": 60, "title": "Message call to external contract", "type": "Informational"}, {"address": 3842, "code": "\n      emit Transfer(msg.sender, _to, _value);\n    }\n  }", "debug": "", "description": "A possible transaction order independence vulnerability exists in function transfer(address,uint256). The value or direction of the call statement is determined from a tainted storage location", "filename": "/temp/Chicken_Hunt-2.sol", "function": "transfer(address,uint256)", "lineno": 60, "title": "Transaction order dependence", "type": "Warning"}, {"address": 4342, "code": "turns (uint256) {\n    return chic", "debug": "", "description": "This contract executes a message call to to another contract. Make sure that the called contract is trusted and does not execute user-supplied code.", "filename": "/temp/Chicken_Hunt-2.sol", "function": "saveChickenOf(address)", "lineno": 83, "title": "Message call to external contract", "type": "Informational"}, {"address": 4342, "code": "turns (uint256) {\n    return chic", "debug": "", "description": "A possible transaction order independence vulnerability exists in function saveChickenOf(address). The value or direction of the call statement is determined from a tainted storage location", "filename": "/temp/Chicken_Hunt-2.sol", "function": "saveChickenOf(address)", "lineno": 83, "title": "Transaction order dependence", "type": "Warning"}, {"address": 4724, "code": "ace {\n\n  ChickenTokenDelegate public chickenHunt;\n  string public name = \"Chicken\";\n  string public symbol = \"CHICKEN\";\n  uint8 public decimals = 0;\n  mapping (address => mapping (address => uint256)) internal allowed;\n  address public manager;\n\n  constructor() public {\n    manager = msg.sender;\n  }\n\n  function transfer(address _to, uint256 _value) public returns (bool success) {\n    if (success = chickenHunt.transferChickenFrom(msg.sender, _to, _value)) {\n      emit Transfer(msg.sender, _to, _value);\n    }\n  }\n\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n    require(_value <= allowed[_from][msg.sender]);\n    if (success = chickenHunt.transferChickenFrom(_from, _to, _value)) {\n      allowed[_from][msg.sender] -= _value;\n      emit Transfer(_from, _to, _value);\n    }\n  }\n\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  function saveChickenOf(address _owner) public returns (uint256) {\n    return chickenHunt.saveChickenOf(_owner);\n  }\n\n  function totalSupply() public view returns (uint256) {\n    return chickenHunt.totalChicken();\n  }\n\n  function balanceOf(address _owner) public view returns (uint256) {\n    return chickenHunt.chickenOf(_owner);\n  }\n\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  function setChickenHunt(address _chickenHunt) public onlyManager {\n    // Once set, it can not be changed.\n    require(chickenHunt == address(0));\n    chickenHunt = ChickenTokenDelegate(_chickenHunt);\n  }\n\n  function setNameAndSymbol(string _name, string _symbol)\n    public\n    onlyManager\n  {\n    name = _name;\n    symbol = _symbol;\n  }\n\n  /* MODIFIER */\n\n  modifier onlyManager {\n    require(msg.sender == manager);\n    _;\n  }\n\n}", "debug": "storage_1: 0x5fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\nmem_128 +\n32 +\n32*\nConcat(0,\n       Extract(255,\n               5,\n               31 +\n               calldata_ERC20Interface_4 + calldata_ERC20Interface_4)): 0x8000000000000000000000000000000000000000000000000000000000000000\ncalldata_ERC20Interface_4 + calldata_ERC20Interface_4: 0x0\nstorage_5: 0x0\ncaller: 0x0\ncalldata_ERC20Interface_0: 0x5a44621500000000000000000000000000000000000000000000000000000000\ncalldatasize_ERC20Interface: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `setNameAndSymbol(string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/temp/Chicken_Hunt-2.sol", "function": "setNameAndSymbol(string,string)", "lineno": 46, "title": "Integer Overflow ", "type": "Warning"}, {"address": 4738, "code": "ace {\n\n  ChickenTokenDelegate public chickenHunt;\n  string public name = \"Chicken\";\n  string public symbol = \"CHICKEN\";\n  uint8 public decimals = 0;\n  mapping (address => mapping (address => uint256)) internal allowed;\n  address public manager;\n\n  constructor() public {\n    manager = msg.sender;\n  }\n\n  function transfer(address _to, uint256 _value) public returns (bool success) {\n    if (success = chickenHunt.transferChickenFrom(msg.sender, _to, _value)) {\n      emit Transfer(msg.sender, _to, _value);\n    }\n  }\n\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n    require(_value <= allowed[_from][msg.sender]);\n    if (success = chickenHunt.transferChickenFrom(_from, _to, _value)) {\n      allowed[_from][msg.sender] -= _value;\n      emit Transfer(_from, _to, _value);\n    }\n  }\n\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  function saveChickenOf(address _owner) public returns (uint256) {\n    return chickenHunt.saveChickenOf(_owner);\n  }\n\n  function totalSupply() public view returns (uint256) {\n    return chickenHunt.totalChicken();\n  }\n\n  function balanceOf(address _owner) public view returns (uint256) {\n    return chickenHunt.chickenOf(_owner);\n  }\n\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  function setChickenHunt(address _chickenHunt) public onlyManager {\n    // Once set, it can not be changed.\n    require(chickenHunt == address(0));\n    chickenHunt = ChickenTokenDelegate(_chickenHunt);\n  }\n\n  function setNameAndSymbol(string _name, string _symbol)\n    public\n    onlyManager\n  {\n    name = _name;\n    symbol = _symbol;\n  }\n\n  /* MODIFIER */\n\n  modifier onlyManager {\n    require(msg.sender == manager);\n    _;\n  }\n\n}", "debug": "calldata_ERC20Interface_4 + calldata_ERC20Interface_4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\nstorage_5: 0x0\ncaller: 0x0\ncalldata_ERC20Interface_0: 0x5a44621500000000000000000000000000000000000000000000000000000000\ncalldatasize_ERC20Interface: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `setNameAndSymbol(string,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/temp/Chicken_Hunt-2.sol", "function": "setNameAndSymbol(string,string)", "lineno": 46, "title": "Integer Overflow ", "type": "Warning"}], "success": true}
