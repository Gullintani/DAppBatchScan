{"error": null, "issues": [{"address": 918, "code": "sender, theNum));\n\n\t\townership[theNum].theMessage = aMessage;\n\t}\n\n//---------------------\n// Buy now\n//---------------------\n\n\tfunction hasBuyNow", "debug": "calldata_NumberBoard_32 + 4: 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc\ncalldata_NumberBoard_0: 0x7f94938600000000000000000000000000000000000000000000000000000000\ncalldatasize_NumberBoard: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `updateMessage(uint256,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/temp/NumberBoard-0.sol", "function": "updateMessage(uint256,string)", "lineno": 79, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3155, "code": ";\n\ncontract Number", "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_2 + keccac_calldata_NumberBoard_4: 0xdd83f7f8af5940bbbafeca9a46defb91bd4a9c9c8467e400400300002000f0c5\nkeccac_2_+_keccac_calldata_NumberBoard_4: 0xfe300e18c158ec412f5c4ede49124210c0840a26d60f2007ff5ff3ffff7ffd4e\ncaller: 0xffffffffffffffffffffffffffffffffffffffff\nstorage_0 + keccac_calldata_NumberBoard_4: 0x0\ncalldata_NumberBoard_0: 0x30ef3d5600000000000000000000000000000000000000000000000000000000\ncalldatasize_NumberBoard: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `takeNumber(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/temp/NumberBoard-0.sol", "function": "takeNumber(uint256)", "lineno": 1, "title": "Integer Overflow ", "type": "Warning"}, {"address": 3258, "code": "Num);\n\t}\n\n\tfunction transferNumberOwne", "debug": "storage_2 + keccac_calldata_NumberBoard_4: 0xc3a51fffffffffffffffffffffffffffffffffffffffffffffffffffffffffc9\nkeccac_2_+_keccac_calldata_NumberBoard_4: 0xff8243e83475260000000000292c41a054453f7aa00003033bb91097d7984bab\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\ncaller: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\ncaller: 0xffffffffffffffffffffffffffffffffffffffff\nstorage_0 + keccac_calldata_NumberBoard_4: 0x0\ncalldata_NumberBoard_0: 0x30ef3d5600000000000000000000000000000000000000000000000000000000\ncalldatasize_NumberBoard: 0x4\ncallvalue: 0x0\n", "description": "A possible integer underflow exists in the function `takeNumber(uint256)`.\nThe subtraction may result in a value < 0.", "filename": "/temp/NumberBoard-0.sol", "function": "takeNumber(uint256)", "lineno": 61, "title": "Integer Underflow", "type": "Warning"}, {"address": 3726, "code": " => uint[]) \t\tpublic ownershipLookup;\n\n\tuint consta", "debug": "The exception is triggered under the following conditions:\n\ncalldata_NumberBoard_32 + 4: 0x0\nstorage_keccac_1461501637330902918203684832716283019655932542975_&\ncalldata_NumberBoard_4: 0x0\ncalldata_NumberBoard_0: 0x655b97db00000000000000000000000000000000000000000000000000000000\ncalldatasize_NumberBoard: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/temp/NumberBoard-0.sol", "function": "_function_0x655b97db", "lineno": 16, "title": "Exception state", "type": "Informational"}, {"address": 4038, "code": "heNum, msg.value);\n\t}\n\n\tfunction cancelBid(uint theNu", "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\nUDiv(storage_5_+_keccac_calldata_NumberBoard_4,_256): 0xcc999abb3cd2040fd841ebfb9f6ffbbf3f7f7ae641b909266183423f1ae35335\ncallvalue: 0xef815d200011b7f18d3f1d02afa80001c22663ef180d817ff00da833a4327000\nstorage_6 + keccac_calldata_NumberBoard_4: 0xe8a1baa00211b44f5b7d2be31f6eff3c2e2554e79c05490cf0610b6ec21f6b91\ncaller: 0x0\nstorage_0 + keccac_calldata_NumberBoard_4: 0xffffffffffffffffffffffffffffffffffffffff00\ncalldata_NumberBoard_0: 0x8108676300000000000000000000000000000000000000000000000000000000\ncalldatasize_NumberBoard: 0x4\n", "description": "A possible integer overflow exists in the function `placeNewBid(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/temp/NumberBoard-0.sol", "function": "placeNewBid(uint256)", "lineno": 148, "title": "Integer Overflow ", "type": "Warning"}, {"address": 4983, "code": "\n}", "debug": "SOLVER OUTPUT:\ncalldata_NumberBoard_0: 0xb73c6ce900000000000000000000000000000000000000000000000000000000\ncalldatasize_NumberBoard: 0x4\ncallvalue: 0x0\n", "description": "In the function `withdrawEarnings()` a non-zero amount of Ether is sent to msg.sender.\nIt seems that this function can be called without restrictions.", "filename": "/temp/NumberBoard-0.sol", "function": "withdrawEarnings()", "lineno": 208, "title": "Ether send", "type": "Warning"}, {"address": 5432, "code": "drawHouseEarnings() {\n\t\treq", "debug": "SOLVER OUTPUT:\ncalldata_NumberBoard_0: 0xddb2253700000000000000000000000000000000000000000000000000000000\ncalldatasize_NumberBoard: 0x4\ncallvalue: 0x0\n", "description": "In the function `withdrawDeadBids()` a non-zero amount of Ether is sent to msg.sender.\nIt seems that this function can be called without restrictions.", "filename": "/temp/NumberBoard-0.sol", "function": "withdrawDeadBids()", "lineno": 202, "title": "Ether send", "type": "Warning"}, {"address": 5845, "code": "withdrawEarnings() {\n \t\tu", "debug": "storage_2: 0xffeba89700fa76b9fdbe44b0837482e31d7fffffffffc2ff26396e8f79bcffd5\nstorage_6 + keccac_calldata_NumberBoard_4: 0x80de4e4feb27a41081d6101d0d8258c800000000001910877206be90057b2e78\nstorage_5 + keccac_calldata_NumberBoard_4: 0xffffffffffffffffffffffffffffffffffffffff00\ncaller: 0x0\nstorage_0 + keccac_calldata_NumberBoard_4: 0x0\ncalldata_NumberBoard_0: 0x2b1fd58a00000000000000000000000000000000000000000000000000000000\ncalldatasize_NumberBoard: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `acceptBid(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/temp/NumberBoard-0.sol", "function": "acceptBid(uint256)", "lineno": 196, "title": "Integer Overflow ", "type": "Warning"}, {"address": 6642, "code": "Owner(msg.sender, theNum));\n\n\t\tANumberCard storage nu", "debug": "storage_keccac_1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\n1461501637330902918203684832716283019655932542975_&\nUDiv(storage_5_+_keccac_calldata_NumberBoard_4,_256): 0xa8795cd3fffffffffffffffffffffffffffffffffffffffffffffffffffffffe\nstorage_6 + keccac_calldata_NumberBoard_4: 0x57f25cd000000000000000000000000000000000000000000000000000000000\nstorage_5 + keccac_calldata_NumberBoard_4: 0x0\ncaller: 0x0\ncalldata_NumberBoard_0: 0x9703ef3500000000000000000000000000000000000000000000000000000000\ncalldatasize_NumberBoard: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `cancelBid(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/temp/NumberBoard-0.sol", "function": "cancelBid(uint256)", "lineno": 168, "title": "Integer Overflow ", "type": "Warning"}, {"address": 6812, "code": "ntract NumberBoard {\n\n\tstruct ANumberCard {\n\t\taddress\t\t\towner;\n\t\tuint\t\t\tlookupIdx;\n\t\tstring  \t\ttheMessage;\n\t\tbool\t\t\tbuyNowActive;\n\t\tuint \t\t\tbuyNowPrice;\n\t\taddress\t\t\tcurrentBidder;\n\t\tuint\t\t\tcurrentBid;\n\t}\n\n\tmapping(uint => ANumberCard) \tpublic ownership;\n\tmapping(address => uint[]) \t\tpublic ownershipLookup;\n\n\tuint constant\t\t\t\t\tpublic minPrice = 1 finney;\n\tuint\t\t\t\t\t\t\tpublic houseEarnings;\n\tmapping(address => uint)\t\tpublic earnings;\n\tmapping(address => uint)\t\tpublic deadbids;\n\n\taddress houseOwner;\n\n\tevent NumberTaken(uint indexed number);\n\tevent PriceSet(uint indexed number, uint price);\n\tevent BidPlaced(uint indexed number, uint price);\n\tevent BidCanceled(uint indexed number, uint price);\n\tevent BidAccepted(uint indexed number, uint price);\n\tevent PriceAccepted(uint indexed number, uint price);\n\n\tfunction NumberBoard() {\n\t\thouseOwner = msg.sender;\n\t}\n\n\tfunction isOwner(address addr, uint theNum) constant returns (bool) {\n\t\treturn ownership[theNum].owner == addr;\n\t}\n\n\tfunction hasOwner(uint theNum) constant returns (bool) {\n\t\treturn ownership[theNum].owner > 0;\n\t}\n\n\tfunction ownedNumbers(address addr) constant returns (uint[]) {\n\t\tuint l = ownershipLookup[addr].length;\n\t\tuint[] memory ret = new uint[](l);\n\t\tfor (uint i = 0; i < l; i++) {\n\t\t\tret[i] = ownershipLookup[addr][i];\n\t\t}\n\t\treturn ret;\n\t}\n\n\tfunction takeNumber(uint theNum) {\n\t\trequire(!hasOwner(theNum));\n\t\trequire(!isOwner(msg.sender, theNum));\n\n\t\townership[theNum] = ANumberCard(msg.sender, 0, \"\", false, 0, 0, 0);\n\t\townershipLookup[msg.sender].push(theNum);\n\t\townership[theNum].lookupIdx = ownershipLookup[msg.sender].length - 1;\n\n\t\tNumberTaken(theNum);\n\t}\n\n\tfunction transferNumberOwnership(uint theNum, address from, address to) private {\n\t\trequire(isOwner(from, theNum));\n\n\t\tANumberCard storage card = ownership[theNum];\n\n\t\tcard.owner = to;\n\t\tuint len = ownershipLookup[from].length;\n\t\townershipLookup[from][card.lookupIdx] = ownershipLookup[from][len - 1];\n\t\townershipLookup[from].length--;\n\n\t\townershipLookup[to].push(theNum);\n\t\townership[theNum].lookupIdx = ownershipLookup[to].length - 1;\n\t}\n\n\tfunction updateMessage(uint theNum, string aMessage) {\n\t\trequire(isOwner(msg.sender, theNum));\n\n\t\townership[theNum].theMessage = aMessage;\n\t}\n\n//---------------------\n// Buy now\n//---------------------\n\n\tfunction hasBuyNowOffer(uint theNum) constant returns (bool) {\n\t\treturn ownership[theNum].buyNowActive;\n\t}\n\n\tfunction canAcceptBuyNow(uint theNum, address buyer) constant returns (bool) {\n\t\treturn ownership[theNum].owner != buyer && hasBuyNowOffer(theNum);\n\t}\n\n\tfunction placeBuyNowOffer(uint theNum, uint price) {\n\t\trequire(isOwner(msg.sender, theNum));\n\t\trequire(price >= minPrice);\n\n\t\tANumberCard storage numCard = ownership[theNum];\n\t\tnumCard.buyNowPrice = price;\n\t\tnumCard.buyNowActive = true;\n\n\t\tPriceSet(theNum, price);\n\t}\n\n\tfunction cancelBuyNowOffer(uint theNum) {\n\t\trequire(isOwner(msg.sender, theNum));\n\t\tcancelBuyNowOfferInternal(ownership[theNum]);\n\t}\n\n\tfunction acceptBuyNowOffer(uint theNum) payable {\n\t\trequire (canAcceptBuyNow(theNum, msg.sender));\n\t\tANumberCard storage numCard = ownership[theNum];\n\t\trequire (msg.value == numCard.buyNowPrice);\n\n\t\taddEarnings(msg.value, numCard.owner);\n\t\tcancelBidInternal(theNum);\n\n\t\ttransferNumberOwnership(theNum, numCard.owner, msg.sender);\n\t\tcancelBuyNowOfferInternal(numCard);\n\n\t\tPriceAccepted(theNum, msg.value);\n\t}\n\n\tfunction cancelBuyNowOfferInternal(ANumberCard storage numCard) private {\n\t\tnumCard.buyNowPrice = 0;\n\t\tnumCard.buyNowActive = false;\t\t\n\t}\n\n//---------------------\n// Bidding\n//---------------------\n\n\tfunction placeNewBid(uint theNum) payable {\n\t\trequire(hasOwner(theNum));\n\t\trequire(!isOwner(msg.sender, theNum));\n\t\trequire(msg.value >= minPrice);\n\n\t\tANumberCard storage numCard = ownership[theNum];\n\t\trequire(msg.value > numCard.currentBid + minPrice);\n\n\t\tdeadbids[numCard.currentBidder] += numCard.currentBid;\n\n\t\tnumCard.currentBid = msg.value;\n\t\tnumCard.currentBidder = msg.sender;\n\n\t\tBidPlaced(theNum, msg.value);\n\t}\n\n\tfunction cancelBid(uint theNum) {\n\t\tANumberCard storage numCard = ownership[theNum];\n\t\trequire(msg.sender == numCard.currentBidder);\n\n\t\tuint amount = numCard.currentBid;\n\t\tcancelBidInternal(theNum);\n\t\tBidCanceled(theNum, amount);\n\t}\n\n\tfunction cancelBidInternal(uint theNum) private {\n\t\tANumberCard storage numCard = ownership[theNum];\n\t\tdeadbids[numCard.currentBidder] += numCard.currentBid;\n\t\tnumCard.currentBid = 0;\n\t\tnumCard.currentBidder = 0;\n\t}\n\n\tfunction acceptBid(uint theNum) {\n\t\trequire(isOwner(msg.sender, theNum));\n\n\t\tANumberCard storage numCard = ownership[theNum];\n\t\trequire(numCard.currentBid > 0);\n\t\trequire(numCard.currentBidder != 0);\n\n\t\tuint amount = numCard.currentBid;\n\t\taddEarnings(amount, numCard.owner);\n\t\ttransferNumberOwnership(theNum, numCard.owner, numCard.currentBidder);\n\n\t\tnumCard.currentBidder = 0;\n\t\tnumCard.currentBid = 0;\n\n\t\tBidAccepted(theNum, amount);\n\t}\n\n\tfunction addEarnings(uint amount, address to) private {\n\t\tuint interest = amount / 100;\n\t\tearnings[to] += amount - interest;\n\t\thouseEarnings += interest;\n\t}\n\n\tfunction withdrawDeadBids() {\n \t\tuint amount = deadbids[msg.sender];\n        deadbids[msg.sender] = 0;\n        msg.sender.transfer(amount);\n\t}\n\n\tfunction withdrawEarnings() {\n \t\tuint amount = earnings[msg.sender];\n        earnings[msg.sender] = 0;\n        msg.sender.transfer(amount);\n\t}\n\n\tfunction withdrawHouseEarnings() {\n\t\trequire(msg.sender == houseOwner);\n\n\t\tuint amount = houseEarnings;\n\t\thouseEarnings = 0;\n        msg.sender.transfer(amount);\n\t}\n}", "debug": "storage_2 + keccac_calldata_NumberBoard_4: 0xbac1c3147749165dd7d1977fffffffffffffffffffffffffffffffffffffffc5\nkeccac_2_+_keccac_calldata_NumberBoard_4: 0xff13e6a7459ae5a4c49c419171c3f89100a371508000000000129200000219e2\ncaller: 0xffffffffffffffffffffffffffffffffffffffff\nstorage_0 + keccac_calldata_NumberBoard_4: 0x0\ncalldata_NumberBoard_0: 0x30ef3d5600000000000000000000000000000000000000000000000000000000\ncalldatasize_NumberBoard: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `takeNumber(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/temp/NumberBoard-0.sol", "function": "takeNumber(uint256)", "lineno": 3, "title": "Integer Overflow ", "type": "Warning"}, {"address": 6940, "code": "ntract NumberBoard {\n\n\tstruct ANumberCard {\n\t\taddress\t\t\towner;\n\t\tuint\t\t\tlookupIdx;\n\t\tstring  \t\ttheMessage;\n\t\tbool\t\t\tbuyNowActive;\n\t\tuint \t\t\tbuyNowPrice;\n\t\taddress\t\t\tcurrentBidder;\n\t\tuint\t\t\tcurrentBid;\n\t}\n\n\tmapping(uint => ANumberCard) \tpublic ownership;\n\tmapping(address => uint[]) \t\tpublic ownershipLookup;\n\n\tuint constant\t\t\t\t\tpublic minPrice = 1 finney;\n\tuint\t\t\t\t\t\t\tpublic houseEarnings;\n\tmapping(address => uint)\t\tpublic earnings;\n\tmapping(address => uint)\t\tpublic deadbids;\n\n\taddress houseOwner;\n\n\tevent NumberTaken(uint indexed number);\n\tevent PriceSet(uint indexed number, uint price);\n\tevent BidPlaced(uint indexed number, uint price);\n\tevent BidCanceled(uint indexed number, uint price);\n\tevent BidAccepted(uint indexed number, uint price);\n\tevent PriceAccepted(uint indexed number, uint price);\n\n\tfunction NumberBoard() {\n\t\thouseOwner = msg.sender;\n\t}\n\n\tfunction isOwner(address addr, uint theNum) constant returns (bool) {\n\t\treturn ownership[theNum].owner == addr;\n\t}\n\n\tfunction hasOwner(uint theNum) constant returns (bool) {\n\t\treturn ownership[theNum].owner > 0;\n\t}\n\n\tfunction ownedNumbers(address addr) constant returns (uint[]) {\n\t\tuint l = ownershipLookup[addr].length;\n\t\tuint[] memory ret = new uint[](l);\n\t\tfor (uint i = 0; i < l; i++) {\n\t\t\tret[i] = ownershipLookup[addr][i];\n\t\t}\n\t\treturn ret;\n\t}\n\n\tfunction takeNumber(uint theNum) {\n\t\trequire(!hasOwner(theNum));\n\t\trequire(!isOwner(msg.sender, theNum));\n\n\t\townership[theNum] = ANumberCard(msg.sender, 0, \"\", false, 0, 0, 0);\n\t\townershipLookup[msg.sender].push(theNum);\n\t\townership[theNum].lookupIdx = ownershipLookup[msg.sender].length - 1;\n\n\t\tNumberTaken(theNum);\n\t}\n\n\tfunction transferNumberOwnership(uint theNum, address from, address to) private {\n\t\trequire(isOwner(from, theNum));\n\n\t\tANumberCard storage card = ownership[theNum];\n\n\t\tcard.owner = to;\n\t\tuint len = ownershipLookup[from].length;\n\t\townershipLookup[from][card.lookupIdx] = ownershipLookup[from][len - 1];\n\t\townershipLookup[from].length--;\n\n\t\townershipLookup[to].push(theNum);\n\t\townership[theNum].lookupIdx = ownershipLookup[to].length - 1;\n\t}\n\n\tfunction updateMessage(uint theNum, string aMessage) {\n\t\trequire(isOwner(msg.sender, theNum));\n\n\t\townership[theNum].theMessage = aMessage;\n\t}\n\n//---------------------\n// Buy now\n//---------------------\n\n\tfunction hasBuyNowOffer(uint theNum) constant returns (bool) {\n\t\treturn ownership[theNum].buyNowActive;\n\t}\n\n\tfunction canAcceptBuyNow(uint theNum, address buyer) constant returns (bool) {\n\t\treturn ownership[theNum].owner != buyer && hasBuyNowOffer(theNum);\n\t}\n\n\tfunction placeBuyNowOffer(uint theNum, uint price) {\n\t\trequire(isOwner(msg.sender, theNum));\n\t\trequire(price >= minPrice);\n\n\t\tANumberCard storage numCard = ownership[theNum];\n\t\tnumCard.buyNowPrice = price;\n\t\tnumCard.buyNowActive = true;\n\n\t\tPriceSet(theNum, price);\n\t}\n\n\tfunction cancelBuyNowOffer(uint theNum) {\n\t\trequire(isOwner(msg.sender, theNum));\n\t\tcancelBuyNowOfferInternal(ownership[theNum]);\n\t}\n\n\tfunction acceptBuyNowOffer(uint theNum) payable {\n\t\trequire (canAcceptBuyNow(theNum, msg.sender));\n\t\tANumberCard storage numCard = ownership[theNum];\n\t\trequire (msg.value == numCard.buyNowPrice);\n\n\t\taddEarnings(msg.value, numCard.owner);\n\t\tcancelBidInternal(theNum);\n\n\t\ttransferNumberOwnership(theNum, numCard.owner, msg.sender);\n\t\tcancelBuyNowOfferInternal(numCard);\n\n\t\tPriceAccepted(theNum, msg.value);\n\t}\n\n\tfunction cancelBuyNowOfferInternal(ANumberCard storage numCard) private {\n\t\tnumCard.buyNowPrice = 0;\n\t\tnumCard.buyNowActive = false;\t\t\n\t}\n\n//---------------------\n// Bidding\n//---------------------\n\n\tfunction placeNewBid(uint theNum) payable {\n\t\trequire(hasOwner(theNum));\n\t\trequire(!isOwner(msg.sender, theNum));\n\t\trequire(msg.value >= minPrice);\n\n\t\tANumberCard storage numCard = ownership[theNum];\n\t\trequire(msg.value > numCard.currentBid + minPrice);\n\n\t\tdeadbids[numCard.currentBidder] += numCard.currentBid;\n\n\t\tnumCard.currentBid = msg.value;\n\t\tnumCard.currentBidder = msg.sender;\n\n\t\tBidPlaced(theNum, msg.value);\n\t}\n\n\tfunction cancelBid(uint theNum) {\n\t\tANumberCard storage numCard = ownership[theNum];\n\t\trequire(msg.sender == numCard.currentBidder);\n\n\t\tuint amount = numCard.currentBid;\n\t\tcancelBidInternal(theNum);\n\t\tBidCanceled(theNum, amount);\n\t}\n\n\tfunction cancelBidInternal(uint theNum) private {\n\t\tANumberCard storage numCard = ownership[theNum];\n\t\tdeadbids[numCard.currentBidder] += numCard.currentBid;\n\t\tnumCard.currentBid = 0;\n\t\tnumCard.currentBidder = 0;\n\t}\n\n\tfunction acceptBid(uint theNum) {\n\t\trequire(isOwner(msg.sender, theNum));\n\n\t\tANumberCard storage numCard = ownership[theNum];\n\t\trequire(numCard.currentBid > 0);\n\t\trequire(numCard.currentBidder != 0);\n\n\t\tuint amount = numCard.currentBid;\n\t\taddEarnings(amount, numCard.owner);\n\t\ttransferNumberOwnership(theNum, numCard.owner, numCard.currentBidder);\n\n\t\tnumCard.currentBidder = 0;\n\t\tnumCard.currentBid = 0;\n\n\t\tBidAccepted(theNum, amount);\n\t}\n\n\tfunction addEarnings(uint amount, address to) private {\n\t\tuint interest = amount / 100;\n\t\tearnings[to] += amount - interest;\n\t\thouseEarnings += interest;\n\t}\n\n\tfunction withdrawDeadBids() {\n \t\tuint amount = deadbids[msg.sender];\n        deadbids[msg.sender] = 0;\n        msg.sender.transfer(amount);\n\t}\n\n\tfunction withdrawEarnings() {\n \t\tuint amount = earnings[msg.sender];\n        earnings[msg.sender] = 0;\n        msg.sender.transfer(amount);\n\t}\n\n\tfunction withdrawHouseEarnings() {\n\t\trequire(msg.sender == houseOwner);\n\n\t\tuint amount = houseEarnings;\n\t\thouseEarnings = 0;\n        msg.sender.transfer(amount);\n\t}\n}", "debug": "storage_2 + keccac_calldata_NumberBoard_4: 0xbac1c3147749165dd7d1977fffffffffffffffffffffffffffffffffffffffc5\nkeccac_2_+_keccac_calldata_NumberBoard_4: 0xff13e6a7459ae5a4c49c419171c3f89100a371508000000000129200000219e2\ncaller: 0x0\nstorage_0 + keccac_calldata_NumberBoard_4: 0x0\ncalldata_NumberBoard_0: 0x7f94938600000000000000000000000000000000000000000000000000000000\ncalldatasize_NumberBoard: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `updateMessage(uint256,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/temp/NumberBoard-0.sol", "function": "updateMessage(uint256,string)", "lineno": 3, "title": "Integer Overflow ", "type": "Warning"}, {"address": 6969, "code": "ntract NumberBoard {\n\n\tstruct ANumberCard {\n\t\taddress\t\t\towner;\n\t\tuint\t\t\tlookupIdx;\n\t\tstring  \t\ttheMessage;\n\t\tbool\t\t\tbuyNowActive;\n\t\tuint \t\t\tbuyNowPrice;\n\t\taddress\t\t\tcurrentBidder;\n\t\tuint\t\t\tcurrentBid;\n\t}\n\n\tmapping(uint => ANumberCard) \tpublic ownership;\n\tmapping(address => uint[]) \t\tpublic ownershipLookup;\n\n\tuint constant\t\t\t\t\tpublic minPrice = 1 finney;\n\tuint\t\t\t\t\t\t\tpublic houseEarnings;\n\tmapping(address => uint)\t\tpublic earnings;\n\tmapping(address => uint)\t\tpublic deadbids;\n\n\taddress houseOwner;\n\n\tevent NumberTaken(uint indexed number);\n\tevent PriceSet(uint indexed number, uint price);\n\tevent BidPlaced(uint indexed number, uint price);\n\tevent BidCanceled(uint indexed number, uint price);\n\tevent BidAccepted(uint indexed number, uint price);\n\tevent PriceAccepted(uint indexed number, uint price);\n\n\tfunction NumberBoard() {\n\t\thouseOwner = msg.sender;\n\t}\n\n\tfunction isOwner(address addr, uint theNum) constant returns (bool) {\n\t\treturn ownership[theNum].owner == addr;\n\t}\n\n\tfunction hasOwner(uint theNum) constant returns (bool) {\n\t\treturn ownership[theNum].owner > 0;\n\t}\n\n\tfunction ownedNumbers(address addr) constant returns (uint[]) {\n\t\tuint l = ownershipLookup[addr].length;\n\t\tuint[] memory ret = new uint[](l);\n\t\tfor (uint i = 0; i < l; i++) {\n\t\t\tret[i] = ownershipLookup[addr][i];\n\t\t}\n\t\treturn ret;\n\t}\n\n\tfunction takeNumber(uint theNum) {\n\t\trequire(!hasOwner(theNum));\n\t\trequire(!isOwner(msg.sender, theNum));\n\n\t\townership[theNum] = ANumberCard(msg.sender, 0, \"\", false, 0, 0, 0);\n\t\townershipLookup[msg.sender].push(theNum);\n\t\townership[theNum].lookupIdx = ownershipLookup[msg.sender].length - 1;\n\n\t\tNumberTaken(theNum);\n\t}\n\n\tfunction transferNumberOwnership(uint theNum, address from, address to) private {\n\t\trequire(isOwner(from, theNum));\n\n\t\tANumberCard storage card = ownership[theNum];\n\n\t\tcard.owner = to;\n\t\tuint len = ownershipLookup[from].length;\n\t\townershipLookup[from][card.lookupIdx] = ownershipLookup[from][len - 1];\n\t\townershipLookup[from].length--;\n\n\t\townershipLookup[to].push(theNum);\n\t\townership[theNum].lookupIdx = ownershipLookup[to].length - 1;\n\t}\n\n\tfunction updateMessage(uint theNum, string aMessage) {\n\t\trequire(isOwner(msg.sender, theNum));\n\n\t\townership[theNum].theMessage = aMessage;\n\t}\n\n//---------------------\n// Buy now\n//---------------------\n\n\tfunction hasBuyNowOffer(uint theNum) constant returns (bool) {\n\t\treturn ownership[theNum].buyNowActive;\n\t}\n\n\tfunction canAcceptBuyNow(uint theNum, address buyer) constant returns (bool) {\n\t\treturn ownership[theNum].owner != buyer && hasBuyNowOffer(theNum);\n\t}\n\n\tfunction placeBuyNowOffer(uint theNum, uint price) {\n\t\trequire(isOwner(msg.sender, theNum));\n\t\trequire(price >= minPrice);\n\n\t\tANumberCard storage numCard = ownership[theNum];\n\t\tnumCard.buyNowPrice = price;\n\t\tnumCard.buyNowActive = true;\n\n\t\tPriceSet(theNum, price);\n\t}\n\n\tfunction cancelBuyNowOffer(uint theNum) {\n\t\trequire(isOwner(msg.sender, theNum));\n\t\tcancelBuyNowOfferInternal(ownership[theNum]);\n\t}\n\n\tfunction acceptBuyNowOffer(uint theNum) payable {\n\t\trequire (canAcceptBuyNow(theNum, msg.sender));\n\t\tANumberCard storage numCard = ownership[theNum];\n\t\trequire (msg.value == numCard.buyNowPrice);\n\n\t\taddEarnings(msg.value, numCard.owner);\n\t\tcancelBidInternal(theNum);\n\n\t\ttransferNumberOwnership(theNum, numCard.owner, msg.sender);\n\t\tcancelBuyNowOfferInternal(numCard);\n\n\t\tPriceAccepted(theNum, msg.value);\n\t}\n\n\tfunction cancelBuyNowOfferInternal(ANumberCard storage numCard) private {\n\t\tnumCard.buyNowPrice = 0;\n\t\tnumCard.buyNowActive = false;\t\t\n\t}\n\n//---------------------\n// Bidding\n//---------------------\n\n\tfunction placeNewBid(uint theNum) payable {\n\t\trequire(hasOwner(theNum));\n\t\trequire(!isOwner(msg.sender, theNum));\n\t\trequire(msg.value >= minPrice);\n\n\t\tANumberCard storage numCard = ownership[theNum];\n\t\trequire(msg.value > numCard.currentBid + minPrice);\n\n\t\tdeadbids[numCard.currentBidder] += numCard.currentBid;\n\n\t\tnumCard.currentBid = msg.value;\n\t\tnumCard.currentBidder = msg.sender;\n\n\t\tBidPlaced(theNum, msg.value);\n\t}\n\n\tfunction cancelBid(uint theNum) {\n\t\tANumberCard storage numCard = ownership[theNum];\n\t\trequire(msg.sender == numCard.currentBidder);\n\n\t\tuint amount = numCard.currentBid;\n\t\tcancelBidInternal(theNum);\n\t\tBidCanceled(theNum, amount);\n\t}\n\n\tfunction cancelBidInternal(uint theNum) private {\n\t\tANumberCard storage numCard = ownership[theNum];\n\t\tdeadbids[numCard.currentBidder] += numCard.currentBid;\n\t\tnumCard.currentBid = 0;\n\t\tnumCard.currentBidder = 0;\n\t}\n\n\tfunction acceptBid(uint theNum) {\n\t\trequire(isOwner(msg.sender, theNum));\n\n\t\tANumberCard storage numCard = ownership[theNum];\n\t\trequire(numCard.currentBid > 0);\n\t\trequire(numCard.currentBidder != 0);\n\n\t\tuint amount = numCard.currentBid;\n\t\taddEarnings(amount, numCard.owner);\n\t\ttransferNumberOwnership(theNum, numCard.owner, numCard.currentBidder);\n\n\t\tnumCard.currentBidder = 0;\n\t\tnumCard.currentBid = 0;\n\n\t\tBidAccepted(theNum, amount);\n\t}\n\n\tfunction addEarnings(uint amount, address to) private {\n\t\tuint interest = amount / 100;\n\t\tearnings[to] += amount - interest;\n\t\thouseEarnings += interest;\n\t}\n\n\tfunction withdrawDeadBids() {\n \t\tuint amount = deadbids[msg.sender];\n        deadbids[msg.sender] = 0;\n        msg.sender.transfer(amount);\n\t}\n\n\tfunction withdrawEarnings() {\n \t\tuint amount = earnings[msg.sender];\n        earnings[msg.sender] = 0;\n        msg.sender.transfer(amount);\n\t}\n\n\tfunction withdrawHouseEarnings() {\n\t\trequire(msg.sender == houseOwner);\n\n\t\tuint amount = houseEarnings;\n\t\thouseEarnings = 0;\n        msg.sender.transfer(amount);\n\t}\n}", "debug": "calldata_NumberBoard_4 + calldata_NumberBoard_32 + 4: 0x8000000000000000000000000000000000000000000000000000000000000000\ncaller: 0x0\nstorage_0 + keccac_calldata_NumberBoard_4: 0x0\ncalldata_NumberBoard_0: 0x7f94938600000000000000000000000000000000000000000000000000000000\ncalldatasize_NumberBoard: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `updateMessage(uint256,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/temp/NumberBoard-0.sol", "function": "updateMessage(uint256,string)", "lineno": 3, "title": "Integer Overflow ", "type": "Warning"}, {"address": 6983, "code": "ntract NumberBoard {\n\n\tstruct ANumberCard {\n\t\taddress\t\t\towner;\n\t\tuint\t\t\tlookupIdx;\n\t\tstring  \t\ttheMessage;\n\t\tbool\t\t\tbuyNowActive;\n\t\tuint \t\t\tbuyNowPrice;\n\t\taddress\t\t\tcurrentBidder;\n\t\tuint\t\t\tcurrentBid;\n\t}\n\n\tmapping(uint => ANumberCard) \tpublic ownership;\n\tmapping(address => uint[]) \t\tpublic ownershipLookup;\n\n\tuint constant\t\t\t\t\tpublic minPrice = 1 finney;\n\tuint\t\t\t\t\t\t\tpublic houseEarnings;\n\tmapping(address => uint)\t\tpublic earnings;\n\tmapping(address => uint)\t\tpublic deadbids;\n\n\taddress houseOwner;\n\n\tevent NumberTaken(uint indexed number);\n\tevent PriceSet(uint indexed number, uint price);\n\tevent BidPlaced(uint indexed number, uint price);\n\tevent BidCanceled(uint indexed number, uint price);\n\tevent BidAccepted(uint indexed number, uint price);\n\tevent PriceAccepted(uint indexed number, uint price);\n\n\tfunction NumberBoard() {\n\t\thouseOwner = msg.sender;\n\t}\n\n\tfunction isOwner(address addr, uint theNum) constant returns (bool) {\n\t\treturn ownership[theNum].owner == addr;\n\t}\n\n\tfunction hasOwner(uint theNum) constant returns (bool) {\n\t\treturn ownership[theNum].owner > 0;\n\t}\n\n\tfunction ownedNumbers(address addr) constant returns (uint[]) {\n\t\tuint l = ownershipLookup[addr].length;\n\t\tuint[] memory ret = new uint[](l);\n\t\tfor (uint i = 0; i < l; i++) {\n\t\t\tret[i] = ownershipLookup[addr][i];\n\t\t}\n\t\treturn ret;\n\t}\n\n\tfunction takeNumber(uint theNum) {\n\t\trequire(!hasOwner(theNum));\n\t\trequire(!isOwner(msg.sender, theNum));\n\n\t\townership[theNum] = ANumberCard(msg.sender, 0, \"\", false, 0, 0, 0);\n\t\townershipLookup[msg.sender].push(theNum);\n\t\townership[theNum].lookupIdx = ownershipLookup[msg.sender].length - 1;\n\n\t\tNumberTaken(theNum);\n\t}\n\n\tfunction transferNumberOwnership(uint theNum, address from, address to) private {\n\t\trequire(isOwner(from, theNum));\n\n\t\tANumberCard storage card = ownership[theNum];\n\n\t\tcard.owner = to;\n\t\tuint len = ownershipLookup[from].length;\n\t\townershipLookup[from][card.lookupIdx] = ownershipLookup[from][len - 1];\n\t\townershipLookup[from].length--;\n\n\t\townershipLookup[to].push(theNum);\n\t\townership[theNum].lookupIdx = ownershipLookup[to].length - 1;\n\t}\n\n\tfunction updateMessage(uint theNum, string aMessage) {\n\t\trequire(isOwner(msg.sender, theNum));\n\n\t\townership[theNum].theMessage = aMessage;\n\t}\n\n//---------------------\n// Buy now\n//---------------------\n\n\tfunction hasBuyNowOffer(uint theNum) constant returns (bool) {\n\t\treturn ownership[theNum].buyNowActive;\n\t}\n\n\tfunction canAcceptBuyNow(uint theNum, address buyer) constant returns (bool) {\n\t\treturn ownership[theNum].owner != buyer && hasBuyNowOffer(theNum);\n\t}\n\n\tfunction placeBuyNowOffer(uint theNum, uint price) {\n\t\trequire(isOwner(msg.sender, theNum));\n\t\trequire(price >= minPrice);\n\n\t\tANumberCard storage numCard = ownership[theNum];\n\t\tnumCard.buyNowPrice = price;\n\t\tnumCard.buyNowActive = true;\n\n\t\tPriceSet(theNum, price);\n\t}\n\n\tfunction cancelBuyNowOffer(uint theNum) {\n\t\trequire(isOwner(msg.sender, theNum));\n\t\tcancelBuyNowOfferInternal(ownership[theNum]);\n\t}\n\n\tfunction acceptBuyNowOffer(uint theNum) payable {\n\t\trequire (canAcceptBuyNow(theNum, msg.sender));\n\t\tANumberCard storage numCard = ownership[theNum];\n\t\trequire (msg.value == numCard.buyNowPrice);\n\n\t\taddEarnings(msg.value, numCard.owner);\n\t\tcancelBidInternal(theNum);\n\n\t\ttransferNumberOwnership(theNum, numCard.owner, msg.sender);\n\t\tcancelBuyNowOfferInternal(numCard);\n\n\t\tPriceAccepted(theNum, msg.value);\n\t}\n\n\tfunction cancelBuyNowOfferInternal(ANumberCard storage numCard) private {\n\t\tnumCard.buyNowPrice = 0;\n\t\tnumCard.buyNowActive = false;\t\t\n\t}\n\n//---------------------\n// Bidding\n//---------------------\n\n\tfunction placeNewBid(uint theNum) payable {\n\t\trequire(hasOwner(theNum));\n\t\trequire(!isOwner(msg.sender, theNum));\n\t\trequire(msg.value >= minPrice);\n\n\t\tANumberCard storage numCard = ownership[theNum];\n\t\trequire(msg.value > numCard.currentBid + minPrice);\n\n\t\tdeadbids[numCard.currentBidder] += numCard.currentBid;\n\n\t\tnumCard.currentBid = msg.value;\n\t\tnumCard.currentBidder = msg.sender;\n\n\t\tBidPlaced(theNum, msg.value);\n\t}\n\n\tfunction cancelBid(uint theNum) {\n\t\tANumberCard storage numCard = ownership[theNum];\n\t\trequire(msg.sender == numCard.currentBidder);\n\n\t\tuint amount = numCard.currentBid;\n\t\tcancelBidInternal(theNum);\n\t\tBidCanceled(theNum, amount);\n\t}\n\n\tfunction cancelBidInternal(uint theNum) private {\n\t\tANumberCard storage numCard = ownership[theNum];\n\t\tdeadbids[numCard.currentBidder] += numCard.currentBid;\n\t\tnumCard.currentBid = 0;\n\t\tnumCard.currentBidder = 0;\n\t}\n\n\tfunction acceptBid(uint theNum) {\n\t\trequire(isOwner(msg.sender, theNum));\n\n\t\tANumberCard storage numCard = ownership[theNum];\n\t\trequire(numCard.currentBid > 0);\n\t\trequire(numCard.currentBidder != 0);\n\n\t\tuint amount = numCard.currentBid;\n\t\taddEarnings(amount, numCard.owner);\n\t\ttransferNumberOwnership(theNum, numCard.owner, numCard.currentBidder);\n\n\t\tnumCard.currentBidder = 0;\n\t\tnumCard.currentBid = 0;\n\n\t\tBidAccepted(theNum, amount);\n\t}\n\n\tfunction addEarnings(uint amount, address to) private {\n\t\tuint interest = amount / 100;\n\t\tearnings[to] += amount - interest;\n\t\thouseEarnings += interest;\n\t}\n\n\tfunction withdrawDeadBids() {\n \t\tuint amount = deadbids[msg.sender];\n        deadbids[msg.sender] = 0;\n        msg.sender.transfer(amount);\n\t}\n\n\tfunction withdrawEarnings() {\n \t\tuint amount = earnings[msg.sender];\n        earnings[msg.sender] = 0;\n        msg.sender.transfer(amount);\n\t}\n\n\tfunction withdrawHouseEarnings() {\n\t\trequire(msg.sender == houseOwner);\n\n\t\tuint amount = houseEarnings;\n\t\thouseEarnings = 0;\n        msg.sender.transfer(amount);\n\t}\n}", "debug": "calldata_NumberBoard_4 + calldata_NumberBoard_32 + 4: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\ncaller: 0x0\nstorage_0 + keccac_calldata_NumberBoard_4: 0x0\ncalldata_NumberBoard_0: 0x7f94938600000000000000000000000000000000000000000000000000000000\ncalldatasize_NumberBoard: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `updateMessage(uint256,string)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/temp/NumberBoard-0.sol", "function": "updateMessage(uint256,string)", "lineno": 3, "title": "Integer Overflow ", "type": "Warning"}], "success": true}
